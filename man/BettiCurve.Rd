% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/representation-vector-methods.R
\name{BettiCurve}
\alias{BettiCurve}
\title{Vector Representation Betti Curve}
\description{
Computes Betti curves from persistence diagrams. There are
several modes of operation: with a given resolution (with or without a
\code{sample_range}), with a predefined grid, and with none of the previous.
With a predefined grid, the class computes the Betti numbers at those grid
points. Without a predefined grid, if the resolution is set to \code{NULL}, it
can be fit to a list of persistence diagrams and produce a grid that
consists of (at least) the filtration values at which at least one of those
persistence diagrams changes Betti numbers, and then compute the Betti
numbers at those grid points. In the latter mode, the exact Betti curve is
computed for the entire real line. Otherwise, if the resolution is given,
the Betti curve is obtained by sampling evenly using either the given
\code{sample_range} or based on the persistence diagrams.
}
\examples{

## ------------------------------------------------
## Method `BettiCurve$new`
## ------------------------------------------------

n <- 10
X <- lapply(
  seq(0, 2 * pi, len = n + 1)[1:n],
  function(.x) c(cos(.x), sin(.x))
)
if (reticulate::py_module_available("gudhi")) {
  ac <- AlphaComplex$new(points = X)
  st <- ac$create_simplex_tree()
  dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)
  bc <- BettiCurve$new()
  bc$apply(dgm)
  bc$fit_transform(list(dgm))
}
}
\author{
Mathieu CarriÃ¨re
}
\section{Super classes}{
\code{rgudhi::PythonClass} -> \code{rgudhi::SKLearnClass} -> \code{\link[rgudhi:VectorRepresentationStep]{rgudhi::VectorRepresentationStep}} -> \code{BettiCurve}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-BettiCurve-new}{\code{BettiCurve$new()}}
\item \href{#method-BettiCurve-clone}{\code{BettiCurve$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PythonClass" data-id="get_python_class"><a href='../../rgudhi/html/PythonClass.html#method-PythonClass-get_python_class'><code>rgudhi::PythonClass$get_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PythonClass" data-id="set_python_class"><a href='../../rgudhi/html/PythonClass.html#method-PythonClass-set_python_class'><code>rgudhi::PythonClass$set_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="SKLearnClass" data-id="get_params"><a href='../../rgudhi/html/SKLearnClass.html#method-SKLearnClass-get_params'><code>rgudhi::SKLearnClass$get_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="SKLearnClass" data-id="set_params"><a href='../../rgudhi/html/SKLearnClass.html#method-SKLearnClass-set_params'><code>rgudhi::SKLearnClass$set_params()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="VectorRepresentationStep" data-id="apply"><a href='../../rgudhi/html/VectorRepresentationStep.html#method-VectorRepresentationStep-apply'><code>rgudhi::VectorRepresentationStep$apply()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="VectorRepresentationStep" data-id="fit"><a href='../../rgudhi/html/VectorRepresentationStep.html#method-VectorRepresentationStep-fit'><code>rgudhi::VectorRepresentationStep$fit()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="VectorRepresentationStep" data-id="fit_transform"><a href='../../rgudhi/html/VectorRepresentationStep.html#method-VectorRepresentationStep-fit_transform'><code>rgudhi::VectorRepresentationStep$fit_transform()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="VectorRepresentationStep" data-id="transform"><a href='../../rgudhi/html/VectorRepresentationStep.html#method-VectorRepresentationStep-transform'><code>rgudhi::VectorRepresentationStep$transform()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BettiCurve-new"></a>}}
\if{latex}{\out{\hypertarget{method-BettiCurve-new}{}}}
\subsection{Method \code{new()}}{
The \code{\link{BettiCurve}} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BettiCurve$new(
  resolution = 100,
  sample_range = rep(NA, 2),
  predefined_grid = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{resolution}}{An integer value specifying the number of sample for
the piecewise constant function. Defaults to \code{100L}.}

\item{\code{sample_range}}{A length-2 numeric vector specifying the minimum and
maximum of the piecewise constant function domain, of the form
\eqn{[x_\min, x_\max]}. Defaults to \code{rep(NA, 2)}. It is the interval on
which samples will be drawn evenly. If one of the values is \code{NA}, it
can be computed from the persistence diagrams with the \verb{$fit()} method.}

\item{\code{predefined_grid}}{A numeric vector specifying a predefined grid of
points at which to compute the Betti curves. Must be strictly ordered.
Infinities are ok. If set to \code{NULL} (default), and resolution is given,
the grid will be uniform from \eqn{x_\min} to \eqn{x_\max} in
\code{resolution} steps, otherwise a grid will be computed that captures all
changes in Betti numbers in the provided data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object of class \code{\link{BettiCurve}}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{n <- 10
X <- lapply(
  seq(0, 2 * pi, len = n + 1)[1:n],
  function(.x) c(cos(.x), sin(.x))
)
if (reticulate::py_module_available("gudhi")) {
  ac <- AlphaComplex$new(points = X)
  st <- ac$create_simplex_tree()
  dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)
  bc <- BettiCurve$new()
  bc$apply(dgm)
  bc$fit_transform(list(dgm))
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-BettiCurve-clone"></a>}}
\if{latex}{\out{\hypertarget{method-BettiCurve-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{BettiCurve$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
