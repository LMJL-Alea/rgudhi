% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complex-cover.R
\name{CoverComplex}
\alias{CoverComplex}
\title{R6 Class for Cover Complex}
\description{
\loadmathjax Nerves and Graph Induced Complexes are cover
complexes, i.e. simplicial complexes that provably contain topological
information about the input data. They can be computed with a cover of the
data, that comes i.e. from the pre-image of a family of intervals covering
the image of a scalar-valued function defined on the data.
}
\details{
\strong{Cover complex data structure.} The data structure is a simplicial
complex, representing a Graph Induced simplicial Complex (GIC) or a Nerve,
and whose simplices are computed with a cover \mjseqn{C} of a point cloud
\mjseqn{P}, which often comes from the pre-images of intervals covering the
image of a function \mjseqn{f} defined on \mjseqn{P}. These intervals are
parameterised by their resolution (either their length or their number) and
their gain (percentage of overlap). To compute a GIC, one also needs a
graph \mjseqn{G} built on top of \mjseqn{P}, whose cliques with vertices
belonging to different elements of \mjseqn{C} correspond to the simplices
of the GIC.
}
\examples{

## ------------------------------------------------
## Method `CoverComplex$new`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc
}

## ------------------------------------------------
## Method `CoverComplex$compute_PD`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_PD()
}

## ------------------------------------------------
## Method `CoverComplex$compute_confidence_level_from_distance`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_confidence_level_from_distance(distance_threshold = 0.1)
}

## ------------------------------------------------
## Method `CoverComplex$compute_distance_from_confidence_level`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distance_from_confidence_level(confidence_level = 0.1)
}

## ------------------------------------------------
## Method `CoverComplex$compute_distribution`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distribution()
}

## ------------------------------------------------
## Method `CoverComplex$compute_p_value`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_p_value()
}

## ------------------------------------------------
## Method `CoverComplex$create_simplex_tree`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  st <- cc$create_simplex_tree()
}

## ------------------------------------------------
## Method `CoverComplex$find_simplices`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$find_simplices()
}

## ------------------------------------------------
## Method `CoverComplex$plot_dot`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  withr::with_tempdir({
    cc$plot_dot()
  })
}

## ------------------------------------------------
## Method `CoverComplex$plot_off`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  withr::with_tempdir({
    cc$plot_dot()
  })
}

## ------------------------------------------------
## Method `CoverComplex$read_point_cloud`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
  cc$read_point_cloud(url)
}

## ------------------------------------------------
## Method `CoverComplex$set_automatic_resolution`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_automatic_resolution()
}

## ------------------------------------------------
## Method `CoverComplex$set_color_from_coordinate`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_color_from_coordinate()
}

## ------------------------------------------------
## Method `CoverComplex$set_color_from_file`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_color_from_file()
}

## ------------------------------------------------
## Method `CoverComplex$set_color_from_range`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_color_from_range(seq(0, 1, len = 100))
}

## ------------------------------------------------
## Method `CoverComplex$set_cover_from_Voronoi`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_cover_from_Voronoi()
}

## ------------------------------------------------
## Method `CoverComplex$set_cover_from_file`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_cover_from_file()
}

## ------------------------------------------------
## Method `CoverComplex$set_cover_from_function`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_cover_from_function()
}

## ------------------------------------------------
## Method `CoverComplex$set_distances_from_range`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_distances_from_range()
}

## ------------------------------------------------
## Method `CoverComplex$set_function_from_coordinate`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_function_from_coordinate()
}
}
\seealso{
Other filtrations and reconstructions: 
\code{\link{AlphaComplex}},
\code{\link{RipsComplex}},
\code{\link{WitnessComplex}}
}
\author{
Mathieu CarriÃ¨re
}
\concept{filtrations and reconstructions}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CoverComplex-new}{\code{CoverComplex$new()}}
\item \href{#method-CoverComplex-compute_PD}{\code{CoverComplex$compute_PD()}}
\item \href{#method-CoverComplex-compute_confidence_level_from_distance}{\code{CoverComplex$compute_confidence_level_from_distance()}}
\item \href{#method-CoverComplex-compute_distance_from_confidence_level}{\code{CoverComplex$compute_distance_from_confidence_level()}}
\item \href{#method-CoverComplex-compute_distribution}{\code{CoverComplex$compute_distribution()}}
\item \href{#method-CoverComplex-compute_p_value}{\code{CoverComplex$compute_p_value()}}
\item \href{#method-CoverComplex-create_simplex_tree}{\code{CoverComplex$create_simplex_tree()}}
\item \href{#method-CoverComplex-find_simplices}{\code{CoverComplex$find_simplices()}}
\item \href{#method-CoverComplex-plot_dot}{\code{CoverComplex$plot_dot()}}
\item \href{#method-CoverComplex-plot_off}{\code{CoverComplex$plot_off()}}
\item \href{#method-CoverComplex-read_point_cloud}{\code{CoverComplex$read_point_cloud()}}
\item \href{#method-CoverComplex-set_automatic_resolution}{\code{CoverComplex$set_automatic_resolution()}}
\item \href{#method-CoverComplex-set_color_from_coordinate}{\code{CoverComplex$set_color_from_coordinate()}}
\item \href{#method-CoverComplex-set_color_from_file}{\code{CoverComplex$set_color_from_file()}}
\item \href{#method-CoverComplex-set_color_from_range}{\code{CoverComplex$set_color_from_range()}}
\item \href{#method-CoverComplex-set_cover_from_Voronoi}{\code{CoverComplex$set_cover_from_Voronoi()}}
\item \href{#method-CoverComplex-set_cover_from_file}{\code{CoverComplex$set_cover_from_file()}}
\item \href{#method-CoverComplex-set_cover_from_function}{\code{CoverComplex$set_cover_from_function()}}
\item \href{#method-CoverComplex-set_distances_from_range}{\code{CoverComplex$set_distances_from_range()}}
\item \href{#method-CoverComplex-set_function_from_coordinate}{\code{CoverComplex$set_function_from_coordinate()}}
\item \href{#method-CoverComplex-clone}{\code{CoverComplex$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-new"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-new}{}}}
\subsection{Method \code{new()}}{
\code{CoverComplex} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link{CoverComplex}} object storing the Cover complex.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_PD"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_PD}{}}}
\subsection{Method \code{compute_PD()}}{
Computes the extended persistence diagram of the complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_PD()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_PD()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_confidence_level_from_distance"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_confidence_level_from_distance}{}}}
\subsection{Method \code{compute_confidence_level_from_distance()}}{
Computes the confidence level of a specific Bottleneck
distance threshold.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_confidence_level_from_distance(distance_threshold)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distance_threshold}}{A numeric value specifying the desired
Bottleneck distance threshold.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the confidence level corresponding to the
input threshold on the Bottleneck distance.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_confidence_level_from_distance(distance_threshold = 0.1)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_distance_from_confidence_level"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_distance_from_confidence_level}{}}}
\subsection{Method \code{compute_distance_from_confidence_level()}}{
Computes the bottleneck distance threshold corresponding to
a specific confidence level.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_distance_from_confidence_level(confidence_level)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{confidence_level}}{A numeric value specifying the desired confidence
level.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the threshold on the Bottleneck distance
corresponding to the input confidence level.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distance_from_confidence_level(confidence_level = 0.1)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_distribution"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_distribution}{}}}
\subsection{Method \code{compute_distribution()}}{
Computes the distribution of distances via bootstrap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_distribution(N = 100L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{N}}{An integer value specifying the number of iterations. Defaults to \code{100L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distribution()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_p_value"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_p_value}{}}}
\subsection{Method \code{compute_p_value()}}{
Computes the p-value, i.e. the opposite of the confidence
level of the largest bottleneck distance preserving the points in the
persistence diagram of the output simplicial complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_p_value()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A numeric value storing the desired p-value.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_p_value()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-create_simplex_tree"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-create_simplex_tree}{}}}
\subsection{Method \code{create_simplex_tree()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$create_simplex_tree()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link{SimplexTree}} object storing the simplex
tree created from the Cover complex.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  st <- cc$create_simplex_tree()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-find_simplices"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-find_simplices}{}}}
\subsection{Method \code{find_simplices()}}{
Computes the simplices of the simplicial complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$find_simplices()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$find_simplices()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-plot_dot"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-plot_dot}{}}}
\subsection{Method \code{plot_dot()}}{
Creates a \code{.dot} file called \verb{_sc.dot} for neato (part of
the \strong{graphviz} Python package) once the simplicial complex is
computed to get a visualization of its 1-skeleton in a \code{.pdf} file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$plot_dot(dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.dot} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  withr::with_tempdir({
    cc$plot_dot()
  })
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-plot_off"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-plot_off}{}}}
\subsection{Method \code{plot_off()}}{
Creates a \code{.off} file called \verb{_sc.off} for 3D visualization,
which contains the 2-skeleton of the GIC. This function assumes that
the cover has been computed with Voronoi. If data points are in 1D or
2D, the remaining coordinates of the points embedded in 3D are set to
0.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$plot_off(dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.off} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  withr::with_tempdir({
    cc$plot_dot()
  })
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-read_point_cloud"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-read_point_cloud}{}}}
\subsection{Method \code{read_point_cloud()}}{
Reads and stores the input point cloud from a \verb{.(n)OFF}
file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$read_point_cloud(off_file, chainable = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{off_file}}{A character string specifying the location of the
\verb{.(n)OFF} file to read the point cloud from.}

\item{\code{chainable}}{A boolean specyfing whether the method should be
chainable in which case it returns invisibly the class itself. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly if
\code{chainable = TRUE} or a boolean storing the read file status.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
  cc$read_point_cloud(url)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_automatic_resolution"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_automatic_resolution}{}}}
\subsection{Method \code{set_automatic_resolution()}}{
Computes the optimal length of intervals (i.e. the smallest
interval length avoiding discretization artifacts - see
\insertCite{carriere2018statistical;textual}{rgudhi}) for a functional
cover.
\subsection{References}{

\insertAllCited{}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_automatic_resolution(chainable = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{chainable}}{A boolean specyfing whether the method should be
chainable in which case it returns invisibly the class itself. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly if
\code{chainable = TRUE} or a numeric value storing the resolution interval
length used to compute the cover.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_automatic_resolution()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_color_from_coordinate"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_color_from_coordinate}{}}}
\subsection{Method \code{set_color_from_coordinate()}}{
Computes the function used to color the nodes of the
simplicial complex from the k-th coordinate.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_color_from_coordinate(k = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{k}}{An integer value specifying the coordinate to use (start at 0).
Defaults to \code{0L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_color_from_coordinate()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_color_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_color_from_file}{}}}
\subsection{Method \code{set_color_from_file()}}{
Computes the function used to color the nodes of the simplicial complex from a file containing the function values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_color_from_file(color_file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{color_file_name}}{A character string specifying the name of the input color file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_color_from_file()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_color_from_range"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_color_from_range}{}}}
\subsection{Method \code{set_color_from_range()}}{
Computes the function used to color the nodes of the
simplicial complex from a vector stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_color_from_range(color)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{color}}{A numeric vector specifying the input vector of values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_color_from_range(seq(0, 1, len = 100))
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_cover_from_Voronoi"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_cover_from_Voronoi}{}}}
\subsection{Method \code{set_cover_from_Voronoi()}}{
Creates the cover \mjseqn{C} from the VoronoÃ¯ cells of a
subsampling of the point cloud.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_cover_from_Voronoi(m = 100L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{An integer value specifying the number of points in the
subsample. Defaults to \code{100L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_cover_from_Voronoi()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_cover_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_cover_from_file}{}}}
\subsection{Method \code{set_cover_from_file()}}{
Creates the cover \mjseqn{C} from a file containing the cover elements of each point (the order has to be the same as in the input file!).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_cover_from_file(cover_file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cover_file_name}}{A character string specifying the path to the input cover file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$set_cover_from_file()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_cover_from_function"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_cover_from_function}{}}}
\subsection{Method \code{set_cover_from_function()}}{
Creates a cover \mjseqn{C} from the pre-images of the
function \mjseqn{f}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_cover_from_function()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_cover_from_function()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_distances_from_range"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_distances_from_range}{}}}
\subsection{Method \code{set_distances_from_range()}}{
Reads and stores the input distance matrix from a vector
stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_distances_from_range(distance_matrix)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distance_matrix}}{A numeric matrix specifying the distance matrix.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_distances_from_range()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_function_from_coordinate"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_function_from_coordinate}{}}}
\subsection{Method \code{set_function_from_coordinate()}}{
Creates the function \mjseqn{f} from the \mjseqn{k}-\emph{th}
coordinate of the point cloud.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_function_from_coordinate(k = 0L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{k}}{An integer value specifying the coordinate to use (starts at
\code{0L}). Defaults to \code{0L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$set_function_from_coordinate()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
