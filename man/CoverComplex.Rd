% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complex-cover.R
\name{CoverComplex}
\alias{CoverComplex}
\title{R6 Class for Cover Complex}
\description{
Nerves and Graph Induced Complexes are cover complexes, i.e.
simplicial complexes that provably contain topological information about
the input data. They can be computed with a cover of the data, that comes
i.e. from the pre-image of a family of intervals covering the image of a
scalar-valued function defined on the data.
}
\details{
\strong{Cover complex data structure.} The data structure is a simplicial
complex, representing a Graph Induced simplicial Complex (GIC) or a Nerve,
and whose simplices are computed with a cover \eqn{C} of a point cloud
\eqn{P}, which often comes from the pre-images of intervals covering the
image of a function \eqn{f} defined on \eqn{P}. These intervals are
parameterised by their resolution (either their length or their number) and
their gain (percentage of overlap). To compute a GIC, one also needs a
graph \eqn{G} built on top of \eqn{P}, whose cliques with vertices
belonging to different elements of \eqn{C} correspond to the simplices of
the GIC.
}
\examples{
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
cc <- CoverComplex$new(type = "GIC")
cc
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  compute_PD()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  compute_distribution()$
  compute_confidence_level_from_distance(distance_threshold = 0.1)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  compute_distribution()$
  compute_distance_from_confidence_level(confidence_level = 0.95)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  compute_distribution()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  compute_distribution()$
  compute_p_value()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
st <- cc$
  read_point_cloud(url)$
  create_simplex_tree()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()
withr::with_tempdir({
  cc$plot_dot()
})
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()
withr::with_tempdir({
  cc$plot_dot()
})
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cf <- system.file("extdata", "color_file.txt", package = "rgudhi")
cc <- CoverComplex$
  new(type = "GIC")$
  read_point_cloud(url)$
  set_color_from_file(cf)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_range(seq(0, 1, len = 100))
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_Voronoi()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cf <- system.file("extdata", "cover_file.txt", package = "rgudhi")
cc <- CoverComplex$
  new(type = "GIC")$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()#$
  #set_cover_from_file(cf) # TODO: fix in python
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
D <- dist(iris[, -5])
cc <- CoverComplex$new(type = "GIC")
cc$set_distances_from_range(D)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
ff <- system.file("extdata", "function_file.txt", package = "rgudhi")
cc <- CoverComplex$
  new(type = "GIC")$
  read_point_cloud(url)$
  set_function_from_file(ff)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_range(seq(0, 1, len = 100))
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
cc <- CoverComplex$new(type = "GIC")
cc$set_gain()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_OFF()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
gf <- system.file("extdata", "graph_file.txt", package = "rgudhi")
cc <- CoverComplex$
  new(type = "GIC")$
  read_point_cloud(url)$
  set_graph_from_file(gf)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_rips(0.1)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  set_mask(1)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
X <- seq_circle(10)
X <- Reduce(rbind, X, init = numeric())
cc <- CoverComplex$new(type = "GIC")
cc$
  set_point_cloud_from_range(X)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_length(1)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
cc <- CoverComplex$new(type = "GIC")
cc$set_subsampling(constant = 0, power = 1)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
cc <- CoverComplex$new(type = "GIC")
cc$set_verbose(FALSE)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()$
  subpopulation(0)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
url <- "https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off"
cc <- CoverComplex$new(type = "GIC")
cc$
  read_point_cloud(url)$
  set_graph_from_automatic_rips()$
  set_function_from_coordinate()$
  set_color_from_coordinate()$
  set_resolution_with_interval_number(100)$
  set_cover_from_function()$
  set_automatic_resolution()$
  find_simplices()
withr::with_tempdir({
  cc$write_info()
})
\dontshow{\}) # examplesIf}
}
\seealso{
Other filtrations and reconstructions: 
\code{\link{AlphaComplex}},
\code{\link{RipsComplex}},
\code{\link{TangentialComplex}},
\code{\link{WitnessComplex}}
}
\author{
Mathieu Carrière
}
\concept{filtrations and reconstructions}
\section{Super class}{
\code{rgudhi::PythonClass} -> \code{CoverComplex}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CoverComplex-new}{\code{CoverComplex$new()}}
\item \href{#method-CoverComplex-compute_PD}{\code{CoverComplex$compute_PD()}}
\item \href{#method-CoverComplex-compute_confidence_level_from_distance}{\code{CoverComplex$compute_confidence_level_from_distance()}}
\item \href{#method-CoverComplex-compute_distance_from_confidence_level}{\code{CoverComplex$compute_distance_from_confidence_level()}}
\item \href{#method-CoverComplex-compute_distribution}{\code{CoverComplex$compute_distribution()}}
\item \href{#method-CoverComplex-compute_p_value}{\code{CoverComplex$compute_p_value()}}
\item \href{#method-CoverComplex-create_simplex_tree}{\code{CoverComplex$create_simplex_tree()}}
\item \href{#method-CoverComplex-find_simplices}{\code{CoverComplex$find_simplices()}}
\item \href{#method-CoverComplex-plot_dot}{\code{CoverComplex$plot_dot()}}
\item \href{#method-CoverComplex-plot_off}{\code{CoverComplex$plot_off()}}
\item \href{#method-CoverComplex-read_point_cloud}{\code{CoverComplex$read_point_cloud()}}
\item \href{#method-CoverComplex-set_automatic_resolution}{\code{CoverComplex$set_automatic_resolution()}}
\item \href{#method-CoverComplex-set_color_from_coordinate}{\code{CoverComplex$set_color_from_coordinate()}}
\item \href{#method-CoverComplex-set_color_from_file}{\code{CoverComplex$set_color_from_file()}}
\item \href{#method-CoverComplex-set_color_from_range}{\code{CoverComplex$set_color_from_range()}}
\item \href{#method-CoverComplex-set_cover_from_Voronoi}{\code{CoverComplex$set_cover_from_Voronoi()}}
\item \href{#method-CoverComplex-set_cover_from_file}{\code{CoverComplex$set_cover_from_file()}}
\item \href{#method-CoverComplex-set_cover_from_function}{\code{CoverComplex$set_cover_from_function()}}
\item \href{#method-CoverComplex-set_distances_from_range}{\code{CoverComplex$set_distances_from_range()}}
\item \href{#method-CoverComplex-set_function_from_coordinate}{\code{CoverComplex$set_function_from_coordinate()}}
\item \href{#method-CoverComplex-set_function_from_file}{\code{CoverComplex$set_function_from_file()}}
\item \href{#method-CoverComplex-set_function_from_range}{\code{CoverComplex$set_function_from_range()}}
\item \href{#method-CoverComplex-set_gain}{\code{CoverComplex$set_gain()}}
\item \href{#method-CoverComplex-set_graph_from_OFF}{\code{CoverComplex$set_graph_from_OFF()}}
\item \href{#method-CoverComplex-set_graph_from_automatic_rips}{\code{CoverComplex$set_graph_from_automatic_rips()}}
\item \href{#method-CoverComplex-set_graph_from_file}{\code{CoverComplex$set_graph_from_file()}}
\item \href{#method-CoverComplex-set_graph_from_rips}{\code{CoverComplex$set_graph_from_rips()}}
\item \href{#method-CoverComplex-set_mask}{\code{CoverComplex$set_mask()}}
\item \href{#method-CoverComplex-set_point_cloud_from_range}{\code{CoverComplex$set_point_cloud_from_range()}}
\item \href{#method-CoverComplex-set_resolution_with_interval_length}{\code{CoverComplex$set_resolution_with_interval_length()}}
\item \href{#method-CoverComplex-set_resolution_with_interval_number}{\code{CoverComplex$set_resolution_with_interval_number()}}
\item \href{#method-CoverComplex-set_subsampling}{\code{CoverComplex$set_subsampling()}}
\item \href{#method-CoverComplex-set_verbose}{\code{CoverComplex$set_verbose()}}
\item \href{#method-CoverComplex-subpopulation}{\code{CoverComplex$subpopulation()}}
\item \href{#method-CoverComplex-write_info}{\code{CoverComplex$write_info()}}
\item \href{#method-CoverComplex-clone}{\code{CoverComplex$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PythonClass" data-id="get_python_class"><a href='../../rgudhi/html/PythonClass.html#method-PythonClass-get_python_class'><code>rgudhi::PythonClass$get_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PythonClass" data-id="set_python_class"><a href='../../rgudhi/html/PythonClass.html#method-PythonClass-set_python_class'><code>rgudhi::PythonClass$set_python_class()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-new"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-new}{}}}
\subsection{Method \code{new()}}{
\code{CoverComplex} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$new(type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{A character string specifying the type of output simplicial
complex. Can be either \code{"GIC"} or \code{"Nerve"}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{\link{CoverComplex}} object storing the Cover complex.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_PD"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_PD}{}}}
\subsection{Method \code{compute_PD()}}{
Computes the extended persistence diagram of the complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_PD()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_confidence_level_from_distance"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_confidence_level_from_distance}{}}}
\subsection{Method \code{compute_confidence_level_from_distance()}}{
Computes the confidence level of a specific Bottleneck
distance threshold.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_confidence_level_from_distance(distance_threshold)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distance_threshold}}{A numeric value specifying the desired
Bottleneck distance threshold.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the confidence level corresponding to the
input threshold on the Bottleneck distance.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_distance_from_confidence_level"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_distance_from_confidence_level}{}}}
\subsection{Method \code{compute_distance_from_confidence_level()}}{
Computes the bottleneck distance threshold corresponding to
a specific confidence level.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_distance_from_confidence_level(confidence_level)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{confidence_level}}{A numeric value specifying the desired confidence
level.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the threshold on the Bottleneck distance
corresponding to the input confidence level.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_distribution"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_distribution}{}}}
\subsection{Method \code{compute_distribution()}}{
Computes the distribution of distances via bootstrap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_distribution(N = 100L, dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{N}}{An integer value specifying the number of iterations. Defaults
to \code{100L}.}

\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.off} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_p_value"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_p_value}{}}}
\subsection{Method \code{compute_p_value()}}{
Computes the p-value, i.e. the opposite of the confidence
level of the largest bottleneck distance preserving the points in the
persistence diagram of the output simplicial complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_p_value()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A numeric value storing the desired p-value.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-create_simplex_tree"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-create_simplex_tree}{}}}
\subsection{Method \code{create_simplex_tree()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$create_simplex_tree()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link{SimplexTree}} object storing the simplex
tree created from the Cover complex.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-find_simplices"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-find_simplices}{}}}
\subsection{Method \code{find_simplices()}}{
Computes the simplices of the simplicial complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$find_simplices()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-plot_dot"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-plot_dot}{}}}
\subsection{Method \code{plot_dot()}}{
Creates a \code{.dot} file called \verb{_sc.dot} for neato (part of
the \strong{graphviz} Python package) once the simplicial complex is
computed to get a visualization of its 1-skeleton in a \code{.pdf} file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$plot_dot(dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.dot} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-plot_off"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-plot_off}{}}}
\subsection{Method \code{plot_off()}}{
Creates a \code{.off} file called \verb{_sc.off} for 3D visualization,
which contains the 2-skeleton of the GIC. This function assumes that
the cover has been computed with Voronoi. If data points are in 1D or
2D, the remaining coordinates of the points embedded in 3D are set to
0.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$plot_off(dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.off} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-read_point_cloud"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-read_point_cloud}{}}}
\subsection{Method \code{read_point_cloud()}}{
Reads and stores the input point cloud from a \verb{.(n)OFF}
file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$read_point_cloud(off_file, chainable = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{off_file}}{A character string specifying the location of the
\verb{.(n)OFF} file to read the point cloud from.}

\item{\code{chainable}}{A boolean specyfing whether the method should be
chainable in which case it returns invisibly the class itself. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly if
\code{chainable = TRUE} or a boolean storing the read file status.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_automatic_resolution"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_automatic_resolution}{}}}
\subsection{Method \code{set_automatic_resolution()}}{
Computes the optimal length of intervals (i.e. the smallest
interval length avoiding discretization artifacts - see
\insertCite{carriere2018statistical;textual}{rgudhi}) for a functional
cover.
\subsection{References}{

\insertCited{}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_automatic_resolution(chainable = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{chainable}}{A boolean specyfing whether the method should be
chainable in which case it returns invisibly the class itself. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly if
\code{chainable = TRUE} or a numeric value storing the resolution interval
length used to compute the cover.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_color_from_coordinate"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_color_from_coordinate}{}}}
\subsection{Method \code{set_color_from_coordinate()}}{
Computes the function used to color the nodes of the
simplicial complex from the k-th coordinate.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_color_from_coordinate(k = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{k}}{An integer value specifying the coordinate to use (start at 0).
Defaults to \code{0L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_color_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_color_from_file}{}}}
\subsection{Method \code{set_color_from_file()}}{
Computes the function used to color the nodes of the
simplicial complex from a file containing the function values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_color_from_file(color_file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{color_file_name}}{A character string specifying the name of the
input color file.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The color file should be a \code{.txt} file with as many lines as
there are points in the point cloud. Each line should be populated with
a single numeric value.
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_color_from_range"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_color_from_range}{}}}
\subsection{Method \code{set_color_from_range()}}{
Computes the function used to color the nodes of the
simplicial complex from a vector stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_color_from_range(color_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{color_values}}{A numeric vector specifying the input vector of
values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_cover_from_Voronoi"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_cover_from_Voronoi}{}}}
\subsection{Method \code{set_cover_from_Voronoi()}}{
Creates the cover \eqn{C} from the Voronoï cells of a
subsampling of the point cloud.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_cover_from_Voronoi(m = 100L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{m}}{An integer value specifying the number of points in the
subsample. Defaults to \code{100L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_cover_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_cover_from_file}{}}}
\subsection{Method \code{set_cover_from_file()}}{
Creates the cover \eqn{C} from a file containing the cover
elements of each point (the order has to be the same as in the input
file!).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_cover_from_file(cover_file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cover_file_name}}{A character string specifying the path to the
input cover file.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The cover file should be a \code{.txt} file with as many lines as
there are points in the point cloud. Each line should be populated with
an integer vector specifying to which cover elements does each point
belong.
}

\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_cover_from_function"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_cover_from_function}{}}}
\subsection{Method \code{set_cover_from_function()}}{
Creates a cover \eqn{C} from the pre-images of the function
\eqn{f}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_cover_from_function()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_distances_from_range"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_distances_from_range}{}}}
\subsection{Method \code{set_distances_from_range()}}{
Reads and stores the input distance matrix from a vector
stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_distances_from_range(distance_matrix)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distance_matrix}}{A numeric matrix specifying the distance matrix.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_function_from_coordinate"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_function_from_coordinate}{}}}
\subsection{Method \code{set_function_from_coordinate()}}{
Creates the function \eqn{f} from the \eqn{k}-\emph{th}
coordinate of the point cloud.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_function_from_coordinate(k = 0L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{k}}{An integer value specifying the coordinate to use (starts at
\code{0L}). Defaults to \code{0L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_function_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_function_from_file}{}}}
\subsection{Method \code{set_function_from_file()}}{
Creates the function \eqn{f} from a file containing the
function values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_function_from_file(func_file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{func_file_name}}{A character string specifying the path to the input
function file.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The function file should be a \code{.txt} file with as many lines as
there are points in the point cloud. Each line should be populated with
a single numeric value.
}

\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_function_from_range"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_function_from_range}{}}}
\subsection{Method \code{set_function_from_range()}}{
Creates the function \eqn{f} from a vector stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_function_from_range(function_values)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{function_values}}{A numeric vector specifying the function values to
be used.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_gain"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_gain}{}}}
\subsection{Method \code{set_gain()}}{
Sets a gain from a value stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_gain(g = 0.3)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{g}}{A numeric value specifying the gain. Defaults to \code{0.3}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_graph_from_OFF"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_graph_from_OFF}{}}}
\subsection{Method \code{set_graph_from_OFF()}}{
Creates a graph \eqn{G} from the triangulation given by the
input \code{.off} file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_graph_from_OFF()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_graph_from_automatic_rips"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_graph_from_automatic_rips}{}}}
\subsection{Method \code{set_graph_from_automatic_rips()}}{
Creates a graph \eqn{G} from a Rips complex whose threshold
value is automatically tuned with subsampling - see
\insertCite{carriere2018statistical;textual}{rgudhi}.
\subsection{References}{

\insertCited{}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_graph_from_automatic_rips(N = 100L, chainable = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{N}}{An integer value specifying the number of subsampling
iterations. Defaults to \code{100L} but there is no guarantee on how to
choose it.}

\item{\code{chainable}}{A boolean specyfing whether the method should be
chainable in which case it returns invisibly the class itself. Defaults
to \code{TRUE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly if \code{chainable = TRUE} or a numeric value storing the delta threshold used for computing
the Rips complex..
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_graph_from_file"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_graph_from_file}{}}}
\subsection{Method \code{set_graph_from_file()}}{
Creates a graph \eqn{G} from a file containing the edges.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_graph_from_file(graph_file_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{graph_file_name}}{A character string specifying the path to the
input graph file. The graph file contains one edge per line, each edge
being represented by the IDs of its two nodes.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
The file should contain the edge list of the graph by rows, each
row reporting the indices of the two connected vertices as stored in
the input point cloud.
}

\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_graph_from_rips"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_graph_from_rips}{}}}
\subsection{Method \code{set_graph_from_rips()}}{
Creates a graph \eqn{G} from a Rips complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_graph_from_rips(threshold)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{threshold}}{A numeric value specifying the threshold value for the
Rips complex.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \link{CoverComplex} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_mask"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_mask}{}}}
\subsection{Method \code{set_mask()}}{
Sets the mask, which is a threshold integer such that nodes
in the complex that contain a number of data points which is less than
or equal to this threshold are not displayed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_mask(nodemask)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nodemask}}{A numeric value specifying the threshold value for
generating the mask.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_point_cloud_from_range"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_point_cloud_from_range}{}}}
\subsection{Method \code{set_point_cloud_from_range()}}{
Reads and stores the input point cloud from a vector stored
in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_point_cloud_from_range(cloud)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cloud}}{A numeric matrix specifying the coordinates of the point
cloud.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_resolution_with_interval_length"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_resolution_with_interval_length}{}}}
\subsection{Method \code{set_resolution_with_interval_length()}}{
Sets a length of intervals from a value stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_resolution_with_interval_length(resolution)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{resolution}}{A numeric value specifying the length of intervals.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_resolution_with_interval_number"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_resolution_with_interval_number}{}}}
\subsection{Method \code{set_resolution_with_interval_number()}}{
Sets a number of intervals from a value stored in memory.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_resolution_with_interval_number(resolution)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{resolution}}{An integer value specifying the number of intervals.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_subsampling"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_subsampling}{}}}
\subsection{Method \code{set_subsampling()}}{
Sets the constants used to subsample the data set. These
constants are explained in
\insertCite{carriere2018statistical;textual}{rgudhi}.
\subsection{References}{

\insertCited{}
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_subsampling(constant, power)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{constant}}{A numeric value specifying the subsampling constant.}

\item{\code{power}}{A numeric value specifying the subsampling power.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-set_verbose"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-set_verbose}{}}}
\subsection{Method \code{set_verbose()}}{
Specifies whether the program should display information or
not.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$set_verbose(verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{A boolean specifying whether to display information.
Defaults to \code{FALSE}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-subpopulation"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-subpopulation}{}}}
\subsection{Method \code{subpopulation()}}{
Returns the data subset corresponding to a specific node of
the created complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$subpopulation(node_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{node_id}}{An integer value specifying the ID of the desired node.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An integer vector storing the IDs of the data points at the input
node.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-write_info"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-write_info}{}}}
\subsection{Method \code{write_info()}}{
Creates a \code{.txt} file called \verb{_sc.txt} describing the
1-skeleton, which can then be plotted with \emph{e.g.} KeplerMapper.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$write_info(dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.txt} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
