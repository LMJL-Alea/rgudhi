% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complex-cover.R
\name{CoverComplex}
\alias{CoverComplex}
\title{R6 Class for Cover Complex}
\description{
\loadmathjax Nerves and Graph Induced Complexes are cover
complexes, i.e. simplicial complexes that provably contain topological
information about the input data. They can be computed with a cover of the
data, that comes i.e. from the pre-image of a family of intervals covering
the image of a scalar-valued function defined on the data.
}
\details{
\strong{Cover complex data structure.} The data structure is a simplicial
complex, representing a Graph Induced simplicial Complex (GIC) or a Nerve,
and whose simplices are computed with a cover \mjseqn{C} of a point cloud
\mjseqn{P}, which often comes from the pre-images of intervals covering the
image of a function \mjseqn{f} defined on \mjseqn{P}. These intervals are
parameterised by their resolution (either their length or their number) and
their gain (percentage of overlap). To compute a GIC, one also needs a
graph \mjseqn{G} built on top of \mjseqn{P}, whose cliques with vertices
belonging to different elements of \mjseqn{C} correspond to the simplices
of the GIC.
}
\examples{

## ------------------------------------------------
## Method `CoverComplex$new`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc
}

## ------------------------------------------------
## Method `CoverComplex$compute_PD`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_PD()
}

## ------------------------------------------------
## Method `CoverComplex$compute_confidence_level_from_distance`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_confidence_level_from_distance(distance_threshold = 0.1)
}

## ------------------------------------------------
## Method `CoverComplex$compute_distance_from_confidence_level`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distance_from_confidence_level(confidence_level = 0.1)
}

## ------------------------------------------------
## Method `CoverComplex$compute_distribution`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distribution()
}

## ------------------------------------------------
## Method `CoverComplex$compute_p_value`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_p_value()
}

## ------------------------------------------------
## Method `CoverComplex$create_simplex_tree`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  st <- cc$create_simplex_tree()
}

## ------------------------------------------------
## Method `CoverComplex$find_simplices`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$find_simplices()
}

## ------------------------------------------------
## Method `CoverComplex$plot_dot`
## ------------------------------------------------

if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  withr::with_tempdir({
    cc$plot_dot()
  })
}
}
\seealso{
Other filtrations and reconstructions: 
\code{\link{AlphaComplex}},
\code{\link{RipsComplex}},
\code{\link{WitnessComplex}}
}
\author{
Mathieu CarriÃ¨re
}
\concept{filtrations and reconstructions}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CoverComplex-new}{\code{CoverComplex$new()}}
\item \href{#method-CoverComplex-compute_PD}{\code{CoverComplex$compute_PD()}}
\item \href{#method-CoverComplex-compute_confidence_level_from_distance}{\code{CoverComplex$compute_confidence_level_from_distance()}}
\item \href{#method-CoverComplex-compute_distance_from_confidence_level}{\code{CoverComplex$compute_distance_from_confidence_level()}}
\item \href{#method-CoverComplex-compute_distribution}{\code{CoverComplex$compute_distribution()}}
\item \href{#method-CoverComplex-compute_p_value}{\code{CoverComplex$compute_p_value()}}
\item \href{#method-CoverComplex-create_simplex_tree}{\code{CoverComplex$create_simplex_tree()}}
\item \href{#method-CoverComplex-find_simplices}{\code{CoverComplex$find_simplices()}}
\item \href{#method-CoverComplex-plot_dot}{\code{CoverComplex$plot_dot()}}
\item \href{#method-CoverComplex-clone}{\code{CoverComplex$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-new"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-new}{}}}
\subsection{Method \code{new()}}{
\code{CoverComplex} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link{CoverComplex}} object storing the Cover complex.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_PD"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_PD}{}}}
\subsection{Method \code{compute_PD()}}{
Computes the extended persistence diagram of the complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_PD()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_PD()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_confidence_level_from_distance"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_confidence_level_from_distance}{}}}
\subsection{Method \code{compute_confidence_level_from_distance()}}{
Computes the confidence level of a specific Bottleneck
distance threshold.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_confidence_level_from_distance(distance_threshold)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distance_threshold}}{A numeric value specifying the desired
Bottleneck distance threshold.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the confidence level corresponding to the
input threshold on the Bottleneck distance.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_confidence_level_from_distance(distance_threshold = 0.1)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_distance_from_confidence_level"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_distance_from_confidence_level}{}}}
\subsection{Method \code{compute_distance_from_confidence_level()}}{
Computes the bottleneck distance threshold corresponding to
a specific confidence level.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_distance_from_confidence_level(confidence_level)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{confidence_level}}{A numeric value specifying the desired confidence
level.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the threshold on the Bottleneck distance
corresponding to the input confidence level.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distance_from_confidence_level(confidence_level = 0.1)
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_distribution"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_distribution}{}}}
\subsection{Method \code{compute_distribution()}}{
Computes the distribution of distances via bootstrap.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_distribution(N = 100L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{N}}{An integer value specifying the number of iterations. Defaults to \code{100L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  # cc$compute_distribution()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-compute_p_value"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-compute_p_value}{}}}
\subsection{Method \code{compute_p_value()}}{
Computes the p-value, i.e. the opposite of the confidence
level of the largest bottleneck distance preserving the points in the
persistence diagram of the output simplicial complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$compute_p_value()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A numeric value storing the desired p-value.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$compute_p_value()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-create_simplex_tree"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-create_simplex_tree}{}}}
\subsection{Method \code{create_simplex_tree()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$create_simplex_tree()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{\link{SimplexTree}} object storing the simplex
tree created from the Cover complex.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  st <- cc$create_simplex_tree()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-find_simplices"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-find_simplices}{}}}
\subsection{Method \code{find_simplices()}}{
Computes the simplices of the simplicial complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$find_simplices()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  cc$find_simplices()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-plot_dot"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-plot_dot}{}}}
\subsection{Method \code{plot_dot()}}{
Creates a \code{.dot} file called \verb{_sc.dot} for neato (part of
the \strong{graphviz} Python package) once the simplicial complex is
computed to get a visualization of its 1-skeleton in a \code{.pdf} file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$plot_dot(dir = getwd())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{A character string specifying the path to a directory into
which the \code{.dot} file will be saved. Defaults to current working
directory retrieved via \code{getwd()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The updated \code{\link{CoverComplex}} class itself invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{if (reticulate::py_module_available("gudhi")) {
  cc <- CoverComplex$new()
  withr::with_tempdir({
    cc$plot_dot()
  })
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CoverComplex-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CoverComplex-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CoverComplex$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
