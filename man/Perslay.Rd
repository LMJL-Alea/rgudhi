% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/perslay.R
\name{Perslay}
\alias{Perslay}
\title{Perslay: Main Class}
\description{
This is a TensorFlow layer for vectorizing persistence diagrams
in a differentiable way within a neural network. This function implements
the PersLay equation \insertCite{carriere2020perslay}{rgudhi}.
\subsection{References}{

\insertCited{}
}
}
\examples{
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
diagrams <- as_persistence_diagram_sample(list(
  as_persistence_diagram(tibble::tibble(
    birth = c(0, 1, 3, 6),
    death = c(4, 2, 8, 8)
  ))
))
ds <- DiagramScaler$new(
  use = TRUE,
  scalers = list(list(c(0, 1), MinMaxScaler$new()))
)
dgms <- diagrams |>
  ds$fit_transform() |>
  to_ragged_tensor()

phi <- FlatPerslayPhi$new(
  samples = c(1:13, 12:1),
  theta = 0.1
)
weight <- GaussianMixturePerslayWeight$new(
  gaussians = matrix(c(0, 0, 1, 1), nrow = 4, ncol = 1)
)
perm_op <- tf$math$reduce_sum
rho <- tf$identity

perslay <- Perslay$new(
  phi = phi,
  weight = weight,
  perm_op = perm_op,
  rho = rho
)
\dontshow{\}) # examplesIf}
\dontshow{if (reticulate::py_module_available("gudhi")) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
diagrams <- as_persistence_diagram_sample(list(
  as_persistence_diagram(tibble::tibble(
    birth = c(0, 1, 3, 6),
    death = c(4, 2, 8, 8)
  ))
))
ds <- DiagramScaler$new(
  use = TRUE,
  scalers = list(list(c(0, 1), MinMaxScaler$new()))
)
dgms <- diagrams |>
  ds$fit_transform() |>
  to_ragged_tensor()

phi <- FlatPerslayPhi$new(
  samples = c(1:13, 12:1),
  theta = 0.1
)
weight <- GaussianMixturePerslayWeight$new(
  gaussians = matrix(c(0, 0, 1, 1), nrow = 4, ncol = 1)
)
perm_op <- tf$math$reduce_sum
rho <- tf$identity

perslay <- Perslay$new(
  phi = phi,
  weight = weight,
  perm_op = perm_op,
  rho = rho
)

vectors <- perslay$call(dgms)
\dontshow{\}) # examplesIf}
}
\author{
Mathieu CarriÃ¨re, Martin Royer, Gard Spreemann, Wojciech Reise
}
\section{Super classes}{
\code{rgudhi::PythonClass} -> \code{\link[rgudhi:PerslayBaseClass]{rgudhi::PerslayBaseClass}} -> \code{Perslay}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Perslay-new}{\code{Perslay$new()}}
\item \href{#method-Perslay-call}{\code{Perslay$call()}}
\item \href{#method-Perslay-clone}{\code{Perslay$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PythonClass" data-id="get_python_class"><a href='../../rgudhi/html/PythonClass.html#method-PythonClass-get_python_class'><code>rgudhi::PythonClass$get_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PythonClass" data-id="set_python_class"><a href='../../rgudhi/html/PythonClass.html#method-PythonClass-set_python_class'><code>rgudhi::PythonClass$set_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgudhi" data-topic="PerslayBaseClass" data-id="build"><a href='../../rgudhi/html/PerslayBaseClass.html#method-PerslayBaseClass-build'><code>rgudhi::PerslayBaseClass$build()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Perslay-new"></a>}}
\if{latex}{\out{\hypertarget{method-Perslay-new}{}}}
\subsection{Method \code{new()}}{
The \code{\link{Perslay}} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Perslay$new(weight, phi, perm_op, rho, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{weight}}{A weight function for the persistence diagram points. Can
be either an object of class \code{\link{GridPerslayWeight}},
\code{\link{GaussianMixturePerslayWeight}}, \code{\link{PowerPerslayWeight}} or a custom
TensorFlow function that takes persistence diagrams as argument
(represented as an \eqn{n \times \mathrm{None} \times 2} ragged tensor,
where \eqn{n} is the number of diagrams).}

\item{\code{phi}}{A transformation function for the persistence diagram points.
Can be either an object of class \code{\link{GaussianPerslayPhi}},
\code{\link{TentPerslayPhi}}, \code{\link{FlatPerslayPhi}} or a custom TensorFlow class
(that can have trainable parameters) with a method \code{call()} that takes
persistence diagrams as argument (represented as an \eqn{n \times
  \mathrm{None} \times 2} ragged tensor, where \eqn{n} is the number of
diagrams).}

\item{\code{perm_op}}{A permutation invariant function, such as
\code{tf$math$reduce_sum}, \code{tf$math$reduce_mean}, \code{tf$math$reduce_max},
\code{tf$math$reduce_min} or a custom TensorFlow function that takes two
arguments: a tensor and an axis on which to apply the permutation
invariant operation. If \code{perm_op} is the string \code{"topk"} (where \eqn{k}
is a number), this function will be computed as \code{tf$math$top_k} with
integer parameter \code{k}.}

\item{\code{rho}}{A postprocessing function that is applied after the
permutation invariant operation. Can be any TensorFlow layer.}

\item{\code{...}}{A named list providing extra arguments for compatibility with
the TensorFlow API. Not used here.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object of class \code{\link{Perslay}}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Perslay-call"></a>}}
\if{latex}{\out{\hypertarget{method-Perslay-call}{}}}
\subsection{Method \code{call()}}{
Applies Perslay on a ragged tensor containing a list of
persistence diagrams.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Perslay$call(diagrams)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{diagrams}}{A ragged tensor of shape \eqn{n \times \mathrm{None} \times 2} specifying
a sample of \eqn{n} persistence diagrams. The second dimension is ragged
because the number of points in each diagram may vary.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A tensor storing the vectorizations of the persistence diagrams.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Perslay-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Perslay-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Perslay$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
