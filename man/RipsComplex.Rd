% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rips_complex.R
\name{RipsComplex}
\alias{RipsComplex}
\title{R6 Class for Rips Complex}
\description{
The data structure is a one skeleton graph, or Rips graph,
containing edges when the edge length is less or equal to a given
threshold. Edge length is computed from a user given point cloud with a
given distance function, or a distance matrix.
}
\examples{

## ------------------------------------------------
## Method `RipsComplex$new`
## ------------------------------------------------

n <- 10
X_list <- replicate(n, runif(2), simplify = FALSE)
X_matrix <- Reduce(rbind, X_list, init = numeric())
rc_matrix <- RipsComplex$new(points = X_matrix)
rc_list <- RipsComplex$new(points = X_list)

## ------------------------------------------------
## Method `RipsComplex$create_simplex_tree`
## ------------------------------------------------

n <- 10
X <- replicate(n, runif(2), simplify = FALSE)
rc <- RipsComplex$new(points = X)
st <- rc$create_simplex_tree()
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RipsComplex-new}{\code{RipsComplex$new()}}
\item \href{#method-RipsComplex-create_simplex_tree}{\code{RipsComplex$create_simplex_tree()}}
\item \href{#method-RipsComplex-clone}{\code{RipsComplex$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RipsComplex-new"></a>}}
\if{latex}{\out{\hypertarget{method-RipsComplex-new}{}}}
\subsection{Method \code{new()}}{
\code{RipsComplex} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RipsComplex$new(data, max_edge_length = NULL, sparse = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{points}}{Either a \verb{n x d} matrix or a length-\code{n} list of
\code{d}-dimensional vectors or a file with extension \code{.off}.}

\item{\code{precision}}{A string specifying the alpha complex precision. Can be
one of \code{"fast"}, \code{"safe"} or \code{"exact"}. Defaults to \code{"safe"}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{\link{RipsComplex}} object storing the Rips complex.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{n <- 10
X_list <- replicate(n, runif(2), simplify = FALSE)
X_matrix <- Reduce(rbind, X_list, init = numeric())
rc_matrix <- RipsComplex$new(points = X_matrix)
rc_list <- RipsComplex$new(points = X_list)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RipsComplex-create_simplex_tree"></a>}}
\if{latex}{\out{\hypertarget{method-RipsComplex-create_simplex_tree}{}}}
\subsection{Method \code{create_simplex_tree()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RipsComplex$create_simplex_tree(max_dimension)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{max_dimension}}{An integer value specifying the maximal dimension
which the Rips complex will be expanded to.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A \code{\link{SimplexTree}} object storing the computed simplex
tree.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{n <- 10
X <- replicate(n, runif(2), simplify = FALSE)
rc <- RipsComplex$new(points = X)
st <- rc$create_simplex_tree()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RipsComplex-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RipsComplex-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RipsComplex$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
