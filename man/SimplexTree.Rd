% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplex_tree.R
\name{SimplexTree}
\alias{SimplexTree}
\title{R6 Class for Simplex Tree}
\description{
The simplex tree is an efficient and flexible data structure for
representing general (filtered) simplicial complexes. The data structure is
described in Jean-Daniel Boissonnat and Clément Maria. The Simplex Tree: An
Efficient Data Structure for General Simplicial Complexes. Algorithmica,
pages 1–22, 2014.
}
\details{
This class is a filtered, with keys, and non contiguous vertices
version of the simplex tree.
}
\examples{

## ------------------------------------------------
## Method `SimplexTree$new`
## ------------------------------------------------

st <- SimplexTree$new()
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SimplexTree-new}{\code{SimplexTree$new()}}
\item \href{#method-SimplexTree-assign_filtration}{\code{SimplexTree$assign_filtration()}}
\item \href{#method-SimplexTree-betti_numbers}{\code{SimplexTree$betti_numbers()}}
\item \href{#method-SimplexTree-collapse_edges}{\code{SimplexTree$collapse_edges()}}
\item \href{#method-SimplexTree-compute_persistence}{\code{SimplexTree$compute_persistence()}}
\item \href{#method-SimplexTree-clone}{\code{SimplexTree$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimplexTree-new"></a>}}
\if{latex}{\out{\hypertarget{method-SimplexTree-new}{}}}
\subsection{Method \code{new()}}{
\code{SimplexTree} constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimplexTree$new(py_class = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{py_class}}{A Python \code{SimplexTree} class object. Defaults to \code{NULL}
which uses the Python class constructor instead.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{SimplexTree} object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{st <- SimplexTree$new()
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimplexTree-assign_filtration"></a>}}
\if{latex}{\out{\hypertarget{method-SimplexTree-assign_filtration}{}}}
\subsection{Method \code{assign_filtration()}}{
This function assigns a new filtration value to a given
N-simplex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimplexTree$assign_filtration(simplex, filtration)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{simplex}}{A integer vector representing the N-simplex in the form
of a list of vertices.}

\item{\code{filtration}}{A numeric value specifying the new filtration value}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Beware that after this operation, the structure may not be a
valid filtration anymore, a simplex could have a lower filtration value
than one of its faces. Callers are responsible for fixing this (with
more \code{assign_filtration()} or \code{make_filtration_non_decreasing()} for
instance) before calling any function that relies on the filtration
property, like \code{persistence()}.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimplexTree-betti_numbers"></a>}}
\if{latex}{\out{\hypertarget{method-SimplexTree-betti_numbers}{}}}
\subsection{Method \code{betti_numbers()}}{
This function returns the Betti numbers of the simplicial
complex.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimplexTree$betti_numbers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer vector storing the Betti numbers.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimplexTree-collapse_edges"></a>}}
\if{latex}{\out{\hypertarget{method-SimplexTree-collapse_edges}{}}}
\subsection{Method \code{collapse_edges()}}{
Assuming the simplex tree is a 1-skeleton graph, this method
collapse edges (simplices of higher dimension are ignored) and resets
the simplex tree from the remaining edges. A good candidate is to build
a simplex tree on top of a RipsComplex of dimension 1 before collapsing
edges (cf. rips_complex_edge_collapse_example.py). For implementation
details, please refer to \link{6}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimplexTree$collapse_edges(nb_iterations = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{nb_iterations}}{An integer value specifying the number of edge
collapse iterations to perform. Defaults to \code{1L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
It requires \verb{Eigen >= 3.1.0} and an exception is thrown if not
available.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimplexTree-compute_persistence"></a>}}
\if{latex}{\out{\hypertarget{method-SimplexTree-compute_persistence}{}}}
\subsection{Method \code{compute_persistence()}}{
This function computes the persistence of the simplicial
complex, so it can be accessed through \code{persistent_betti_numbers()},
\code{persistence_pairs()}, etc. This function is equivalent to
\code{persistence()} when you do not want the list that \code{persistence()}
returns.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimplexTree$compute_persistence(
  homology_coeff_field = 11,
  min_persistence = 0,
  persistence_dim_max = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{homology_coeff_field}}{An integer value specifying the homology
coefficient field. Must be a prime number. Defaults to \code{11L}. Maximum
is \code{46337L}.}

\item{\code{min_persistence}}{A numeric value specifying the minimum persistence
value to take into account (strictly greater than \code{min_persistence}).
Defaults to \code{0.0}. Set \code{min_persistence = -1.0} to see all values.}

\item{\code{persistence_dim_max}}{A boolean specifying whether the persistent
homology for the maximal dimension in the complex is computed
(\code{persistence_dim_max = TRUE}). If \code{FALSE}, it is ignored. Defaults to
\code{FALSE}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SimplexTree-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SimplexTree-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SimplexTree$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
