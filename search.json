[{"path":"https://lmjl-alea.github.io/rgudhi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 rgudhi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aymeric Stamm. Author, maintainer. GUDHI Editorial Board. Contributor.            https://gudhi.inria.fr/people/","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stamm (2023). rgudhi: Interface GUDHI Library Topological Data Analysis. https://github.com/LMJL-Alea/rgudhi, https://lmjl-alea.github.io/rgudhi/.","code":"@Manual{,   title = {rgudhi: An Interface to the GUDHI Library for Topological Data Analysis},   author = {Aymeric Stamm},   year = {2023},   note = {https://github.com/LMJL-Alea/rgudhi, https://lmjl-alea.github.io/rgudhi/}, }"},{"path":"https://lmjl-alea.github.io/rgudhi/index.html","id":"rgudhi","dir":"","previous_headings":"","what":"An Interface to the GUDHI Library for Topological Data Analysis","title":"An Interface to the GUDHI Library for Topological Data Analysis","text":"goal rgudhi provide R interface Python package gudhi. GUDHI library generic open source C++ library, Python interface, Topological Data Analysis (TDA) Higher Dimensional Geometry Understanding. library offers state---art data structures algorithms construct simplicial complexes compute persistent homology.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An Interface to the GUDHI Library for Topological Data Analysis","text":"can install development version rgudhi GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"LMJL-Alea/rgudhi\")"},{"path":"https://lmjl-alea.github.io/rgudhi/index.html","id":"example-persistence-diagram-using-an-alpha-complex","dir":"","previous_headings":"","what":"Example: Persistence diagram using an Alpha complex","title":"An Interface to the GUDHI Library for Topological Data Analysis","text":"","code":"library(rgudhi) n <- 10 X <- seq_circle(n) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$persistence() #> # A tibble: 13 × 3 #>    dimension  birth    death #>        <int>  <dbl>    <dbl> #>  1         1 0.0955   1.00   #>  2         1 1        1      #>  3         1 1        1      #>  4         0 0      Inf      #>  5         0 0        0.0955 #>  6         0 0        0.0955 #>  7         0 0        0.0955 #>  8         0 0        0.0955 #>  9         0 0        0.0955 #> 10         0 0        0.0955 #> 11         0 0        0.0955 #> 12         0 0        0.0955 #> 13         0 0        0.0955"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"wrapper around Python class sklearn.cluster.AffinityPropagation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"Brendan J. Frey Delbert Dueck (2007). Clustering Passing Messages Data Points, Science.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> AffinityPropagation","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"AffinityPropagation$new() AffinityPropagation$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"AffinityPropagation class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"","code":"AffinityPropagation$new(   damping = 0.5,   max_iter = 200L,   convergence_iter = 15L,   copy = TRUE,   preference = NULL,   affinity = c(\"euclidean\", \"precomputed\"),   verbose = FALSE,   random_state = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"damping numeric value specifying damping factor range \\([0.5, 1.0)\\) extent current value maintained relative incoming values (weighted 1 - damping). avoids numerical oscillations updating values (messages). Defaults 0.5. max_iter integer value specifying maximum number iterations. Defaults 200L. convergence_iter integer value specifying number iterations change number estimated clusters stops convergence. Defaults 15L. copy boolean value specifying whether make copy input data. Defaults TRUE. preference numeric value numeric vector specifying preferences point. Points larger values preferences likely chosen exemplars. number exemplars, .e. clusters, influenced input preferences value. preferences passed arguments, set median input similarities. Defaults NULL. affinity string specifying affinity use. moment \"precomputed\" \"euclidean\" supported. \"euclidean\" uses negative squared euclidean distance points. Defaults \"euclidean\". verbose boolean value specifying whether verbose. Defaults FALSE. random_state integer value specifying seed random generator. Defaults NULL uses current time. Set fixed integer reproducible results across function calls.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"object class AffinityPropagation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"","code":"AffinityPropagation$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AffinityPropagation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the affinity propagation algorithm — AffinityPropagation","text":"","code":"cl <- AffinityPropagation$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"Recursively merges pair clusters sample data; uses linkage distance. wrapper around Python class sklearn.cluster.AgglomerativeClustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> AgglomerativeClustering","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"AgglomerativeClustering$new() AgglomerativeClustering$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"AgglomerativeClustering class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"","code":"AgglomerativeClustering$new(   n_clusters = 2L,   affinity = c(\"euclidean\", \"l1\", \"l2\", \"manhattan\", \"cosine\", \"precomputed\"),   memory = NULL,   connectivity = NULL,   compute_full_tree = \"auto\",   linkage = c(\"ward\", \"complete\", \"average\", \"single\"),   distance_threshold = NULL,   compute_distances = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"n_clusters integer value specifying number clusters find. must NULL distance_threshold NULL. Defaults 2L. affinity string specifying metric used compute linkage. Can \"euclidean\", \"l1\", \"l2\", \"manhattan\", \"cosine\" \"precomputed\". linkage \"ward\", \"euclidean\" accepted. \"precomputed\", distance matrix (instead similarity matrix) needed input $fit() method. Defaults \"euclidean\". memory string specifying path caching directory. Defaults NULL case caching done. connectivity Either numeric matrix object class stats::dist object coercible function rlang::as_function() specifying sample neighboring samples following given structure data. can connectivity matrix function transforms data connectivity matrix. Defaults NULL, .e., hierarchical clustering algorithm unstructured. compute_full_tree Either boolean value \"auto\" string specifying whether prematurely stop construction tree n_clusters. useful decrease computation time number clusters small compared number samples. option useful specifying connectivity matrix. Note also varying number clusters using caching, may advantageous compute full tree. must TRUE distance_threshold NULL. Defaults \"auto\", equivalent TRUE distance_threshold NULL n_clusters inferior maximum 100 0.02 * n_samples. Otherwise, \"auto\" equivalent FALSE. linkage string specifying linkage criterion use. linkage criterion determines distance use sets observation. algorithm merge pairs cluster minimize criterion. ward: minimizes variance clusters merged; average: uses average distances observation two sets; complete: uses maximum distances observations two sets. single: uses minimum distances observations two sets. Defaults \"ward\". distance_threshold numeric value specifying linkage distance threshold clusters merged. NULL, n_clusters must NULL compute_full_tree must TRUE. Defaults NULL. compute_distances boolean value specifying whether compute distances clusters even distance_threshold used. can used make dendrogram visualization, introduces computational memory overhead. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"object class AgglomerativeClustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"","code":"AgglomerativeClustering$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AgglomerativeClustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the agglomerative algorithm — AgglomerativeClustering","text":"","code":"cl <- AgglomerativeClustering$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Alpha Complex — AlphaComplex","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex simplicial complex constructed finite cells Delaunay Triangulation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Alpha Complex — AlphaComplex","text":"filtration value simplex computed square circumradius simplex circumsphere empty (simplex said Gabriel), minimum filtration values codimension 1 cofaces make Gabriel otherwise. simplices filtration value strictly greater given alpha squared value inserted complex.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Alpha Complex — AlphaComplex","text":"Vincent Rouvreau","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Alpha Complex — AlphaComplex","text":"rgudhi::PythonClass -> AlphaComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Alpha Complex — AlphaComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex$new() AlphaComplex$create_simplex_tree() AlphaComplex$get_point() AlphaComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$new(points, precision = \"safe\")"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"points Either n x d matrix length-n list d-dimensional vectors file extension .. precision string specifying alpha complex precision. Can one \"fast\", \"safe\" \"exact\". Defaults \"safe\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex object storing Alpha complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-create-simplex-tree-","dir":"Reference","previous_headings":"","what":"Method create_simplex_tree()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"Generates simplex tree Delaunay triangulation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$create_simplex_tree(   max_alpha_square = Inf,   default_filtration_value = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"max_alpha_square numeric value specifying maximum alpha square threshold simplices shall exceed. Default set Inf, little point using anything else since save time. default_filtration_value boolean specifying whether filtration values computed set NaN (default_filtration_value = TRUE). Defaults FALSE (means compute filtration values).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Alpha Complex — AlphaComplex","text":"SimplexTree object storing computed simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-get-point-","dir":"Reference","previous_headings":"","what":"Method get_point()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"function returns point corresponding given vertex SimplexTree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$get_point(vertex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"vertex integer value specifying desired vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Alpha Complex — AlphaComplex","text":"numeric vector storing point corresponding input vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"Xl <- seq_circle(10) Xm <- Reduce(rbind, Xl, init = numeric()) acm <- AlphaComplex$new(points = Xm) acl <- AlphaComplex$new(points = Xl) acl #> <AlphaComplex> #>   Inherits from: <PythonClass> #>   Public: #>     clone: function (deep = FALSE)  #>     create_simplex_tree: function (max_alpha_square = Inf, default_filtration_value = FALSE)  #>     get_point: function (vertex)  #>     get_python_class: function ()  #>     initialize: function (points, precision = \"safe\")  #>     set_python_class: function (py_class)  #>   Private: #>     m_ComputedSimplexTree: FALSE #>     python_class: gudhi.alpha_complex.AlphaComplex, python.builtin.object X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() ac$get_point(1) #> [1] 0.8090170 0.5877853"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Atol — Atol","title":"Vector Representation: Atol — Atol","text":"Computes measure vectorization (e.g. point clouds, persistence diagrams, etc.) quantisation step according Atol algorithm (Royer et al. 2021) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Vector Representation: Atol — Atol","text":"Royer M, Chazal F, Levrard C, Umeda Y, Ike Y (2021). “ATOL: measure vectorization automatic topologically-oriented learning.” International Conference Artificial Intelligence Statistics, 1000--1008. PMLR.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Atol — Atol","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Atol — Atol","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> Atol","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Atol — Atol","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Atol — Atol","text":"Atol$new() Atol$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Atol — Atol","text":"Atol constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Atol — Atol","text":"","code":"Atol$new(   quantiser,   weighting_method = c(\"cloud\", \"iidproba\"),   contrast = c(\"gaussian\", \"laplacian\", \"indicator\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Atol — Atol","text":"quantiser object class BaseClustering specifying clustering algorithm sklearn.cluster module. fitted $fit() method called. weighting_method string specifying constant generic function weighting measure points. Choices either \"cloud\" \"iidproba\". Defaults \"cloud\", .e. measure seen point cloud. impact weights provided along measures way, .e. $fit() $transform() calls, optional argument sample_weight. contrast string specifying constant function evaluating proximity measure respect centers. Choices either \"gaussian\" \"laplacian\" \"indicator\". Defaults \"gaussian\" (see page 3 Royer et al. (2021) ).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Atol — Atol","text":"object class Atol.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Atol — Atol","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Atol — Atol","text":"","code":"Atol$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Atol — Atol","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Atol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Atol — Atol","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) km <- KMeans$new(n_clusters = 2, random_state = 202006) vr <- Atol$new(quantiser = km) # vr$apply(dgm) # TODO: needs fix in python vr$fit_transform(list(dgm)) #> # A tibble: 2 × 2 #>    Grid Value     #>   <int> <list>    #> 1     1 <dbl [1]> #> 2     2 <dbl [1]>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Clustering Algorithms — BaseClustering","title":"Base Class for Clustering Algorithms — BaseClustering","text":"base class clustering algorithms sklearn.cluster module. child classes intended used within GUDHI classes Atol.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Base Class for Clustering Algorithms — BaseClustering","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> BaseClustering","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base Class for Clustering Algorithms — BaseClustering","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Clustering Algorithms — BaseClustering","text":"BaseClustering$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Clustering Algorithms — BaseClustering","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Clustering Algorithms — BaseClustering","text":"","code":"BaseClustering$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Clustering Algorithms — BaseClustering","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Base Class for Scalers — BaseScaler","title":"Base Class for Scalers — BaseScaler","text":"base class scalers available sklearn.preprocessing module. child classes intended used within GUDHI classes DiagramScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Base Class for Scalers — BaseScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> BaseScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Base Class for Scalers — BaseScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Base Class for Scalers — BaseScaler","text":"BaseScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Base Class for Scalers — BaseScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Base Class for Scalers — BaseScaler","text":"","code":"BaseScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BaseScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Base Class for Scalers — BaseScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Betti Curve — BettiCurve","title":"Vector Representation: Betti Curve — BettiCurve","text":"Computes Betti curves persistence diagrams. several modes operation: given resolution (without sample_range), predefined grid, none previous. predefined grid, class computes Betti numbers grid points. Without predefined grid, resolution set NULL, can fit list persistence diagrams produce grid consists (least) filtration values least one persistence diagrams changes Betti numbers, compute Betti numbers grid points. latter mode, exact Betti curve computed entire real line. Otherwise, resolution given, Betti curve obtained sampling evenly using either given sample_range based persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Betti Curve — BettiCurve","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Betti Curve — BettiCurve","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> BettiCurve","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Betti Curve — BettiCurve","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Betti Curve — BettiCurve","text":"BettiCurve$new() BettiCurve$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Betti Curve — BettiCurve","text":"BettiCurve constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Betti Curve — BettiCurve","text":"","code":"BettiCurve$new(   resolution = 100,   sample_range = rep(NA, 2),   predefined_grid = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Betti Curve — BettiCurve","text":"resolution integer value specifying number sample piecewise constant function. Defaults 100L. sample_range length-2 numeric vector specifying minimum maximum piecewise constant function domain, form \\([x_{\\min}, x_{\\max}]\\). Defaults rep(NA, 2). interval samples drawn evenly. one values NA, can computed persistence diagrams $fit() method. predefined_grid numeric vector specifying predefined grid points compute Betti curves. Must strictly ordered. Infinities ok. set NULL (default), resolution given, grid uniform \\(x_{\\min}\\) \\(x_{\\max}\\) resolution steps, otherwise grid computed captures changes Betti numbers provided data.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Betti Curve — BettiCurve","text":"object class BettiCurve.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Betti Curve — BettiCurve","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Betti Curve — BettiCurve","text":"","code":"BettiCurve$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Betti Curve — BettiCurve","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BettiCurve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Betti Curve — BettiCurve","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) bc <- BettiCurve$new() bc$apply(dgm) #> # A tibble: 100 × 2 #>     Grid     Value #>    <dbl> <dbl[1d]> #>  1     1         0 #>  2     1         0 #>  3     1         0 #>  4     1         0 #>  5     1         0 #>  6     1         0 #>  7     1         0 #>  8     1         0 #>  9     1         0 #> 10     1         0 #> # ℹ 90 more rows bc$fit_transform(list(dgm)) #> # A tibble: 100 × 2 #>     Grid Value     #>    <dbl> <list>    #>  1     1 <dbl [1]> #>  2     1 <dbl [1]> #>  3     1 <dbl [1]> #>  4     1 <dbl [1]> #>  5     1 <dbl [1]> #>  6     1 <dbl [1]> #>  7     1 <dbl [1]> #>  8     1 <dbl [1]> #>  9     1 <dbl [1]> #> 10     1 <dbl [1]> #> # ℹ 90 more rows"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the Birch algorithm — Birch","title":"Performs clustering according to the Birch algorithm — Birch","text":"memory-efficient, online-learning algorithm provided alternative MiniBatchKMeans. constructs tree data structure cluster centroids read leaf. can either final cluster centroids can provided input another clustering algorithm AgglomerativeClustering. wrapper around Python class sklearn.cluster.Birch.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performs clustering according to the Birch algorithm — Birch","text":"Tian Zhang, Raghu Ramakrishnan, Maron Livny (1996). BIRCH: efficient data clustering method large databases, https://www2.cs.sfu.ca/CourseCentral/459/han/papers/zhang96.pdf. Roberto Perdisci J. Birch - Java implementation BIRCH clustering algorithm, https://code.google.com/archive/p/jbirch.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the Birch algorithm — Birch","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> Birch","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the Birch algorithm — Birch","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the Birch algorithm — Birch","text":"Birch$new() Birch$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the Birch algorithm — Birch","text":"Birch class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the Birch algorithm — Birch","text":"","code":"Birch$new(   threshold = 0.5,   branching_factor = 50L,   n_clusters = 3L,   compute_labels = TRUE,   copy = TRUE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the Birch algorithm — Birch","text":"threshold numeric value specifying upper bound radius subcluster obtained merging new sample closest subcluster. Otherwise new subcluster started. Setting value low promotes splitting vice-versa. Defaults 0.5. branching_factor integer value specifying maximum number CF subclusters node. new sample enters number subclusters exceeds branching_factor node splitted two nodes subclusters redistributed . parent subcluster node removed two new subclusters added parents 2 split nodes. n_clusters Either integer value object class BaseClustering specifying number clusters final clustering step, treats subclusters leaves new samples. NULL: final clustering step performed subclusters returned ; object class BaseClustering: model fit treating subclusters new samples initial data mapped label closest subcluster; integer value: model fit AgglomerativeClustering n_clusters set equal integer value. Defaults 3L. compute_labels boolean value specifying whether compute labels fit. Defaults TRUE. copy boolean value specifying whether make copy given data. set FALSE, initial data overwritten. Defaults TRUE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the Birch algorithm — Birch","text":"object class Birch.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the Birch algorithm — Birch","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the Birch algorithm — Birch","text":"","code":"Birch$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the Birch algorithm — Birch","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Birch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the Birch algorithm — Birch","text":"","code":"cl <- Birch$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"class affine transformation \\((x,y) \\mapsto   (x,y-x)\\) applied persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::PreprocessingStep -> BirthPersistenceTransform","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::PreprocessingStep$apply() rgudhi::PreprocessingStep$fit() rgudhi::PreprocessingStep$fit_transform() rgudhi::PreprocessingStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"BirthPersistenceTransform$new() BirthPersistenceTransform$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"BirthPersistenceTransform constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"BirthPersistenceTransform$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"object class BirthPersistenceTransform.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"BirthPersistenceTransform$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocessing: Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"X <- seq_circle(10)   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   bpt <- BirthPersistenceTransform$new()   bpt$apply(dgm) #> # A tibble: 10 × 2 #>    birth lifetime #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf        bpt$fit_transform(list(dgm)) #> [[1]] #> # A tibble: 10 × 2 #>    birth lifetime #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      #>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"wrapper around Python class sklearn.cluster.BisectingKMeans.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> BisectingKMeans","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"BisectingKMeans$new() BisectingKMeans$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"BisectingKMeans class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"","code":"BisectingKMeans$new(   n_clusters = 2L,   init = c(\"k-means++\", \"random\"),   n_init = 10L,   max_iter = 300L,   tol = 1e-04,   verbose = 0L,   random_state = NULL,   copy_x = TRUE,   algorithm = c(\"lloyd\", \"elkan\"),   bisecting_strategy = c(\"biggest_inertia\", \"largest_cluster\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"n_clusters integer value specifying number clusters form well number centroids generate. Defaults 2L. init Either string numeric matrix shape \\(\\mathrm{n_clusters} \\times \\mathrm{n_features}\\) specifying method initialization. string, choices : \"k-means++\": selects initial cluster centroids using sampling based empirical probability distribution points’ contribution overall inertia. technique speeds convergence, theoretically proven \\(\\mathcal{O}(\\log(k))\\)-optimal. See description n_init details; \"random\": chooses n_clusters observations (rows) random data initial centroids. Defaults \"k-means++\". n_init integer value specifying number times k-means algorithm run different centroid seeds. final results best output n_init consecutive runs terms inertia. Defaults 10L. max_iter integer value specifying maximum number iterations k-means algorithm single run. Defaults 300L. tol numeric value specifying relative tolerance regards Frobenius norm difference cluster centers two consecutive iterations declare convergence. Defaults 1e-4. verbose integer value specifying level verbosity. Defaults 0L equivalent verbose. random_state integer value specifying initial seed random number generator. Defaults NULL uses current timestamp. copy_x boolean value specifying whether original data modified. pre-computing distances numerically accurate center data first. copy_x TRUE, original data modified. copy_x FALSE, original data modified, put back function returns, small numerical differences may introduced subtracting adding data mean. Note original data C-contiguous, copy made even copy_x FALSE. original data sparse, CSR format, copy made even copy_x FALSE. Defaults TRUE. algorithm string specifying k-means algorithm use. classical EM-style algorithm \"lloyd\". \"elkan\" variation can efficient datasets well-defined clusters, using triangle inequality. However ’s memory-intensive due allocation extra array shape \\(\\mathrm{n_samples} \\times   \\mathrm{n_clusters}\\). Defaults \"lloyd\". bisecting_strategy string specifying bisection performed. Choices : \"biggest_inertia\": means always check calculated cluster cluster biggest SSE (Sum squared errors) bisect . approach concentrates precision, may costly terms execution time (especially larger amount data points). \"largest_cluster\": means always split cluster largest amount points assigned clusters previously calculated. work faster picking SSE may produce similar results cases. Defaults \"biggest_inertia\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"object class BisectingKMeans.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"","code":"BisectingKMeans$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BisectingKMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the bisecting k-means algorithm — BisectingKMeans","text":"","code":"cl <- BisectingKMeans$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics: Bottleneck Distance — BottleneckDistance","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"Computes bottleneck distance matrix list persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::MetricStep -> BottleneckDistance","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::MetricStep$apply() rgudhi::MetricStep$fit() rgudhi::MetricStep$fit_transform() rgudhi::MetricStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"BottleneckDistance$new() BottleneckDistance$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"BottleneckDistance constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"","code":"BottleneckDistance$new(epsilon = NULL, n_jobs = 1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"epsilon numeric value specifying absolute (additive) error tolerated distance. Defaults NULL, case smallest positive float used. n_jobs integer value specifying number jobs use computation. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"object class BottleneckDistance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"","code":"BottleneckDistance$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BottleneckDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metrics: Bottleneck Distance — BottleneckDistance","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) dis <- BottleneckDistance$new() dis$apply(dgm, dgm) #> [1] 2.20023e-308 dis$fit_transform(list(dgm)) #>              [,1] #> [1,] 2.20023e-308"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Complex Polynomial — ComplexPolynomial","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"Computes complex polynomials list persistence diagrams. persistence diagram points seen roots complex polynomial, whose coefficients returned complex vector. See https://link.springer.com/chapter/10.1007%2F978-3-319-23231-7_27 details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> ComplexPolynomial","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"ComplexPolynomial$new() ComplexPolynomial$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"ComplexPolynomial constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"","code":"ComplexPolynomial$new(polynomial_type = c(\"R\", \"S\", \"T\"), threshold = 10)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"polynomial_type string specifying Type complex polynomial going computed (explained https://link.springer.com/chapter/10.1007%2F978-3-319-23231-7_27). Choices c(\"R\", \"S\", \"T\"). Defaults \"R\". threshold integer value specifying number coefficients. dimension complex vector coefficients, .e. number coefficients corresponding largest degree terms polynomial. -1, threshold computed list persistence diagrams considering one largest number points using dimension corresponding complex vector coefficients threshold. Defaults 10L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"object class ComplexPolynomial.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"","code":"ComplexPolynomial$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ComplexPolynomial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Complex Polynomial — ComplexPolynomial","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) cp <- ComplexPolynomial$new() cp$apply(dgm) #> # A tibble: 10 × 2 #>     Grid Value                       #>    <int> <cpl[1d]>                   #>  1     1  0.000000e+00-8.594235e-01i #>  2     2 -3.282706e-01+0.000000e+00i #>  3     3  0.000000e+00+7.314312e-02i #>  4     4  1.047682e-02+0.000000e+00i #>  5     5  0.000000e+00-1.000447e-03i #>  6     6 -6.368947e-05+0.000000e+00i #>  7     7  0.000000e+00+2.606487e-06i #>  8     8  6.222435e-08+0.000000e+00i #>  9     9  0.000000e+00-6.602107e-10i #> 10    10  0.000000e+00+0.000000e+00i cp$fit_transform(list(dgm)) #> # A tibble: 10 × 2 #>     Grid Value     #>    <int> <list>    #>  1     1 <cpl [1]> #>  2     2 <cpl [1]> #>  3     3 <cpl [1]> #>  4     4 <cpl [1]> #>  5     5 <cpl [1]> #>  6     6 <cpl [1]> #>  7     7 <cpl [1]> #>  8     8 <cpl [1]> #>  9     9 <cpl [1]> #> 10    10 <cpl [1]>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Cubical Complex — CubicalComplex","title":"R6 Class for Cubical Complex — CubicalComplex","text":"CubicalComplex example structured complex useful computational mathematics (specially rigorous numerics) image analysis.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Cubical Complex — CubicalComplex","text":"Pawel Dlotko","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Cubical Complex — CubicalComplex","text":"rgudhi::PythonClass -> CubicalComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Cubical Complex — CubicalComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Cubical Complex — CubicalComplex","text":"CubicalComplex$new() CubicalComplex$betti_numbers() CubicalComplex$cofaces_of_persistence_pairs() CubicalComplex$compute_persistence() CubicalComplex$dimension() CubicalComplex$num_simplices() CubicalComplex$persistence() CubicalComplex$persistence_intervals_in_dimension() CubicalComplex$persistent_betti_numbers() CubicalComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"Constructor either top_dimensional_cells (possibly dimensions) Perseus-style file name.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$new(   perseus_file,   top_dimensional_cells,   dimensions = NULL,   py_class = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"perseus_file character string specifying path Perseus-style file name. top_dimensional_cells Either numeric vector (case, dimensions provided well) multidimensional array specifying cell filtration values. dimensions integer vector specifying number top dimensional cells. Defaults NULL. py_class existing CubicalComplex Python class. Defaults NULL uses Python class constructor instead.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"new CubicalComplex object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method betti_numbers()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns Betti numbers complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$betti_numbers()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cubical Complex — CubicalComplex","text":"$betti_numbers() method always returns [1, 0, 0, ...] infinity filtration cubes removed complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer vector storing Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-cofaces-of-persistence-pairs-","dir":"Reference","previous_headings":"","what":"Method cofaces_of_persistence_pairs()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"persistence interval described pair cells, one creates feature one kills . filtration values 2 cells give coordinates point persistence diagram, bar barcode. Structurally, cubical complexes provided , filtration value cell minimum filtration values maximal cells contain . Connecting persistence diagram coordinates corresponding value input (.e. filtration values top-dimensional cells) useful differentiation purposes.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$cofaces_of_persistence_pairs()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns list pairs top-dimensional cells corresponding persistence birth death cells filtration. cells represented indices input list top-dimensional cells (indices internal data structure includes non-maximal cells). Note two adjacent top-dimensional cells filtration value, arbitrarily return one two calling function one common faces.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"top-dimensional cells/cofaces positive negative cells, together corresponding homological dimension, two lists integer arrays. first list contains regular persistence pairs, grouped dimension. contains numpy arrays shape [number_of_persistence_points, 2]. indices arrays list correspond homological dimensions, integers row array correspond : (index positive top-dimensional cell, index negative top-dimensional cell). second list contains essential features, grouped dimension. contains numpy arrays shape [number_of_persistence_points, 1]. indices arrays list correspond homological dimensions, integers row array correspond : (index positive top-dimensional cell).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-compute-persistence-","dir":"Reference","previous_headings":"","what":"Method compute_persistence()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"method computes persistence complex, can accessed $persistent_betti_numbers(), $persistence_intervals_in_dimension(), etc. equivalent $persistence() method want list $persistence() returns.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$compute_persistence(   homology_coeff_field = 11,   min_persistence = 0 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"updated CubicalComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-dimension-","dir":"Reference","previous_headings":"","what":"Method dimension()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns dimension complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$dimension()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer value giving complex dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-num-simplices-","dir":"Reference","previous_headings":"","what":"Method num_simplices()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns number cubes complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$num_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer value giving number cubes complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-persistence-","dir":"Reference","previous_headings":"","what":"Method persistence()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function computes returns persistence complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$persistence(homology_coeff_field = 11, min_persistence = 0)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"tibble listing persistence feature summarised 3 variables: dimension, birth death.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-persistence-intervals-in-dimension-","dir":"Reference","previous_headings":"","what":"Method persistence_intervals_in_dimension()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns persistence intervals complex specific dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$persistence_intervals_in_dimension(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"dimension integer value specifying desired dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"tibble storing persistence intervals row.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-persistent-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method persistent_betti_numbers()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns persistent Betti numbers complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$persistent_betti_numbers(from_value, to_value)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"from_value numeric value specifying persistence birth limit added numbers (persistent birth <= from_value). to_value numeric value specifying persistence death limit added numbers (persistent death > to_value).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer vector storing persistent Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc #> <CubicalComplex> #>   Inherits from: <PythonClass> #>   Public: #>     betti_numbers: function ()  #>     clone: function (deep = FALSE)  #>     cofaces_of_persistence_pairs: function ()  #>     compute_persistence: function (homology_coeff_field = 11, min_persistence = 0)  #>     dimension: function ()  #>     get_python_class: function ()  #>     initialize: function (perseus_file, top_dimensional_cells, dimensions = NULL,  #>     num_simplices: function ()  #>     persistence: function (homology_coeff_field = 11, min_persistence = 0)  #>     persistence_intervals_in_dimension: function (dimension)  #>     persistent_betti_numbers: function (from_value, to_value)  #>     set_python_class: function (py_class)  #>   Private: #>     m_ComputedPersistence: FALSE #>     python_class: gudhi.cubical_complex.CubicalComplex, python.builtin.object n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$compute_persistence()$betti_numbers() #> [1] 1 0 0 n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$compute_persistence()$cofaces_of_persistence_pairs() #> [[1]] #> list() #>  #> [[2]] #> [[2]][[1]] #> [1] 10 #>  #>  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$dimension() #> [1] 2 n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$num_simplices() #> [1] 105 n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$persistence() #> # A tibble: 1 × 3 #>   dimension birth death #>       <int> <dbl> <dbl> #> 1         0     0   Inf n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$compute_persistence()$persistence_intervals_in_dimension(0) #> # A tibble: 1 × 2 #>   birth death #>   <dbl> <dbl> #> 1     0   Inf n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) cc <- CubicalComplex$new(top_dimensional_cells = X) cc$compute_persistence()$persistent_betti_numbers(0, 1) #> [1] 1 0 0"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the DBSCAN algorithm — DBSCAN","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"DBSCAN - Density-Based Spatial Clustering Applications Noise. Finds core samples high density expands clusters . Good data contains clusters similar density. wrapper around Python class sklearn.cluster.DBSCAN.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"Ester, M., H. P. Kriegel, J. Sander, X. Xu (1996). Density-Based Algorithm Discovering Clusters Large Spatial Databases Noise, : Proceedings 2nd International Conference Knowledge Discovery Data Mining, Portland, , AAAI Press, pp. 226-231. Schubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017). DBSCAN revisited, revisited: (still) use DBSCAN, ACM Transactions Database Systems (TODS), 42(3), p. 19.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> DBSCAN","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"DBSCAN$new() DBSCAN$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"DBSCAN class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"","code":"DBSCAN$new(   eps = 0.5,   min_samples = 5L,   metric = \"euclidean\",   metric_params = NULL,   algorithm = c(\"auto\", \"ball_tree\", \"kd_tree\", \"brute\"),   leaf_size = 30L,   p = 2L,   n_jobs = 1L )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"eps numeric value specifying maximum distance two samples one considered neighborhood . maximum bound distances points within cluster. important DBSCAN parameter choose appropriately data set distance function. Defaults 0.5. min_samples integer value specifying number samples (total weight) neighborhood point considered core point. includes point . Defaults 5L. metric Either string object coercible function via rlang::as_function() specifying metric use calculating distance instances feature array. metric string, must one options allowed sklearn.metrics.pairwise_distances metric parameter. metric \"precomputed\", X assumed distance matrix must square. X may sparse graph, case nonzero elements may considered neighbors DBSCAN. Defaults \"euclidean\". metric_params named list specifying additional parameters passed metric function. Defaults NULL. algorithm string specifying algorithm used sklearn.neighbors.NearestNeighbors module compute pointwise distances find nearest neighbors. Choices \"auto\", \"ball_tree\", \"kd_tree\" \"brute\". Defaults \"auto\". leaf_size integer value specifying leaf size passed sklearn.neighbors.BallTree sklearn.neighbors.KDTree. can affect speed construction query, well memory required store tree. optimal value depends nature problem. Defaults 30L. p integer value specifying power Minkowski metric used calculate distance points. Defaults 2L. n_jobs integer value specifying number parallel jobs run. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"object class DBSCAN.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"","code":"DBSCAN$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DBSCAN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the DBSCAN algorithm — DBSCAN","text":"","code":"cl <- DBSCAN$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing: Diagram Scaler — DiagramScaler","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"class preprocessing persistence diagrams given list scalers, included scikit-learn.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::PreprocessingStep -> DiagramScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::PreprocessingStep$apply() rgudhi::PreprocessingStep$fit() rgudhi::PreprocessingStep$fit_transform() rgudhi::PreprocessingStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"DiagramScaler$new() DiagramScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"DiagramScaler constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"","code":"DiagramScaler$new(use = FALSE, scalers = list())"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"use boolean value specifying whether use class. Defaults FALSE. scalers list scalers fit persistence diagrams. Defaults list() empty list. element list length-2 base::list two elements: first one list coordinates; second one instantiated scaler class. Choices MaxAbsScaler, MinMaxScaler, RobustScaler StandardScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"object class DiagramScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"","code":"DiagramScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocessing: Diagram Scaler — DiagramScaler","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramScaler$new() ds$apply(dgm) #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      ds$fit_transform(list(dgm)) #> [[1]] #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      #>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing: Diagram Selector — DiagramSelector","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"class extracting finite essential points persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::PreprocessingStep -> DiagramSelector","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::PreprocessingStep$apply() rgudhi::PreprocessingStep$fit() rgudhi::PreprocessingStep$fit_transform() rgudhi::PreprocessingStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"DiagramSelector$new() DiagramSelector$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"DiagramSelector constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"","code":"DiagramSelector$new(   use = FALSE,   limit = Inf,   point_type = c(\"finite\", \"essential\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"use boolean value specifying whether use class. Defaults FALSE. limit numeric value specifying second coordinate value criterion essential point. Defaults \\(\\infty\\). point_type string specifying type points going extracted. Choices either “finite” “essential”. Defaults “finite”.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"object class DiagramSelector.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"","code":"DiagramSelector$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocessing: Diagram Selector — DiagramSelector","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new() ds$apply(dgm) #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      ds$fit_transform(list(dgm)) #> [[1]] #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      #>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Entropy — Entropy","title":"Vector Representation: Entropy — Entropy","text":"Computes persistence entropy. Persistence entropy statistic persistence diagrams inspired Shannon entropy. statistic can also used compute feature vector, called entropy summary function. See https://arxiv.org/pdf/1803.08304.pdf details. Note previous implementation contributed Manuel Soriano-Trigueros.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Entropy — Entropy","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Entropy — Entropy","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> Entropy","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Entropy — Entropy","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Entropy — Entropy","text":"Entropy$new() Entropy$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Entropy — Entropy","text":"Entropy constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Entropy — Entropy","text":"","code":"Entropy$new(   mode = c(\"scalar\", \"vector\"),   normalized = TRUE,   resolution = 100,   sample_range = rep(NA_real_, 2) )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Entropy — Entropy","text":"mode string specifying entropy compute: either \"scalar\" computing entropy statistic, \"vector\" computing entropy summary function. Defaults \"scalar\". normalized boolean value specifying whether normalize entropy summary function. Defaults TRUE. Used mode == \"vector\". resolution integer value specifying grid size entropy summary function. Defaults 100L. Used mode == \"vector\". sample_range length-2 numeric vector specifying domain entropy summary function, form \\([x_{\\min}, x_{\\max}]\\). Defaults rep(NA, 2). interval samples drawn evenly. one values NA, can computed persistence diagrams $fit() method. Used mode == \"vector\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Entropy — Entropy","text":"object class Entropy.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Entropy — Entropy","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Entropy — Entropy","text":"","code":"Entropy$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Entropy — Entropy","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Entropy — Entropy","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) ent <- Entropy$new() ent$apply(dgm) #> # A tibble: 1 × 2 #>    Grid     Value #>   <int> <dbl[1d]> #> 1     1      2.20 ent$fit_transform(list(dgm)) #> # A tibble: 1 × 2 #>    Grid Value     #>   <int> <list>    #> 1     1 <dbl [1]>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"Recursively merges pair clusters features. wrapper around Python class sklearn.cluster.FeatureAgglomeration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> FeatureAgglomeration","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"FeatureAgglomeration$new() FeatureAgglomeration$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"FeatureAgglomeration class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"","code":"FeatureAgglomeration$new(   n_clusters = 2L,   affinity = c(\"euclidean\", \"l1\", \"l2\", \"manhattan\", \"cosine\", \"precomputed\"),   memory = NULL,   connectivity = NULL,   compute_full_tree = \"auto\",   linkage = c(\"ward\", \"complete\", \"average\", \"single\"),   pooling_func = rowMeans,   distance_threshold = NULL,   compute_distances = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"n_clusters integer value specifying number clusters find. Defaults 2L. affinity string object coercible function via rlang::as_function() specifying metric used compute linkage. string, choices \"euclidean\", \"l1\", \"l2\", \"manhattan\", \"cosine\" \"precomputed\". linkage \"ward\", \"euclidean\" accepted. Defaults \"euclidean\". memory string specifying path caching directory storing computation tree. Defaults NULL case caching done. connectivity numeric matrix object coercible function via rlang::as_function() specifying connectivity matrix. Defines feature neighboring features following given structure data. can connectivity matrix function transforms data connectivity matrix, derived sklearn.neighbors.kneighbors_graph(). Defaults NULL case hierarchical clustering algorithm unstructured. compute_full_tree string \"auto\" boolean value specifying whether stop early construction tree n_clusters. useful decrease computation time number clusters small compared number features. option useful specifying connectivity matrix. Note also varying number clusters using caching, may advantageous compute full tree. must TRUE distance_threshold NULL. Defaults \"auto\", equivalent TRUE distance_threshold NULL n_clusters inferior max(100, 0.02 * n_samples) FALSE otherwise. linkage string specifying linkage criterion use. linkage criterion determines distance use sets features. algorithm merge pairs cluster minimize criterion: \"ward\": minimizes variance clusters merged; \"complete\": maximum linkage uses maximum distances features two sets; \"average\": uses average distances feature two sets; \"single\": uses minimum distances features two sets. pooling_func object coercible function via rlang::as_function() specifying aggregation method combine values agglomerated features single value. take input array shape \\(M \\times N\\) optional argument axis = 1, reduce array shape \\(M\\). Defaults base::rowMeans. distance_threshold numeric value specifying linkage distance threshold clusters merged. NULL, n_clusters must NULL compute_full_tree must TRUE. Defaults NULL. compute_distances boolean value specifying whether compute distances clusters even distance_threshold used. can used make dendrogram visualization, introduces computational memory overhead. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"object class FeatureAgglomeration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"","code":"FeatureAgglomeration$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/FeatureAgglomeration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the feature agglomeration algorithm — FeatureAgglomeration","text":"","code":"cl <- FeatureAgglomeration$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the k-means algorithm — KMeans","title":"Performs clustering according to the k-means algorithm — KMeans","text":"wrapper around Python class sklearn.cluster.KMeans.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the k-means algorithm — KMeans","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> KMeans","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the k-means algorithm — KMeans","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the k-means algorithm — KMeans","text":"KMeans$new() KMeans$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the k-means algorithm — KMeans","text":"KMeans class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the k-means algorithm — KMeans","text":"","code":"KMeans$new(   n_clusters = 2L,   init = c(\"k-means++\", \"random\"),   n_init = 10L,   max_iter = 300L,   tol = 1e-04,   verbose = 0L,   random_state = NULL,   copy_x = TRUE,   algorithm = c(\"lloyd\", \"elkan\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the k-means algorithm — KMeans","text":"n_clusters integer value specifying number clusters form well number centroids generate. Defaults 2L. init Either string numeric matrix shape \\(\\mathrm{n_{clusters}} \\times \\mathrm{n_{features}}\\) specifying method initialization. string, choices : \"k-means++\": selects initial cluster centroids using sampling based empirical probability distribution points’ contribution overall inertia. technique speeds convergence, theoretically proven \\(\\mathcal{O}(\\log(k))\\)-optimal. See description n_init details; \"random\": chooses n_clusters observations (rows) random data initial centroids. Defaults \"k-means++\". n_init integer value specifying number times k-means algorithm run different centroid seeds. final results best output n_init consecutive runs terms inertia. Defaults 10L. max_iter integer value specifying maximum number iterations k-means algorithm single run. Defaults 300L. tol numeric value specifying relative tolerance regards Frobenius norm difference cluster centers two consecutive iterations declare convergence. Defaults 1e-4. verbose integer value specifying level verbosity. Defaults 0L equivalent verbose. random_state integer value specifying initial seed random number generator. Defaults NULL uses current timestamp. copy_x boolean value specifying whether original data modified. pre-computing distances numerically accurate center data first. copy_x TRUE, original data modified. copy_x FALSE, original data modified, put back function returns, small numerical differences may introduced subtracting adding data mean. Note original data C-contiguous, copy made even copy_x FALSE. original data sparse, CSR format, copy made even copy_x FALSE. Defaults TRUE. algorithm string specifying k-means algorithm use. classical EM-style algorithm \"lloyd\". \"elkan\" variation can efficient datasets well-defined clusters, using triangle inequality. However ’s memory-intensive due allocation extra array shape \\(\\mathrm{n_{samples}} \\times   \\mathrm{n_{clusters}}\\). Defaults \"lloyd\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the k-means algorithm — KMeans","text":"object class KMeans.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the k-means algorithm — KMeans","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the k-means algorithm — KMeans","text":"","code":"KMeans$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the k-means algorithm — KMeans","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the k-means algorithm — KMeans","text":"","code":"cl <- KMeans$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Representation Step — KernelRepresentationStep","title":"Kernel Representation Step — KernelRepresentationStep","text":"Kernel Representation Step Kernel Representation Step","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel Representation Step — KernelRepresentationStep","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Kernel Representation Step — KernelRepresentationStep","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> KernelRepresentationStep","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Kernel Representation Step — KernelRepresentationStep","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Kernel Representation Step — KernelRepresentationStep","text":"KernelRepresentationStep$apply() KernelRepresentationStep$fit() KernelRepresentationStep$transform() KernelRepresentationStep$fit_transform() KernelRepresentationStep$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"method-apply-","dir":"Reference","previous_headings":"","what":"Method apply()","title":"Kernel Representation Step — KernelRepresentationStep","text":"Applies class single persistence diagram outputs result.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation Step — KernelRepresentationStep","text":"","code":"KernelRepresentationStep$apply(diag1, diag2)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation Step — KernelRepresentationStep","text":"diag1 2-column tibble::tibble specifying persistence diagram. diag2 2-column tibble::tibble specifying persistence diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation Step — KernelRepresentationStep","text":"numeric value storing kernel-induced inner product two input diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Kernel Representation Step — KernelRepresentationStep","text":"Fits class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation Step — KernelRepresentationStep","text":"","code":"KernelRepresentationStep$fit(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation Step — KernelRepresentationStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation Step — KernelRepresentationStep","text":"class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"method-transform-","dir":"Reference","previous_headings":"","what":"Method transform()","title":"Kernel Representation Step — KernelRepresentationStep","text":"Applies class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation Step — KernelRepresentationStep","text":"","code":"KernelRepresentationStep$transform(X)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation Step — KernelRepresentationStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation Step — KernelRepresentationStep","text":"numeric matrix shape \\(n_\\mathrm{} \\times   n_\\mathrm{}\\) storing kernel-induced inner product \\(n_\\mathrm{}\\) persistence diagrams passed $transform() method \\(n_\\mathrm{}\\) persistence diagrams passed $fit() method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"method-fit-transform-","dir":"Reference","previous_headings":"","what":"Method fit_transform()","title":"Kernel Representation Step — KernelRepresentationStep","text":"Applies sequentially $fit() $transform() methods sample persistence diagrams efficient way calling directly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation Step — KernelRepresentationStep","text":"","code":"KernelRepresentationStep$fit_transform(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation Step — KernelRepresentationStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation Step — KernelRepresentationStep","text":"numeric matrix shape \\(n \\times n\\) storing kernel-induced inner product \\(n\\) persistence diagrams passed $fit() $transform() methods.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Kernel Representation Step — KernelRepresentationStep","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation Step — KernelRepresentationStep","text":"","code":"KernelRepresentationStep$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/KernelRepresentationStep.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation Step — KernelRepresentationStep","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Landscape — Landscape","title":"Vector Representation: Landscape — Landscape","text":"Computes persistence landscapes list persistence diagrams. persistence landscape collection 1D piecewise-linear functions computed rank function associated persistence diagram. piecewise-linear functions sampled evenly given range corresponding vectors samples concatenated returned. See http://jmlr.org/papers/v16/bubenik15a.html details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Landscape — Landscape","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Landscape — Landscape","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> Landscape","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Landscape — Landscape","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Landscape — Landscape","text":"Landscape$new() Landscape$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Landscape — Landscape","text":"Landscape constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Landscape — Landscape","text":"","code":"Landscape$new(   num_landscapes = 5,   resolution = 100,   sample_range = rep(NA_real_, 2) )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Landscape — Landscape","text":"num_landscapes integer value specifying number piecewise linear functions output. Defaults 5L. resolution integer value specifying grid size landscapes. Defaults 100L. sample_range length-2 numeric vector specifying domain entropy summary function, form \\([x_{\\min}, x_{\\max}]\\). Defaults rep(NA, 2). interval samples drawn evenly. one values NA, can computed persistence diagrams $fit() method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Landscape — Landscape","text":"object class Landscape.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Landscape — Landscape","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Landscape — Landscape","text":"","code":"Landscape$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Landscape — Landscape","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Landscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Landscape — Landscape","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) lds <- Landscape$new() lds$apply(dgm) #> # A tibble: 500 × 3 #>        Grid LandscapeId     Value #>       <dbl>       <int> <dbl[1d]> #>  1 0.000945           1   0.00134 #>  2 0.00189            1   0.00267 #>  3 0.00284            1   0.00401 #>  4 0.00378            1   0.00535 #>  5 0.00473            1   0.00669 #>  6 0.00567            1   0.00802 #>  7 0.00662            1   0.00936 #>  8 0.00756            1   0.0107  #>  9 0.00851            1   0.0120  #> 10 0.00945            1   0.0134  #> # ℹ 490 more rows lds$fit_transform(list(dgm)) #> # A tibble: 500 × 3 #>        Grid LandscapeId Value     #>       <dbl>       <int> <list>    #>  1 0.000945           1 <dbl [1]> #>  2 0.00189            1 <dbl [1]> #>  3 0.00284            1 <dbl [1]> #>  4 0.00378            1 <dbl [1]> #>  5 0.00473            1 <dbl [1]> #>  6 0.00567            1 <dbl [1]> #>  7 0.00662            1 <dbl [1]> #>  8 0.00756            1 <dbl [1]> #>  9 0.00851            1 <dbl [1]> #> 10 0.00945            1 <dbl [1]> #> # ℹ 490 more rows"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales each feature by its maximum absolute value — MaxAbsScaler","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"estimator scales translates feature individually maximal absolute value feature training set 1.0. shift/center data, thus destroy sparsity. scaler can also applied sparse CSR CSC matrices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseScaler -> MaxAbsScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"MaxAbsScaler$new() MaxAbsScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"MaxAbsScaler class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"","code":"MaxAbsScaler$new(copy = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"copy boolean value specifying whether perform -place scaling avoid copy (input already numpy array). Defaults TRUE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"object class MaxAbsScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"","code":"MaxAbsScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MaxAbsScaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales each feature by its maximum absolute value — MaxAbsScaler","text":"","code":"mas <- MaxAbsScaler$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the mean shift algorithm — MeanShift","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"wrapper around Python class sklearn.cluster.MeanShift.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> MeanShift","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"MeanShift$new() MeanShift$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"MeanShift class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"","code":"MeanShift$new(   bandwidth = NULL,   seeds = NULL,   bin_seeding = FALSE,   min_bin_freq = 1L,   cluster_all = TRUE,   n_jobs = 1L,   max_iter = 300L )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"bandwidth numeric value specifying bandwidth used RBF kernel. NULL, bandwidth estimated using sklearn.cluster.estimate_bandwidth(). Defaults NULL. seeds numeric matrix shape \\(n_\\mathrm{samples} \\times   n_\\mathrm{features}\\) specifying seeds used initialize kernels. NULL, seeds calculated sklearn.cluster.get_bin_seeds() bandwidth grid size default values parameters. Defaults NULL. bin_seeding boolean value specifying whether initial kernel locations locations points, rather location discretized version points, points binned onto grid whose coarseness corresponds bandwidth. Setting option TRUE speed algorithm fewer seeds initialized. Defaults FALSE. Ignored seeds NULL. min_bin_freq integer value specifying minimal size bins. speed algorithm, accept bins least min_bin_freq points seeds. Defaults 1L. cluster_all boolean value specifying whether points clustered, even orphans within kernel. Orphans assigned nearest kernel. FALSE, orphans given cluster label -1. Defaults TRUE. n_jobs integer value specifying number jobs use computation. works computing n_init runs parallel. Defaults 1L. max_iter integer value specifying maximum number iterations per seed point clustering operation terminates (seed point) yet converged. Defaults 300L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"object class MeanShift.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"","code":"MeanShift$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MeanShift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the mean shift algorithm — MeanShift","text":"","code":"cl <- MeanShift$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Metric Step — MetricStep","title":"Metric Step — MetricStep","text":"Metric Step Metric Step","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metric Step — MetricStep","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Metric Step — MetricStep","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> MetricStep","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Metric Step — MetricStep","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Metric Step — MetricStep","text":"MetricStep$apply() MetricStep$fit() MetricStep$transform() MetricStep$fit_transform() MetricStep$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"method-apply-","dir":"Reference","previous_headings":"","what":"Method apply()","title":"Metric Step — MetricStep","text":"Applies class single persistence diagram outputs result.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric Step — MetricStep","text":"","code":"MetricStep$apply(diag1, diag2)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric Step — MetricStep","text":"diag1 2-column tibble::tibble specifying persistence diagram. diag2 2-column tibble::tibble specifying persistence diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Metric Step — MetricStep","text":"numeric value storing distance two input diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Metric Step — MetricStep","text":"Fits class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric Step — MetricStep","text":"","code":"MetricStep$fit(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric Step — MetricStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Metric Step — MetricStep","text":"class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"method-transform-","dir":"Reference","previous_headings":"","what":"Method transform()","title":"Metric Step — MetricStep","text":"Applies class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric Step — MetricStep","text":"","code":"MetricStep$transform(X)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric Step — MetricStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Metric Step — MetricStep","text":"numeric matrix shape \\(n_\\mathrm{} \\times   n_\\mathrm{}\\) storing distances \\(n_\\mathrm{}\\) persistence diagrams passed $transform() method \\(n_\\mathrm{}\\) persistence diagrams passed $fit() method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"method-fit-transform-","dir":"Reference","previous_headings":"","what":"Method fit_transform()","title":"Metric Step — MetricStep","text":"Applies sequentially $fit() $transform() methods sample persistence diagrams efficient way calling directly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric Step — MetricStep","text":"","code":"MetricStep$fit_transform(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric Step — MetricStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Metric Step — MetricStep","text":"numeric matrix shape \\(n \\times n\\) storing distance \\(n\\) persistence diagrams passed $fit() $transform() methods.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Metric Step — MetricStep","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Metric Step — MetricStep","text":"","code":"MetricStep$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MetricStep.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metric Step — MetricStep","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms features by scaling each feature to a given range — MinMaxScaler","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"estimator scales translates feature individually given range training set, e.g. zero one. transformation given :   min, max = feature_range. transformation often used alternative zero mean, unit variance scaling.","code":"X_std = (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0)) X_scaled = X_std * (max - min) + min"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseScaler -> MinMaxScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"MinMaxScaler$new() MinMaxScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"MinMaxScaler class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"","code":"MinMaxScaler$new(feature_range = c(0, 1), copy = TRUE, clip = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"feature_range length-2 numeric vector specifying desired range transformed data. Defaults c(0, 1). copy boolean value specifying whether perform -place scaling avoid copy (input already numpy array). Defaults TRUE. clip boolean value specifying whether clip transformed values held-data provided feature_range. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"object class MinMaxScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"","code":"MinMaxScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MinMaxScaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms features by scaling each feature to a given range — MinMaxScaler","text":"","code":"mms <- MinMaxScaler$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"wrapper around Python class sklearn.cluster.MiniBatchKMeans.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> MiniBatchKMeans","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"MiniBatchKMeans$new() MiniBatchKMeans$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"MiniBatchKMeans class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"","code":"MiniBatchKMeans$new(   n_clusters = 2L,   init = c(\"k-means++\", \"random\"),   n_init = 10L,   max_iter = 300L,   tol = 1e-04,   verbose = 0L,   random_state = NULL,   batch_size = 1024L,   compute_labels = TRUE,   max_no_improvement = 10L,   init_size = NULL,   reassignment_ratio = 0.01 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"n_clusters integer value specifying number clusters form well number centroids generate. Defaults 2L. init Either string numeric matrix shape \\(\\mathrm{n_clusters} \\times \\mathrm{n_features}\\) specifying method initialization. string, choices : \"k-means++\": selects initial cluster centroids using sampling based empirical probability distribution points’ contribution overall inertia. technique speeds convergence, theoretically proven \\(\\mathcal{O}(\\log(k))\\)-optimal. See description n_init details; \"random\": chooses n_clusters observations (rows) random data initial centroids. Defaults \"k-means++\". n_init integer value specifying number times k-means algorithm run different centroid seeds. final results best output n_init consecutive runs terms inertia. Defaults 10L. max_iter integer value specifying maximum number iterations k-means algorithm single run. Defaults 300L. tol numeric value specifying relative tolerance regards Frobenius norm difference cluster centers two consecutive iterations declare convergence. Defaults 1e-4. verbose integer value specifying level verbosity. Defaults 0L equivalent verbose. random_state integer value specifying initial seed random number generator. Defaults NULL uses current timestamp. batch_size integer value specifying size mini-batches. faster computations, can set batch_size greater 256 * number cores enable parallelism cores. Defaults 1024L. compute_labels boolean value specifying whether compute label assignment inertia complete dataset minibatch optimization converged fit. Defaults TRUE. max_no_improvement integer value specifying many consecutive mini batches yield improvement smoothed inertia used call algorithm. disable convergence detection based inertia, set max_no_improvement NULL. Defaults 10L. init_size integer value specifying number samples randomly sample speeding initialization (sometimes expense accuracy): algorithm initialized running batch KMeans random subset data. needs larger n_clusters. NULL, heuristic init_size = 3 * batch_size 3 * batch_size < n_clusters, else init_size = 3 * n_clusters. Defaults NULL. reassignment_ratio numeric value specifying fraction maximum number counts center reassigned. higher value means low count centers easily reassigned, means model take longer converge, converge better clustering. However, high value may cause convergence issues, especially small batch size. Defaults 0.01.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"object class MiniBatchKMeans.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"","code":"MiniBatchKMeans$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/MiniBatchKMeans.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the mini-batch k-means algorithm — MiniBatchKMeans","text":"","code":"cl <- MiniBatchKMeans$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the OPTICS algorithm — OPTICS","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"wrapper around Python class sklearn.cluster.OPTICS.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> OPTICS","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"OPTICS$new() OPTICS$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"OPTICS class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"","code":"OPTICS$new(   min_samples = 5L,   max_eps = Inf,   metric = c(\"minkowski\", \"cityblock\", \"cosine\", \"euclidean\", \"l1\", \"l2\", \"manhattan\",     \"braycurtis\", \"canberra\", \"chebyshev\", \"correlation\", \"dice\", \"hamming\", \"jaccard\",     \"kulsinski\", \"mahalanobis\", \"rogerstanimoto\", \"russellrao\", \"seuclidean\",     \"sokalmichener\", \"sokalsneath\", \"sqeuclidean\", \"yule\"),   p = 2L,   metric_params = NULL,   cluster_method = c(\"xi\", \"dbscan\"),   eps = NULL,   xi = 0.05,   predecessor_correction = TRUE,   min_cluster_size = NULL,   algorithm = c(\"auto\", \"ball_tree\", \"kd_tree\", \"brute\"),   leaf_size = 30L,   memory = NULL,   n_jobs = 1L )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"min_samples Either integer value greater 1 numeric value 0 1 specifying number samples neighborhood point considered core point. Also, steep regions can’t min_samples consecutive non-steep points. Expressed absolute number fraction number samples (rounded least 2). Defaults 5L. max_eps numeric value specifying maximum distance two samples one considered neighborhood . Reducing max_eps result shorter run times. Defaults Inf. metric Either string object coercible function via rlang::as_function() specifying metric use distance computation. metric function, called pair instances (rows) resulting value recorded. function take two numeric vectors input return one numeric value indicating distance . works Scipy’s metrics, less efficient passing metric name string. metric \"precomputed\", X assumed distance matrix must square. Valid string values metric : sklearn.metrics: \"cityblock\", \"cosine\", \"euclidean\", \"l1\", \"l2\", \"manhattan\"; scipy.spatial.distance: \"braycurtis\", \"canberra\", \"chebyshev\", \"correlation\", \"dice\", \"hamming\", \"jaccard\", \"kulsinski\", \"mahalanobis\", \"minkowski\", \"rogerstanimoto\", \"russellrao\", \"seuclidean\", \"sokalmichener\", \"sokalsneath\", \"sqeuclidean\", \"yule\". Defaults \"minkowski\". p integer value specifying power Minkowski metric. p = 1, equivalent using Manhattan distance (\\(\\ell_1\\)). p = 2, equivalent using Euclidean distance (\\(\\ell_2\\)). arbitrary \\(p\\), Minkowski distance (\\(\\ell_p\\)) used. Defaults 2L. metric_params named list specifying additional arguments metric function. Defaults NULL. cluster_method string specifying extraction method used extract clusters using calculated reachability ordering. Possible values \"xi\" \"dbscan\". Defaults \"xi\". eps numeric value specifying maximum distance two samples one considered neighborhood . Defaults max_eps. Used cluster_method == \"dbscan\". xi numeric value \\([0,1]\\) specifying minimum steepness reachability plot constitutes cluster boundary. example, upwards point reachability plot defined ratio one point successor 1 - xi. Used cluster_method == \"xi\". Defaults 0.05. predecessor_correction boolean value specifying whether correct clusters according predecessors calculated OPTICS (Schubert Gertz 2018) . parameter minimal effect data sets. Used cluster_method == \"xi\". Defaults TRUE. min_cluster_size Either integer value \\(> 1\\) numeric value \\([0,1]\\) specifying minimum number samples OPTICS cluster, expressed absolute number fraction number samples (rounded least 2). NULL, value min_samples used instead. Used cluster_method == \"xi\". Defaults NULL. algorithm string specifying algorithm used compute nearest neighbors. Choices c(\"auto\", \"ball_tree\", \"kd_tree\", \"brute\"). Defaults \"auto\" attempt decide appropriate algorithm based values passed fit method. Note: fitting sparse input override setting parameter, using algorithm == \"brute\". leaf_size integer value specifying leaf size passed BallTree KDTree. can affect speed construction query, well memory required store tree. optimal value depends nature problem. Defaults 30L memory string specifying path caching directory caching output computation tree. Defaults NULL case caching done. n_jobs integer value specifying number parallel jobs run neighbors search. Defaults 1L. value -1L means using processors.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"object class OPTICS.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"Schubert E, Gertz M (2018). “Improving cluster structure extracted optics plots.” LWDA.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"","code":"OPTICS$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/OPTICS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the OPTICS algorithm — OPTICS","text":"","code":"cl <- OPTICS$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing: Padding — Padding","title":"Preprocessing: Padding — Padding","text":"class padding list persistence diagrams dummy points, persistence diagrams end number points.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocessing: Padding — Padding","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Preprocessing: Padding — Padding","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::PreprocessingStep -> Padding","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocessing: Padding — Padding","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::PreprocessingStep$apply() rgudhi::PreprocessingStep$fit() rgudhi::PreprocessingStep$fit_transform() rgudhi::PreprocessingStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Preprocessing: Padding — Padding","text":"Padding$new() Padding$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Preprocessing: Padding — Padding","text":"Padding constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Padding — Padding","text":"","code":"Padding$new(use = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Padding — Padding","text":"use boolean value specifying whether use class. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing: Padding — Padding","text":"object class Padding.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Preprocessing: Padding — Padding","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Padding — Padding","text":"","code":"Padding$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Padding — Padding","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocessing: Padding — Padding","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) pad <- Padding$new() pad$apply(dgm) #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      pad$fit_transform(list(dgm)) #> [[1]] #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      #>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"PeriodicCubicalComplex class example structured complex useful computational mathematics (specially rigorous numerics) image analysis.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"Pawel Dlotko","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"rgudhi::PythonClass -> rgudhi::CubicalComplex -> PeriodicCubicalComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::CubicalComplex$betti_numbers() rgudhi::CubicalComplex$cofaces_of_persistence_pairs() rgudhi::CubicalComplex$compute_persistence() rgudhi::CubicalComplex$dimension() rgudhi::CubicalComplex$num_simplices() rgudhi::CubicalComplex$persistence() rgudhi::CubicalComplex$persistence_intervals_in_dimension() rgudhi::CubicalComplex$persistent_betti_numbers()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"PeriodicCubicalComplex$new() PeriodicCubicalComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"Constructor either top_dimensional_cells (possibly dimensions) Perseus-style file name.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"PeriodicCubicalComplex$new(   perseus_file,   top_dimensional_cells,   periodic_dimensions,   dimensions = NULL,   py_class = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"perseus_file character string specifying path Perseus-style file name. top_dimensional_cells Either numeric vector (case, dimensions provided well) multidimensional array specifying cell filtration values. periodic_dimensions logical vector specifying periodicity value top dimensional cells. dimensions integer vector specifying number top dimensional cells. Defaults NULL. py_class existing PeriodicCubicalComplex Python class. Defaults NULL uses Python class constructor instead.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"new PeriodicCubicalComplex object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"PeriodicCubicalComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) pcc <- PeriodicCubicalComplex$new(   top_dimensional_cells = X,   periodic_dimensions = c(TRUE, FALSE) ) pcc #> <PeriodicCubicalComplex> #>   Inherits from: <CubicalComplex> #>   Public: #>     betti_numbers: function ()  #>     clone: function (deep = FALSE)  #>     cofaces_of_persistence_pairs: function ()  #>     compute_persistence: function (homology_coeff_field = 11, min_persistence = 0)  #>     dimension: function ()  #>     get_python_class: function ()  #>     initialize: function (perseus_file, top_dimensional_cells, periodic_dimensions,  #>     num_simplices: function ()  #>     persistence: function (homology_coeff_field = 11, min_persistence = 0)  #>     persistence_intervals_in_dimension: function (dimension)  #>     persistent_betti_numbers: function (from_value, to_value)  #>     set_python_class: function (py_class)  #>   Private: #>     m_ComputedPersistence: FALSE #>     python_class: gudhi.periodic_cubical_complex.PeriodicCubicalComplex, python.builtin.object"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"Computes persistence Fisher distance matrix list persistence diagrams. persistence Fisher distance obtained computing original Fisher distance probability distributions associated persistence diagrams given convolving Gaussian kernel. See http://papers.nips.cc/paper/8205-persistence-fisher-kernel--riemannian-manifold-kernel--persistence-diagrams details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::MetricStep -> PersistenceFisherDistance","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::MetricStep$apply() rgudhi::MetricStep$fit() rgudhi::MetricStep$fit_transform() rgudhi::MetricStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"PersistenceFisherDistance$new() PersistenceFisherDistance$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"PersistenceFisherDistance constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"","code":"PersistenceFisherDistance$new(bandwidth = 1, kernel_approx = NULL, n_jobs = 1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"bandwidth numeric value specifying bandwidth Gaussian kernel applied persistence Fisher distance. Defaults 1.0. kernel_approx Python class specifying kernel approximation class used speed computation. Defaults NULL. Common kernel approximations classes can found scikit-learn library (RBFSampler instance). n_jobs integer value specifying number jobs use computation. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"object class PersistenceFisherDistance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"","code":"PersistenceFisherDistance$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metrics: Persistence Fisher Distance — PersistenceFisherDistance","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) dis <- PersistenceFisherDistance$new() dis$apply(dgm, dgm) #> [1] 2.107342e-08 dis$fit_transform(list(dgm)) #>              [,1] #> [1,] 2.107342e-08"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"Computes persistence Fisher kernel matrix list persistence diagrams. persistence Fisher kernel computed exponentiating corresponding persistence Fisher distance Gaussian kernel. See papers.nips.cc/paper/8205-persistence-fisher-kernel--riemannian-manifold-kernel--persistence-diagrams details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::KernelRepresentationStep -> PersistenceFisherKernel","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::KernelRepresentationStep$apply() rgudhi::KernelRepresentationStep$fit() rgudhi::KernelRepresentationStep$fit_transform() rgudhi::KernelRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"PersistenceFisherKernel$new() PersistenceFisherKernel$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"PersistenceFisherKernel constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"","code":"PersistenceFisherKernel$new(   bandwidth_fisher = 1,   bandwidth = 1,   kernel_approx = NULL,   n_jobs = 1 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"bandwidth_fisher numeric value specifying bandwidth Gaussian kernel used turn persistence diagrams probability distributions PersistenceFisherDistance class. Defaults 1.0. bandwidth numeric value specifying bandwidth Gaussian kernel applied persistence Fisher distance. Defaults 1.0. kernel_approx Python class specifying kernel approximation class used speed computation. Defaults NULL. Common kernel approximations classes can found scikit-learn library (RBFSampler instance). n_jobs integer value specifying number jobs use computation. Defaults 1.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"object class PersistenceFisherKernel.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"","code":"PersistenceFisherKernel$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceFisherKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel Representation: Persistence Fisher Kernel — PersistenceFisherKernel","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) pfk <- PersistenceFisherKernel$new() pfk$apply(dgm, dgm) #> [1] 1 pfk$fit_transform(list(dgm)) #>      [,1] #> [1,]    1"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Persistence Image — PersistenceImage","title":"Vector Representation: Persistence Image — PersistenceImage","text":"Computes persistence images list persistence diagrams. persistence image 2D function computed persistence diagram convolving diagram points weighted Gaussian kernel. plane discretized image pixels, flattened returned vector. See http://jmlr.org/papers/v18/16-337.html details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Persistence Image — PersistenceImage","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Persistence Image — PersistenceImage","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> PersistenceImage","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Persistence Image — PersistenceImage","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Persistence Image — PersistenceImage","text":"PersistenceImage$new() PersistenceImage$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Persistence Image — PersistenceImage","text":"PersistenceImage constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Persistence Image — PersistenceImage","text":"","code":"PersistenceImage$new(   bandwidth = 1,   weight = ~1,   resolution = c(20, 20),   im_range = rep(NA_real_, 4) )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Persistence Image — PersistenceImage","text":"bandwidth numeric value specifying bandwidth Gaussian kernel. Defaults 1.0. weight function formula coercible function via rlang::as_function() specifying weight function persistence diagram points. Defaults constant function ~ 1. function must defined 2D points, .e. lists arrays form \\([p_x,p_y]\\). resolution length-1 integer vector specifying size (pixels) persistence image. Defaults rep(20L, 2). im_range length-4 numeric vector specifying two-dimensional domain persistence image, form \\([x_{\\min}, y_{\\min},   x_{\\max}, y_{\\max}]\\). Defaults rep(NA, 4). one values NA, can computed persistence diagrams $fit() method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Persistence Image — PersistenceImage","text":"object class PersistenceImage.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Persistence Image — PersistenceImage","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Persistence Image — PersistenceImage","text":"","code":"PersistenceImage$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Persistence Image — PersistenceImage","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceImage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Persistence Image — PersistenceImage","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) pei <- PersistenceImage$new() pei$apply(dgm) #> # A tibble: 400 × 3 #>          X     Y     Value #>      <dbl> <dbl> <dbl[1d]> #>  1 0           0      1.43 #>  2 0.00503     0      1.43 #>  3 0.0101      0      1.43 #>  4 0.0151      0      1.43 #>  5 0.0201      0      1.43 #>  6 0.0251      0      1.43 #>  7 0.0302      0      1.43 #>  8 0.0352      0      1.43 #>  9 0.0402      0      1.43 #> 10 0.0452      0      1.43 #> # ℹ 390 more rows pei$fit_transform(list(dgm)) #> # A tibble: 400 × 3 #>          X     Y Value     #>      <dbl> <dbl> <list>    #>  1 0           0 <dbl [1]> #>  2 0.00503     0 <dbl [1]> #>  3 0.0101      0 <dbl [1]> #>  4 0.0151      0 <dbl [1]> #>  5 0.0201      0 <dbl [1]> #>  6 0.0251      0 <dbl [1]> #>  7 0.0302      0 <dbl [1]> #>  8 0.0352      0 <dbl [1]> #>  9 0.0402      0 <dbl [1]> #> 10 0.0452      0 <dbl [1]> #> # ℹ 390 more rows"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"Computes persistence scale space kernel matrix list persistence diagrams. persistence scale space kernel computed adding symmetric diagonal point persistence diagram, negative weight, convolving points Gaussian kernel. See https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Reininghaus_A_Stable_Multi-Scale_2015_CVPR_paper.pdf details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::KernelRepresentationStep -> PersistenceScaleSpaceKernel","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::KernelRepresentationStep$apply() rgudhi::KernelRepresentationStep$fit() rgudhi::KernelRepresentationStep$fit_transform() rgudhi::KernelRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"PersistenceScaleSpaceKernel$new() PersistenceScaleSpaceKernel$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"PersistenceScaleSpaceKernel constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"","code":"PersistenceScaleSpaceKernel$new(   bandwidth = 1,   kernel_approx = NULL,   n_jobs = 1 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"bandwidth numeric value specifying bandwidth Gaussian kernel persistence diagrams convolved. Defaults 1.0. kernel_approx Python class specifying kernel approximation class used speed computation. Defaults NULL. Common kernel approximations classes can found scikit-learn library (RBFSampler instance). n_jobs integer value specifying number jobs use computation. Defaults 1.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"object class PersistenceScaleSpaceKernel.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"","code":"PersistenceScaleSpaceKernel$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceScaleSpaceKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel Representation: Persistence Scale-Space Kernel — PersistenceScaleSpaceKernel","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) pssk <- PersistenceScaleSpaceKernel$new() pssk$apply(dgm, dgm) #> [1] 0.2933229 pssk$fit_transform(list(dgm)) #>           [,1] #> [1,] 0.2933229"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"Computes sliced Wasserstein kernel matrix list persistence diagrams. sliced Wasserstein kernel computed exponentiating corresponding sliced Wasserstein distance Gaussian kernel. See http://proceedings.mlr.press/v70/carriere17a.html details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::KernelRepresentationStep -> PersistenceSlicedWassersteinKernel","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::KernelRepresentationStep$apply() rgudhi::KernelRepresentationStep$fit() rgudhi::KernelRepresentationStep$fit_transform() rgudhi::KernelRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"PersistenceSlicedWassersteinKernel$new() PersistenceSlicedWassersteinKernel$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"PersistenceSlicedWassersteinKernel constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"","code":"PersistenceSlicedWassersteinKernel$new(   num_directions = 10,   bandwidth = 1,   n_jobs = 1 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"num_directions integer value specifying number lines evenly sampled \\([-\\pi/2,\\pi/2]\\) order approximate speed kernel computation. Defaults 10L. bandwidth numeric value specifying bandwidth Gaussian kernel persistence diagrams convolved. Defaults 1.0. n_jobs integer value specifying number jobs use computation. Defaults 1.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"object class PersistenceSlicedWassersteinKernel.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"","code":"PersistenceSlicedWassersteinKernel$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceSlicedWassersteinKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel Representation: Persistence Sliced Wasserstein Kernel — PersistenceSlicedWassersteinKernel","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) pswk <- PersistenceSlicedWassersteinKernel$new() pswk$apply(dgm, dgm) #> [1] 1 pswk$fit_transform(list(dgm)) #>      [,1] #> [1,]    1"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"Computes persistence weighted Gaussian kernel matrix list persistence diagrams. persistence weighted Gaussian kernel computed convolving persistence diagram points weighted Gaussian kernels. See http://proceedings.mlr.press/v48/kusano16.html details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::KernelRepresentationStep -> PersistenceWeightedGaussianKernel","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::KernelRepresentationStep$apply() rgudhi::KernelRepresentationStep$fit() rgudhi::KernelRepresentationStep$fit_transform() rgudhi::KernelRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"PersistenceWeightedGaussianKernel$new() PersistenceWeightedGaussianKernel$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"PersistenceWeightedGaussianKernel constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"","code":"PersistenceWeightedGaussianKernel$new(   bandwidth = 1,   weight = ~1,   kernel_approx = NULL,   n_jobs = 1 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"bandwidth numeric value specifying bandwidth Gaussian kernel persistence diagrams convolved. Defaults 1.0. weight function formula coercible function via rlang::as_function() specifying weight function persistence diagram points. Defaults constant function ~ 1. function must defined 2D points, .e. lists arrays form \\([p_x,p_y]\\). kernel_approx Python class specifying kernel approximation class used speed computation. Defaults NULL. Common kernel approximations classes can found scikit-learn library (RBFSampler instance). n_jobs integer value specifying number jobs use computation. Defaults 1.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"object class PersistenceWeightedGaussianKernel.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"","code":"PersistenceWeightedGaussianKernel$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PersistenceWeightedGaussianKernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel Representation: Persistence Weighted Gaussian Kernel — PersistenceWeightedGaussianKernel","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) pwgk <- PersistenceWeightedGaussianKernel$new() pwgk$apply(dgm, dgm) #> [1] 32.31432 pwgk$fit_transform(list(dgm)) #>          [,1] #> [1,] 32.31432"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing Step — PreprocessingStep","title":"Preprocessing Step — PreprocessingStep","text":"Preprocessing Step Preprocessing Step","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocessing Step — PreprocessingStep","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Preprocessing Step — PreprocessingStep","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> PreprocessingStep","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocessing Step — PreprocessingStep","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Preprocessing Step — PreprocessingStep","text":"PreprocessingStep$apply() PreprocessingStep$fit() PreprocessingStep$transform() PreprocessingStep$fit_transform() PreprocessingStep$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"method-apply-","dir":"Reference","previous_headings":"","what":"Method apply()","title":"Preprocessing Step — PreprocessingStep","text":"Applies class single persistence diagram outputs result.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing Step — PreprocessingStep","text":"","code":"PreprocessingStep$apply(diag)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing Step — PreprocessingStep","text":"diag 2-column tibble::tibble specifying persistence diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing Step — PreprocessingStep","text":"2-column tibble::tibble storing preprocessed persistence diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Preprocessing Step — PreprocessingStep","text":"Fits class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing Step — PreprocessingStep","text":"","code":"PreprocessingStep$fit(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing Step — PreprocessingStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing Step — PreprocessingStep","text":"class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"method-transform-","dir":"Reference","previous_headings":"","what":"Method transform()","title":"Preprocessing Step — PreprocessingStep","text":"Applies class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing Step — PreprocessingStep","text":"","code":"PreprocessingStep$transform(X)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing Step — PreprocessingStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing Step — PreprocessingStep","text":"list 2-column tibble::tibbles storing preprocessed persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"method-fit-transform-","dir":"Reference","previous_headings":"","what":"Method fit_transform()","title":"Preprocessing Step — PreprocessingStep","text":"Applies sequentially $fit() $transform() methods sample persistence diagrams efficient way calling directly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing Step — PreprocessingStep","text":"","code":"PreprocessingStep$fit_transform(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing Step — PreprocessingStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing Step — PreprocessingStep","text":"list 2-column tibble::tibbles storing preprocessed persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Preprocessing Step — PreprocessingStep","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing Step — PreprocessingStep","text":"","code":"PreprocessingStep$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PreprocessingStep.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing Step — PreprocessingStep","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessing: Prominent Points — ProminentPoints","title":"Preprocessing: Prominent Points — ProminentPoints","text":"class removing points close far diagonal persistence diagrams. persistence diagrams 2-column tibble::tibbles (.e. persistence diagrams ordinary features), points ordered thresholded distance--diagonal. persistence diagrams 1-column tibble::tibbles (.e. persistence diagrams essential features), points ordered thresholded first coordinate.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preprocessing: Prominent Points — ProminentPoints","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Preprocessing: Prominent Points — ProminentPoints","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::PreprocessingStep -> ProminentPoints","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Preprocessing: Prominent Points — ProminentPoints","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::PreprocessingStep$apply() rgudhi::PreprocessingStep$fit() rgudhi::PreprocessingStep$fit_transform() rgudhi::PreprocessingStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Preprocessing: Prominent Points — ProminentPoints","text":"ProminentPoints$new() ProminentPoints$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Preprocessing: Prominent Points — ProminentPoints","text":"ProminentPoints constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Prominent Points — ProminentPoints","text":"","code":"ProminentPoints$new(   use = FALSE,   num_pts = 10,   threshold = -1,   location = c(\"upper\", \"lower\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Prominent Points — ProminentPoints","text":"use boolean value specifying whether use class. Defaults FALSE. num_pts integer value specifying cardinality threshold. Defaults 10L. location == \"upper\", keeps top num_pts points farthest away diagonal. location == \"lower\", keeps top num_pts points closest diagonal. threshold numeric value specifying distance--diagonal threshold. Defaults -1.0. location == \"upper\", keeps points least distance threshold diagonal. location == \"lower\", keeps points distance threshold diagonal. location string specifying whether keep points far away (\"upper\") close (\"lower\") diagonal. Defaults \"upper\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Preprocessing: Prominent Points — ProminentPoints","text":"object class ProminentPoints.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Preprocessing: Prominent Points — ProminentPoints","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessing: Prominent Points — ProminentPoints","text":"","code":"ProminentPoints$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessing: Prominent Points — ProminentPoints","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocessing: Prominent Points — ProminentPoints","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) pp <- ProminentPoints$new() pp$apply(dgm) #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      pp$fit_transform(list(dgm)) #> [[1]] #> # A tibble: 10 × 2 #>    birth    death #>    <dbl>    <dbl> #>  1     0   0.0955 #>  2     0   0.0955 #>  3     0   0.0955 #>  4     0   0.0955 #>  5     0   0.0955 #>  6     0   0.0955 #>  7     0   0.0955 #>  8     0   0.0955 #>  9     0   0.0955 #> 10     0 Inf      #>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Rips Complex — RipsComplex","title":"R6 Class for Rips Complex — RipsComplex","text":"data structure one skeleton graph, Rips graph, containing edges edge length less equal given threshold. Edge length computed user given point cloud given distance function, distance matrix.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Rips Complex — RipsComplex","text":"Clément Maria, Pawel Dlotko, Vincent Rouvreau, Marc Glisse, Yuichi Ike","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Rips Complex — RipsComplex","text":"rgudhi::PythonClass -> RipsComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Rips Complex — RipsComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Rips Complex — RipsComplex","text":"RipsComplex$new() RipsComplex$create_simplex_tree() RipsComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Rips Complex — RipsComplex","text":"RipsComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"RipsComplex$new(data, max_edge_length = NULL, sparse = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Rips Complex — RipsComplex","text":"data Either n x d matrix length-n list d-dimensional vectors distance matrix stored dist object. max_edge_length numeric value specifying Rips value. sparse numeric value specifying approximation parameter epsilon buidling sparse Rips complex. Defaults NULL builds exact Rips complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Rips Complex — RipsComplex","text":"RipsComplex object storing Rips complex.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"RipsComplex$create_simplex_tree(max_dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Rips Complex — RipsComplex","text":"max_dimension integer value specifying maximal dimension Rips complex expanded .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Rips Complex — RipsComplex","text":"SimplexTree object storing computed simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Rips Complex — RipsComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"RipsComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Rips Complex — RipsComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"X <- seq_circle(10) rc1 <- RipsComplex$new(data = X, max_edge_length = 1) Xm <- Reduce(rbind, X, init = numeric()) rc2 <- RipsComplex$new(data = Xm, max_edge_length = 1) D <- dist(Xm) rc3 <- RipsComplex$new(data = D) X <- seq_circle(10) rc <- RipsComplex$new(data = X, max_edge_length = 1) st <- rc$create_simplex_tree(1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales features using statistics that are robust to outliers — RobustScaler","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"scaler removes median scales data according quantile range (defaults IQR: Interquartile Range). IQR range 1st quartile (25th quantile) 3rd quartile (75th quantile). Centering scaling happen independently feature computing relevant statistics samples training set. Median interquartile range stored used later data using $transform() method. Standardization dataset common requirement many machine learning estimators. Typically done removing mean scaling unit variance. However, outliers can often influence sample mean / variance negative way. cases, median interquartile range often give better results.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseScaler -> RobustScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"RobustScaler$new() RobustScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"RobustScaler class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"","code":"RobustScaler$new(   with_centering = TRUE,   with_scaling = TRUE,   quantile_range = c(25, 75),   copy = TRUE,   unit_variance = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"with_centering boolean value specifying whether center data scaling. cause transform raise exception attempted sparse matrices, centering entails building dense matrix common use cases likely large fit memory. Defaults TRUE. with_scaling boolean value specifying whether scale data interquartile range. Defaults TRUE. quantile_range length-2 numeric vector specifying quantile range used calculate scale_. Defaults c(25.0, 75.0). copy boolean value specifying whether perform -place scaling avoid copy (input already numpy array). Defaults TRUE. unit_variance boolean value specifying whether scale data normally distributed features variance 1. general, difference x-values \\(q_{\\max}\\) \\(q_{\\min}\\) standard normal distribution greater 1, data set scaled . less 1, data set scaled . Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"object class RobustScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"","code":"RobustScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RobustScaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales features using statistics that are robust to outliers — RobustScaler","text":"","code":"rs <- RobustScaler$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Silhouette — Silhouette","title":"Vector Representation: Silhouette — Silhouette","text":"Computes persistence silhouettes list persistence diagrams. persistence silhouette computed taking weighted average collection 1D piecewise-linear functions given persistence landscapes, evenly sampling average given range. Finally, corresponding vector samples returned. See https://arxiv.org/abs/1312.0308 details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Silhouette — Silhouette","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Silhouette — Silhouette","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> Silhouette","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Silhouette — Silhouette","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Silhouette — Silhouette","text":"Silhouette$new() Silhouette$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Silhouette — Silhouette","text":"Silhouette constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Silhouette — Silhouette","text":"","code":"Silhouette$new(weight = ~1, resolution = 100, sample_range = rep(NA_real_, 2))"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Silhouette — Silhouette","text":"weight function formula coercible function via rlang::as_function() specifying weight function persistence diagram points. Defaults constant function ~ 1. function must defined 2D points, .e. lists arrays form \\([p_x,p_y]\\). resolution length-1 integer vector specifying size (pixels) persistence image. Defaults rep(20L, 2). sample_range length-2 numeric vector specifying domain entropy summary function, form \\([x_{\\min}, x_{\\max}]\\). Defaults rep(NA, 2). interval samples drawn evenly. one values NA, can computed persistence diagrams $fit() method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Silhouette — Silhouette","text":"object class Silhouette.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Silhouette — Silhouette","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Silhouette — Silhouette","text":"","code":"Silhouette$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Silhouette — Silhouette","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Silhouette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Silhouette — Silhouette","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) sil <- Silhouette$new() sil$apply(dgm) # TO DO: fix gd because it does not set sample_range automatically #> # A tibble: 100 × 2 #>        Grid     Value #>       <dbl> <dbl[1d]> #>  1 0.000945   0.00134 #>  2 0.00189    0.00267 #>  3 0.00284    0.00401 #>  4 0.00378    0.00535 #>  5 0.00473    0.00669 #>  6 0.00567    0.00802 #>  7 0.00662    0.00936 #>  8 0.00756    0.0107  #>  9 0.00851    0.0120  #> 10 0.00945    0.0134  #> # ℹ 90 more rows sil$fit_transform(list(dgm)) #> # A tibble: 100 × 2 #>        Grid Value     #>       <dbl> <list>    #>  1 0.000945 <dbl [1]> #>  2 0.00189  <dbl [1]> #>  3 0.00284  <dbl [1]> #>  4 0.00378  <dbl [1]> #>  5 0.00473  <dbl [1]> #>  6 0.00567  <dbl [1]> #>  7 0.00662  <dbl [1]> #>  8 0.00756  <dbl [1]> #>  9 0.00851  <dbl [1]> #> 10 0.00945  <dbl [1]> #> # ℹ 90 more rows"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Simplex Tree — SimplexTree","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex tree efficient flexible data structure representing general (filtered) simplicial complexes. data structure described Boissonnat Maria (2014) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"class filtered, keys, non contiguous vertices version simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Simplex Tree — SimplexTree","text":"Boissonnat J, Maria C (2014). “simplex tree: efficient data structure general simplicial complexes.” Algorithmica, 70(3), 406--427.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Simplex Tree — SimplexTree","text":"Clément Maria","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Simplex Tree — SimplexTree","text":"rgudhi::PythonClass -> SimplexTree","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Simplex Tree — SimplexTree","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Simplex Tree — SimplexTree","text":"SimplexTree$new() SimplexTree$set_is_flag() SimplexTree$assign_filtration() SimplexTree$betti_numbers() SimplexTree$collapse_edges() SimplexTree$compute_persistence() SimplexTree$dimension() SimplexTree$expansion() SimplexTree$extend_filtration() SimplexTree$extended_persistence() SimplexTree$filtration() SimplexTree$find() SimplexTree$flag_persistence_generators() SimplexTree$get_boundaries() SimplexTree$get_cofaces() SimplexTree$get_filtration() SimplexTree$get_simplices() SimplexTree$get_skeleton() SimplexTree$get_star() SimplexTree$insert() SimplexTree$lower_star_persistence_generators() SimplexTree$make_filtration_non_decreasing() SimplexTree$num_simplices() SimplexTree$num_vertices() SimplexTree$persistence() SimplexTree$persistence_intervals_in_dimension() SimplexTree$persistence_pairs() SimplexTree$persistent_betti_numbers() SimplexTree$prune_above_filtration() SimplexTree$remove_maximal_simplex() SimplexTree$reset_filtration() SimplexTree$set_dimension() SimplexTree$upper_bound_dimension() SimplexTree$write_persistence_diagram() SimplexTree$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Simplex Tree — SimplexTree","text":"SimplexTree class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$new(py_class = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"py_class Python SimplexTree class object. Defaults NULL uses Python class constructor instead.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"new SimplexTree object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-set-is-flag-","dir":"Reference","previous_headings":"","what":"Method set_is_flag()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function sets internal field m_IsFlag records whether simplex tree flag complex (.e. generated Rips complex).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$set_is_flag(val)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"val boolean specifying whether simplex tree flag complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"SimplexTree class initializes m_IsFlag field FALSE default method specifically allows overwrite default value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-assign-filtration-","dir":"Reference","previous_headings":"","what":"Method assign_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function assigns new filtration value given N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$assign_filtration(simplex, filtration)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices. filtration numeric value specifying new filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"Beware operation, structure may valid filtration anymore, simplex lower filtration value one faces. Callers responsible fixing (calls $assign_filtration() method call $make_filtration_non_decreasing() method instance) calling function relies filtration property, persistence().","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method betti_numbers()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns Betti numbers simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$betti_numbers()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer vector storing Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-collapse-edges-","dir":"Reference","previous_headings":"","what":"Method collapse_edges()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Assuming simplex tree 1-skeleton graph, method collapse edges (simplices higher dimension ignored) resets simplex tree remaining edges. good candidate build simplex tree top RipsComplex dimension 1 collapsing edges done Python example. implementation details, please refer Boissonnat Pritam (2020) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$collapse_edges(nb_iterations = 1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"nb_iterations integer value specifying number edge collapse iterations perform. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"requires Eigen >= 3.1.0 exception thrown available.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"references-1","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Simplex Tree — SimplexTree","text":"Boissonnat J, Pritam S (2020). “Edge collapse persistence flag complexes.” SoCG 2020-36th International Symposium Computational Geometry.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-compute-persistence-","dir":"Reference","previous_headings":"","what":"Method compute_persistence()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function computes persistence simplicial complex, can accessed $persistent_betti_numbers(), $persistence_pairs(), etc. function equivalent $persistence() want list $persistence() returns.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$compute_persistence(   homology_coeff_field = 11,   min_persistence = 0,   persistence_dim_max = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values. persistence_dim_max boolean specifying whether persistent homology maximal dimension complex computed (persistence_dim_max = TRUE). FALSE, ignored. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-dimension-","dir":"Reference","previous_headings":"","what":"Method dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns dimension simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$dimension()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"function constant time can recompute dimension required (can triggered $remove_maximal_simplex() $prune_above_filtration() methods instance).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing simplicial complex dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-expansion-","dir":"Reference","previous_headings":"","what":"Method expansion()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Expands simplex tree containing one skeleton dimension max_dim.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$expansion(max_dim)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"max_dim integer value specifying maximal dimension expented simplex tree .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"expanded simplicial complex dimension d attached graph G maximal simplicial complex dimension d admitting graph G 1-skeleton. filtration value assigned simplex maximal filtration value one edges. simplex tree must contain simplex dimension bigger 1 calling method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-extend-filtration-","dir":"Reference","previous_headings":"","what":"Method extend_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Extend filtration computing extended persistence. function uses filtration values 0-dimensional simplices, computes extended persistence diagram induced lower-star filtration computed values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$extend_filtration()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"Note calling function, filtration values actually modified within simplex tree. method $extended_persistence() retrieves original values. Note code creates extra vertex internally, make sure simplex tree contain vertex largest possible value (.e., 4294967295). notebook explains compute extension persistence called extended persistence.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-extended-persistence-","dir":"Reference","previous_headings":"","what":"Method extended_persistence()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function retrieves good values extended persistence, separate diagrams Ordinary, Relative, Extended+ Extended- subdiagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$extended_persistence(   homology_coeff_field = 11,   min_persistence = 0 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"coordinates persistence diagram points might little different original filtration values due internal transformation (scaling [-2,-1]) performed values computation extended persistence. notebook explains compute extension persistence called extended persistence.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list four persistence diagrams format described $persistence(). first one Ordinary, second one Relative, third one Extended+ fourth one Extended-. See article /Section 2.2 article description subtypes.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-filtration-","dir":"Reference","previous_headings":"","what":"Method filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns filtration value given N-simplex simplicial complex, +infinity complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$filtration(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"numeric value storing filtration value input N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-find-","dir":"Reference","previous_headings":"","what":"Method find()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns N-simplex found simplicial complex .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$find(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"boolean storing whether input N-simplex found simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-flag-persistence-generators-","dir":"Reference","previous_headings":"","what":"Method flag_persistence_generators()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Assuming flag complex, function returns persistence pairs, simplex replaced vertices edges gave filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$flag_persistence_generators()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list following components: n x 3 integer matrix containing regular persistence pairs dimension 0, one vertex birth two death; list m x 4 integer matrices containing regular persistence pairs, grouped dimension, 2 vertices per extremity; l x ? integer matrix containing connected components, one vertex ; list k x 2 integer matrices containing essential features, grouped dimension, 2 vertices birth.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-boundaries-","dir":"Reference","previous_headings":"","what":"Method get_boundaries()","title":"R6 Class for Simplex Tree — SimplexTree","text":"given N-simplex, function returns list simplices dimension N-1 corresponding boundaries N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_boundaries(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) boundary input N-simplex column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-cofaces-","dir":"Reference","previous_headings":"","what":"Method get_cofaces()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns cofaces given N-simplex given codimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_cofaces(simplex, codimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices. codimension integer value specifying codimension. codimension = 0, cofaces returned (equivalent $get_star() function).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) cofaces input N-simplex column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-filtration-","dir":"Reference","previous_headings":"","what":"Method get_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function retrieves list simplices given filtration values sorted increasing filtration values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_filtration()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing simplicies column simplex along corresponding filtration value column filtration, increasing order filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-simplices-","dir":"Reference","previous_headings":"","what":"Method get_simplices()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function retrieves list simplices given filtration values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing simplicies column simplex along corresponding filtration value column filtration, increasing order filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-skeleton-","dir":"Reference","previous_headings":"","what":"Method get_skeleton()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns generator (simplices ) skeleton maximum given dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_skeleton(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension integer value specifying skeleton dimension value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) skeleton maximum dimension column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-star-","dir":"Reference","previous_headings":"","what":"Method get_star()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns star given N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_star(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) star simplex column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-insert-","dir":"Reference","previous_headings":"","what":"Method insert()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function inserts given N-simplex subfaces given filtration value. simplices already present higher filtration value, filtration value lowered.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$insert(simplex, filtration = 0, chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices. filtration numeric value specifying filtration value simplex. Defaults 0.0. chainable boolean specifying whether method return class , hence allowing use pipe chaining. Defaults TRUE, enables chaining.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly chainable set TRUE (default behavior), boolean set TRUE simplex yet complex FALSE otherwise (whatever original filtration value).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-lower-star-persistence-generators-","dir":"Reference","previous_headings":"","what":"Method lower_star_persistence_generators()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Assuming lower-star filtration, function returns persistence pairs, simplex replaced vertex gave filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$lower_star_persistence_generators()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list following components: list n x 2 integer matrices containing regular persistence pairs, grouped dimension, one vertex per extremity; list m x ? integer matrices containing essential features, grouped dimension, one vertex .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-make-filtration-non-decreasing-","dir":"Reference","previous_headings":"","what":"Method make_filtration_non_decreasing()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function ensures simplex higher filtration value faces increasing filtration values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$make_filtration_non_decreasing(chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"chainable boolean specifying whether method return class , hence allowing use pipe chaining. Defaults TRUE, enables chaining.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly chainable set TRUE (default behavior), boolean set TRUE filtration value modified FALSE filtration already non-decreasing.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-num-simplices-","dir":"Reference","previous_headings":"","what":"Method num_simplices()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns number simplices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$num_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing number simplices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-num-vertices-","dir":"Reference","previous_headings":"","what":"Method num_vertices()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns number vertices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$num_vertices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing number vertices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistence-","dir":"Reference","previous_headings":"","what":"Method persistence()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function computes returns persistence simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistence(   homology_coeff_field = 11,   min_persistence = 0,   persistence_dim_max = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values. persistence_dim_max boolean specifying whether persistent homology maximal dimension complex computed (persistence_dim_max = TRUE). FALSE, ignored. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing persistence feature summarised 3 variables: dimension, birth death.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistence-intervals-in-dimension-","dir":"Reference","previous_headings":"","what":"Method persistence_intervals_in_dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns persistence intervals simplicial complex specific dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistence_intervals_in_dimension(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension integer value specifying desired dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble storing persistence intervals required dimension two columns birth death.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistence-pairs-","dir":"Reference","previous_headings":"","what":"Method persistence_pairs()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns list persistence birth death simplices pairs.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistence_pairs()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list pairs integer vectors storing list persistence simplices intervals.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistent-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method persistent_betti_numbers()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns persistent Betti numbers simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistent_betti_numbers(from_value, to_value)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"from_value numeric value specifying persistence birth limit added numbers (persistent birth <= from_value). to_value numeric value specifying persistence death limit added numbers (persistent death > to_value).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-27","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer vector storing persistent Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-prune-above-filtration-","dir":"Reference","previous_headings":"","what":"Method prune_above_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Prune filtration value given parameter.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$prune_above_filtration(filtration, chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"filtration numeric value specifying maximum threshold value. chainable boolean specifying whether method return class , hence allowing use pipe chaining. Defaults TRUE, enables chaining.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-8","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"Note dimension simplicial complex may lower calling prune_above_filtration() . However, upper_bound_dimension() return old value, remains valid upper bound. care, can call dimension() method recompute exact dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-28","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly chainable set TRUE (default behavior), boolean set TRUE filtration modified FALSE otherwise.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-remove-maximal-simplex-","dir":"Reference","previous_headings":"","what":"Method remove_maximal_simplex()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function removes given maximal N-simplex simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$remove_maximal_simplex(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-9","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension simplicial complex may lower calling $remove_maximal_simplex() . However, $upper_bound_dimension() method return old value, remains valid upper bound. care, can call $dimension() recompute exact dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-29","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-reset-filtration-","dir":"Reference","previous_headings":"","what":"Method reset_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function resets filtration value simplices dimension least min_dim. Resets simplex tree min_dim = 0L. reset_filtration may break filtration property min_dim > 0, user’s responsibility make valid filtration (using large enough filtration value, calling $make_filtration_non_decreasing() afterwards instance).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$reset_filtration(filtration, min_dim = 0)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"filtration numeric value specyfing filtration threshold. min_dim integer value specifying minimal dimension. Defaults 0L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-30","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-set-dimension-","dir":"Reference","previous_headings":"","what":"Method set_dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function sets dimension simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$set_dimension(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension integer value specifying dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-10","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"function must used caution disables dimension recomputation required (recomputation can triggered $remove_maximal_simplex() $prune_above_filtration()).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-31","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-upper-bound-dimension-","dir":"Reference","previous_headings":"","what":"Method upper_bound_dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns valid dimension upper bound simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$upper_bound_dimension()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-32","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing upper bound dimension simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-write-persistence-diagram-","dir":"Reference","previous_headings":"","what":"Method write_persistence_diagram()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function writes persistence intervals simplicial complex user given file name.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$write_persistence_diagram(persistence_file)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"persistence_file string specifying name file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-33","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Simplex Tree — SimplexTree","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"st <- SimplexTree$new() st #> <SimplexTree> #>   Inherits from: <PythonClass> #>   Public: #>     assign_filtration: function (simplex, filtration)  #>     betti_numbers: function ()  #>     clone: function (deep = FALSE)  #>     collapse_edges: function (nb_iterations = 1)  #>     compute_persistence: function (homology_coeff_field = 11, min_persistence = 0, persistence_dim_max = FALSE)  #>     dimension: function ()  #>     expansion: function (max_dim)  #>     extend_filtration: function ()  #>     extended_persistence: function (homology_coeff_field = 11, min_persistence = 0)  #>     filtration: function (simplex)  #>     find: function (simplex)  #>     flag_persistence_generators: function ()  #>     get_boundaries: function (simplex)  #>     get_cofaces: function (simplex, codimension)  #>     get_filtration: function ()  #>     get_python_class: function ()  #>     get_simplices: function ()  #>     get_skeleton: function (dimension)  #>     get_star: function (simplex)  #>     initialize: function (py_class = NULL)  #>     insert: function (simplex, filtration = 0, chainable = TRUE)  #>     lower_star_persistence_generators: function ()  #>     make_filtration_non_decreasing: function (chainable = TRUE)  #>     num_simplices: function ()  #>     num_vertices: function ()  #>     persistence: function (homology_coeff_field = 11, min_persistence = 0, persistence_dim_max = FALSE)  #>     persistence_intervals_in_dimension: function (dimension)  #>     persistence_pairs: function ()  #>     persistent_betti_numbers: function (from_value, to_value)  #>     prune_above_filtration: function (filtration, chainable = TRUE)  #>     remove_maximal_simplex: function (simplex)  #>     reset_filtration: function (filtration, min_dim = 0)  #>     set_dimension: function (dimension)  #>     set_is_flag: function (val)  #>     set_python_class: function (py_class)  #>     upper_bound_dimension: function ()  #>     write_persistence_diagram: function (persistence_file)  #>   Private: #>     m_ComputedExtendedFiltration: FALSE #>     m_ComputedPersistence: FALSE #>     m_IsFlag: FALSE #>     python_class: gudhi.simplex_tree.SimplexTree, python.builtin.object X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$set_is_flag(TRUE) X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$filtration(1) #> [1] 0 st$assign_filtration(1, 0.8) st$filtration(1) #> [1] 0.8 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$compute_persistence()$betti_numbers() #> [1] 1 0 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$collapse_edges() X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$dimension() #> [1] 2 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$expansion(2) X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$extend_filtration() st$extended_persistence() #> $Ordinary #> list() #>  #> $Relative #> list() #>  #> $`Extended+` #> list() #>  #> $`Extended-` #> list() #>  X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$filtration(0) #> [1] 0 st$filtration(1:2) #> [1] 0.0954915 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$find(0) #> [1] TRUE X <- seq_circle(10) rc <- RipsComplex$new(data = X, max_edge_length = 1) st <- rc$create_simplex_tree(1) st$compute_persistence()$flag_persistence_generators() #> [[1]] #>       [,1] [,2] [,3] #>  [1,]    1    1    0 #>  [2,]    2    2    1 #>  [3,]    3    3    2 #>  [4,]    4    4    3 #>  [5,]    6    6    5 #>  [6,]    8    8    7 #>  [7,]    5    5    4 #>  [8,]    7    7    6 #>  [9,]    9    9    8 #>  #> [[2]] #> list() #>  #> [[3]] #> [1] 0 #>  #> [[4]] #> list() #>  X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() splx <- st$get_simplices()$simplex[[1]] st$get_boundaries(splx) #> # A tibble: 3 × 2 #>   simplex   filtration #>   <list>         <dbl> #> 1 <int [2]>     0.0955 #> 2 <int [2]>     1      #> 3 <int [2]>     0.0955 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$get_cofaces(1:2, 0) #> # A tibble: 2 × 2 #>   simplex   filtration #>   <list>         <dbl> #> 1 <int [3]>     1      #> 2 <int [2]>     0.0955 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$get_filtration() #> # A tibble: 35 × 2 #>    simplex   filtration #>    <list>         <dbl> #>  1 <int [1]>          0 #>  2 <int [1]>          0 #>  3 <int [1]>          0 #>  4 <int [1]>          0 #>  5 <int [1]>          0 #>  6 <int [1]>          0 #>  7 <int [1]>          0 #>  8 <int [1]>          0 #>  9 <int [1]>          0 #> 10 <int [1]>          0 #> # ℹ 25 more rows X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$get_simplices() #> # A tibble: 35 × 2 #>    simplex   filtration #>    <list>         <dbl> #>  1 <int [3]>     1      #>  2 <int [2]>     0.0955 #>  3 <int [3]>     1.00   #>  4 <int [2]>     1      #>  5 <int [3]>     1.00   #>  6 <int [2]>     1.00   #>  7 <int [2]>     0.0955 #>  8 <int [1]>     0      #>  9 <int [2]>     0.0955 #> 10 <int [1]>     0      #> # ℹ 25 more rows X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$get_skeleton(0) #> # A tibble: 10 × 2 #>    simplex   filtration #>    <list>         <dbl> #>  1 <int [1]>          0 #>  2 <int [1]>          0 #>  3 <int [1]>          0 #>  4 <int [1]>          0 #>  5 <int [1]>          0 #>  6 <int [1]>          0 #>  7 <int [1]>          0 #>  8 <int [1]>          0 #>  9 <int [1]>          0 #> 10 <int [1]>          0 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$get_star(1:2) #> # A tibble: 2 × 2 #>   simplex   filtration #>   <list>         <dbl> #> 1 <int [3]>     1      #> 2 <int [2]>     0.0955 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$insert(1:2) st$insert(1:3, chainable = FALSE) #> [1] TRUE X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$compute_persistence()$lower_star_persistence_generators() #> [[1]] #> [[1]][[1]] #>       [,1] [,2] #>  [1,]    2   -1 #>  [2,]    3   -1 #>  [3,]    4   -1 #>  [4,]    8   -1 #>  [5,]    1   -1 #>  [6,]    9   -1 #>  [7,]    5   -1 #>  [8,]    6   -1 #>  [9,]    7   -1 #>  #> [[1]][[2]] #>      [,1] [,2] #> [1,]   -1   -1 #> [2,]   -1   -1 #> [3,]   -1   -1 #>  #>  #> [[2]] #> [[2]][[1]] #> [1] 0 #>  #>  X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$make_filtration_non_decreasing() X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$num_simplices() #> [1] 35 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$num_vertices() #> [1] 10 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$persistence() #> # A tibble: 13 × 3 #>    dimension  birth    death #>        <int>  <dbl>    <dbl> #>  1         1 0.0955   1.00   #>  2         1 1        1.00   #>  3         1 1        1.00   #>  4         0 0      Inf      #>  5         0 0        0.0955 #>  6         0 0        0.0955 #>  7         0 0        0.0955 #>  8         0 0        0.0955 #>  9         0 0        0.0955 #> 10         0 0        0.0955 #> 11         0 0        0.0955 #> 12         0 0        0.0955 #> 13         0 0        0.0955 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$compute_persistence()$persistence_intervals_in_dimension(1) #> # A tibble: 3 × 2 #>    birth death #>    <dbl> <dbl> #> 1 1       1.00 #> 2 1       1.00 #> 3 0.0955  1.00 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$compute_persistence()$persistence_pairs() #> [[1]] #> [[1]][[1]] #> [1] 2 #>  #> [[1]][[2]] #> [1] 2 1 #>  #>  #> [[2]] #> [[2]][[1]] #> [1] 3 #>  #> [[2]][[2]] #> [1] 3 2 #>  #>  #> [[3]] #> [[3]][[1]] #> [1] 4 #>  #> [[3]][[2]] #> [1] 4 3 #>  #>  #> [[4]] #> [[4]][[1]] #> [1] 8 #>  #> [[4]][[2]] #> [1] 8 7 #>  #>  #> [[5]] #> [[5]][[1]] #> [1] 1 #>  #> [[5]][[2]] #> [1] 1 0 #>  #>  #> [[6]] #> [[6]][[1]] #> [1] 9 #>  #> [[6]][[2]] #> [1] 9 8 #>  #>  #> [[7]] #> [[7]][[1]] #> [1] 5 #>  #> [[7]][[2]] #> [1] 5 4 #>  #>  #> [[8]] #> [[8]][[1]] #> [1] 6 #>  #> [[8]][[2]] #> [1] 6 5 #>  #>  #> [[9]] #> [[9]][[1]] #> [1] 7 #>  #> [[9]][[2]] #> [1] 7 6 #>  #>  #> [[10]] #> [[10]][[1]] #> [1] 5 2 #>  #> [[10]][[2]] #> [1] 5 4 2 #>  #>  #> [[11]] #> [[11]][[1]] #> [1] 7 2 #>  #> [[11]][[2]] #> [1] 9 8 0 #>  #>  #> [[12]] #> [[12]][[1]] #> [1] 9 0 #>  #> [[12]][[2]] #> [1] 7 6 5 #>  #>  #> [[13]] #> [[13]][[1]] #> [1] 0 #>  #> [[13]][[2]] #> list() #>  #>  X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$compute_persistence()$persistent_betti_numbers(0, 0.1) #> [1] 1 0 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$prune_above_filtration(0.12) X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$remove_maximal_simplex(1:2) X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$reset_filtration(0.1) X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$set_dimension(1) X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$upper_bound_dimension() #> [1] 2 X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() f <- fs::file_temp(ext = \".dgm\") st$compute_persistence()$write_persistence_diagram(f) fs::file_delete(f)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"Computes sliced Wasserstein distance matrix list persistence diagrams. Sliced Wasserstein distance computed projecting persistence diagrams onto lines, comparing projections 1-norm, finally integrating possible lines. See http://proceedings.mlr.press/v70/carriere17a.html details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::MetricStep -> SlicedWassersteinDistance","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::MetricStep$apply() rgudhi::MetricStep$fit() rgudhi::MetricStep$fit_transform() rgudhi::MetricStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"SlicedWassersteinDistance$new() SlicedWassersteinDistance$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"SlicedWassersteinDistance constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"","code":"SlicedWassersteinDistance$new(num_directions = 10, n_jobs = 1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"num_directions integer value specifying number lines evenly sampled \\([-\\pi/2,\\pi/2]\\) order approximate speed kernel computation. Defaults 10L. n_jobs integer value specifying number jobs use computation. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"object class SlicedWassersteinDistance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"","code":"SlicedWassersteinDistance$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SlicedWassersteinDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metrics: Sliced Wasserstein Distance — SlicedWassersteinDistance","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) dis <- SlicedWassersteinDistance$new() dis$apply(dgm, dgm) #> [1] 0 dis$fit_transform(list(dgm)) #>      [,1] #> [1,]    0"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"wrapper around Python class sklearn.cluster.SpectralBiclustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> SpectralBiclustering","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"SpectralBiclustering$new() SpectralBiclustering$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"SpectralBiclustering class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"","code":"SpectralBiclustering$new(   n_clusters = 3L,   method = c(\"bistochastic\", \"scale\", \"log\"),   n_components = 6L,   n_best = 3L,   svd_method = c(\"randomized\", \"arpack\"),   n_svd_vecs = NULL,   mini_batch = FALSE,   init = c(\"k-means++\", \"random\"),   n_init = 10L,   random_state = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"n_clusters integer value length-2 vector specifying number row column clusters checkerboard structure. Defaults 3L. method string specifying method normalizing converting singular vectors biclusters. May one \"scale\", \"bistochastic\" \"log\". authors recommend using \"log\". data sparse, however, log-normalization work, default \"bistochastic\". Warning: method == \"log\", data must sparse. n_components integer value specifying number singular vectors check. Defaults 6L. n_best integer value specifying number best singular vectors project data clustering. Defaults 3L. svd_method string specifying algorithm finding singular vectors. May \"randomized\" \"arpack\". \"randomized\", uses randomized_svd(), may faster large matrices. \"arpack\", uses scipy.sparse.linalg.svds(), accurate, possibly slower cases. Defaults \"randomized\". n_svd_vecs integer value specifying number vectors use calculating SVD. Corresponds ncv svd_method == \"arpack\" n_oversamples svd_method == \"randomized\". Defaults NULL. mini_batch boolean value specifying whether use mini-batch k-means, faster may get different results. Defaults FALSE. init string specifying method initialization k-means algorithm. Choices \"k-means++\" \"random\". Defaults \"k-means++\". n_init integer value specifying number random initializations tried k-means algorithm. mini-batch k-means used, best initialization chosen algorithm runs . Otherwise, algorithm run initialization best solution chosen. Defaults 10L. random_state integer value specifying pseudo random number generator used initialization lobpcg eigenvectors decomposition eigen_solver == \"amg\", k-means initialization. Defaults NULL uses clock time.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"object class SpectralBiclustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"","code":"SpectralBiclustering$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralBiclustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the spectral biclustering algorithm — SpectralBiclustering","text":"","code":"cl <- SpectralBiclustering$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"wrapper around Python class sklearn.cluster.SpectralClustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> SpectralClustering","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"SpectralClustering$new() SpectralClustering$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"SpectralClustering class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"","code":"SpectralClustering$new(   n_clusters = 8L,   eigen_solver = c(\"arpack\", \"lobpcg\", \"amg\"),   n_components = NULL,   random_state = NULL,   n_init = 10L,   gamma = 1,   affinity = c(\"rbf\", \"nearest_neighbors\", \"precomputed\",     \"precomputed_nearest_neighbors\"),   n_neighbors = 10L,   eigen_tol = \"auto\",   assign_labels = c(\"kmeans\", \"discretize\", \"cluster_qr\"),   degree = 3L,   coef0 = 1,   kernel_params = NULL,   n_jobs = 1L,   verbose = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"n_clusters integer value specifying dimension projection subspace. Defaults 8L. eigen_solver string specifying eigenvalue decomposition strategy use. Choices c(\"arpack\", \"lobpcg\", \"amg\"). AMG requires pyamg installed. can faster large, sparse problems, may also lead instabilities. Defaults \"arpack\". n_components integer value specifying number eigenvectors use spectral embedding. Defaults NULL, case, n_clusters used. random_state integer value specifying pseudo random number generator used initialization lobpcg eigenvectors decomposition eigen_solver == \"amg\", k-means initialization. Defaults NULL uses clock time. n_init integer value specifying number time k-means algorithm run different centroid seeds. final results best output n_init consecutive runs terms inertia. used assign_labels == \"kmeans\". Defaults 10L. gamma numeric value specifying kernel coefficient rbf, poly, sigmoid, laplacian chi2 kernels. Ignored affinity == \"nearest_neighbors\". Defaults 1.0. affinity Either string object coercible function via rlang::as_function() specifying construct affinity matrix: \"nearest_neighbors\": construct affinity matrix computing graph nearest neighbors; \"rbf\": construct affinity matrix using radial basis function (RBF) kernel; \"precomputed\": interpret X precomputed affinity matrix, larger values indicate greater similarity instances; \"precomputed_nearest_neighbors\": interpret X sparse graph precomputed distances, construct binary affinity matrix n_neighbors nearest neighbors instance; one kernels supported pairwise_kernels. kernels produce similarity scores (non-negative values increase similarity) used. property checked clustering algorithm. Defaults \"rbf\". n_neighbors integer value specifying number neighbors use constructing affinity matrix using nearest neighbors method. Ignored affinity == \"rbf\". Defaults 10L. eigen_tol numeric value specifying stopping criterion eigen-decomposition Laplacian matrix. eigen_tol == \"auto\", passed tolerance depend eigen_solver: eigen_solver == \"arpack\", eigen_tol = 0.0; eigen_solver == \"lobpcg\" eigen_solver == \"amg\", eigen_tol == NULL configures underlying lobpcg solver automatically resolve value according heuristics. Note using eigen_solver == \"lobpcg\" eigen_solver == \"amg\" values tol < 1e-5 may lead convergence issues avoided. Defaults \"auto\". assign_labels string specifying strategy assigning labels embedding space. two ways assign labels Laplacian embedding. k-means popular choice (\"kmeans\"), can sensitive initialization. Discretization another approach less sensitive random initialization (\"discretize\"). cluster_qr method directly extract clusters eigenvectors spectral clustering. contrast k-means discretization, cluster_qr tuning parameters runs iterations, yet may outperform k-means discretization terms quality speed. Defaults \"kmeans\". degree integer value specifying degree polynomial kernel. Ignored kernels. Defaults 3L. coef0 numeric value specifying value zero coefficient polynomial sigmoid kernels. Ignored kernels. Defaults 1.0. kernel_params named list specifying extra arguments kernels passed functions. Ignored kernels. Defaults NULL. n_jobs integer value specifying number parallel jobs run neighbors search. Defaults 1L. value -1L means using processors. verbose boolean value specifying verbosity mode. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"object class SpectralClustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"","code":"SpectralClustering$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralClustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the spectral clustering algorithm — SpectralClustering","text":"","code":"cl <- SpectralClustering$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"wrapper around Python class sklearn.cluster.SpectralCoclustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseClustering -> SpectralCoclustering","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"SpectralCoclustering$new() SpectralCoclustering$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"SpectralCoclustering class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"","code":"SpectralCoclustering$new(   n_clusters = 3L,   svd_method = c(\"randomized\", \"arpack\"),   n_svd_vecs = NULL,   mini_batch = FALSE,   init = c(\"k-means++\", \"random\"),   n_init = 10L,   random_state = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"n_clusters integer value specifying number biclusters find. Defaults 3L. svd_method string specifying algorithm finding singular vectors. May \"randomized\" \"arpack\". \"randomized\", uses sklearn.utils.extmath.randomized_svd(), may faster large matrices. \"arpack\", uses scipy.sparse.linalg.svds(), accurate, possibly slower cases. Defaults \"randomized\". n_svd_vecs integer value specifying number vectors use calculating SVD. Corresponds ncv svd_method == \"arpack\" n_oversamples svd_method == \"randomized\". Defaults NULL. mini_batch boolean value specifying whether use mini-batch k-means, faster may get different results. Defaults FALSE. init string specifying method initialization k-means algorithm. Choices \"k-means++\" \"random\". Defaults \"k-means++\". n_init integer value specifying number random initializations tried k-means algorithm. mini-batch k-means used, best initialization chosen algorithm runs . Otherwise, algorithm run initialization best solution chosen. Defaults 10L. random_state integer value specifying pseudo random number generator used initialization lobpcg eigenvectors decomposition eigen_solver == \"amg\", k-means initialization. Defaults NULL uses clock time.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"object class SpectralCoclustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"","code":"SpectralCoclustering$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SpectralCoclustering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs clustering according to the spectral coclustering algorithm — SpectralCoclustering","text":"","code":"cl <- SpectralCoclustering$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"standard score sample x calculated : $$z = \\frac{(x - u)}{s}$$ \\(u\\) mean training samples 0 with_mean = FALSE, \\(s\\) standard deviation training samples 1 with_std = FALSE. Standardization dataset common requirement many machine learning estimators: might behave badly individual features less look like standard normally distributed data (e.g. Gaussian 0 mean unit variance). instance many elements used objective function learning algorithm (RBF kernel Support Vector Machines L1 L2 regularizers linear models) assume features centered around 0 variance order. feature variance orders magnitude larger others, might dominate objective function make estimator unable learn features correctly expected. scaler can also applied sparse CSR CSC matrices passing with_mean = FALSE avoid breaking sparsity structure data.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::BaseScaler -> StandardScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$apply() rgudhi::SKLearnClass$fit() rgudhi::SKLearnClass$fit_transform() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::SKLearnClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"StandardScaler$new() StandardScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"StandardScaler class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"","code":"StandardScaler$new(copy = TRUE, with_mean = TRUE, with_std = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"copy boolean value specifying whether perform -place scaling avoid copy (input already numpy array). Defaults TRUE. with_mean boolean value specifying whether center data scaling. work (raise exception) attempted sparse matrices, centering entails building dense matrix common use cases likely large fit memory. Defaults TRUE. with_std boolean value specifying whether scale data unit variance (equivalently, unit standard deviation). Defaults TRUE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"object class StandardScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"","code":"StandardScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StandardScaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardizes features by removing the mean and scaling to unit variance — StandardScaler","text":"","code":"ss <- StandardScaler$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Strong Witness Complex — StrongWitnessComplex","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"Witness complex \\(\\mathrm{Wit}(W,L)\\) simplicial complex defined two sets points \\(R^D\\). data structure described Boissonnat Maria (2014) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"class constructs (strong) witness complex given table nearest landmarks respect witnesses.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"rgudhi::PythonClass -> rgudhi::WitnessComplex -> StrongWitnessComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::WitnessComplex$create_simplex_tree()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"StrongWitnessComplex$new() StrongWitnessComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"StrongWitnessComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"StrongWitnessComplex$new(nearest_landmark_table)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"nearest_landmark_table list tibbles specifying witness w, ordered list nearest landmarks id column nearest_landmark distance w column distance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"StrongWitnessComplex object storing strong Witness complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"StrongWitnessComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) wc <- StrongWitnessComplex$new(nearest_landmark_table = l) wc #> <StrongWitnessComplex> #>   Inherits from: <WitnessComplex> #>   Public: #>     clone: function (deep = FALSE)  #>     create_simplex_tree: function (max_alpha_square = Inf)  #>     get_python_class: function ()  #>     initialize: function (nearest_landmark_table)  #>     set_python_class: function (py_class)  #>   Private: #>     m_ComputedSimplexTree: FALSE #>     python_class: gudhi.strong_witness_complex.StrongWitnessComplex, python.builtin.object"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Tangential Complex — TangentialComplex","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Tangential Delaunay complex simplicial complex designed reconstruct \\(k\\)-dimensional manifold embedded \\(d\\)-dimensional Euclidean space. input point sample coming unknown manifold. running time depends linearly extrinsic dimension \\(d\\) exponentially intrinsic dimension \\(k\\).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex class represents tangential complex. computation complex, optional post-processing called perturbation can run attempt remove inconsistencies.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Clément Jamin","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Tangential Complex — TangentialComplex","text":"rgudhi::PythonClass -> TangentialComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Tangential Complex — TangentialComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex$new() TangentialComplex$compute_tangential_complex() TangentialComplex$create_simplex_tree() TangentialComplex$get_point() TangentialComplex$num_inconsistent_simplices() TangentialComplex$num_inconsistent_stars() TangentialComplex$num_simplices() TangentialComplex$num_vertices() TangentialComplex$set_max_squared_edge_length() TangentialComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$new(points, intrinsic_dim = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"points Either character string specifying path file points can read numeric matrix list numeric vectors specifying points directly. intrinsic_dim integer value specifying intrinsic dimension manifold. nedded points provided numeric matrix list numeric vectors. Defaults NULL.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex object storing tangential complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-compute-tangential-complex-","dir":"Reference","previous_headings":"","what":"Method compute_tangential_complex()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"function computes tangential complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$compute_tangential_complex()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Tangential Complex — TangentialComplex","text":"debug mode, may raise ValueError computed star dimension low. Try set bigger maximal edge length value via $set_max_squared_edge_length() method happens.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"updated TangentialComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-create-simplex-tree-","dir":"Reference","previous_headings":"","what":"Method create_simplex_tree()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Exports complex simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$create_simplex_tree()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"SimplexTree object storing computed simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-get-point-","dir":"Reference","previous_headings":"","what":"Method get_point()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"function returns point corresponding given vertex SimplexTree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$get_point(vertex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"vertex integer value specifying desired vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"numeric vector storing point corresponding input vertex.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_inconsistent_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing number inconsistent simplicies.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_inconsistent_stars()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing number stars containing least one inconsistent simplex.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing total number simplices stars (including duplicates appear several stars).","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_vertices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing number vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-set-max-squared-edge-length-","dir":"Reference","previous_headings":"","what":"Method set_max_squared_edge_length()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Sets maximal possible squared edge length edges triangulations.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$set_max_squared_edge_length(max_squared_edge_length)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"max_squared_edge_length numeric value specifying maximal possible squared edge length.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Tangential Complex — TangentialComplex","text":"maximal edge length value low, $compute_tangential_complex() method throw exception debug mode.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"updated TangentialComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc #> <TangentialComplex> #>   Inherits from: <PythonClass> #>   Public: #>     clone: function (deep = FALSE)  #>     compute_tangential_complex: function ()  #>     create_simplex_tree: function ()  #>     get_point: function (vertex)  #>     get_python_class: function ()  #>     initialize: function (points, intrinsic_dim = NULL)  #>     num_inconsistent_simplices: function ()  #>     num_inconsistent_stars: function ()  #>     num_simplices: function ()  #>     num_vertices: function ()  #>     set_max_squared_edge_length: function (max_squared_edge_length)  #>     set_python_class: function (py_class)  #>   Private: #>     m_ComputedSimplexTree: FALSE #>     m_ComputedTangentialComplex: FALSE #>     python_class: gudhi.tangential_complex.TangentialComplex, python.builtin.object X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc$compute_tangential_complex() X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) st <- tc$compute_tangential_complex()$create_simplex_tree() X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) st <- tc$compute_tangential_complex()$create_simplex_tree() tc$get_point(1) #> [1] 0.8090170 0.5877853 X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc$compute_tangential_complex() tc$num_inconsistent_simplices() #> [1] 0 X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc$compute_tangential_complex() tc$num_inconsistent_stars() #> [1] 0 X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc$compute_tangential_complex() tc$num_simplices() #> [1] 20 X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc$compute_tangential_complex() tc$num_vertices() #> [1] 10 X <- seq_circle(10) tc <- TangentialComplex$new(points = X, intrinsic_dim = 1) tc$set_max_squared_edge_length(1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustering: Tomato — Tomato","title":"Clustering: Tomato — Tomato","text":"clustering algorithm needs neighborhood graph points, estimation density point. possible graph constructions density estimators provided convenience, perfectly natural provide .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clustering: Tomato — Tomato","text":"Marc Glisse","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Clustering: Tomato — Tomato","text":"rgudhi::PythonClass -> Tomato","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Clustering: Tomato — Tomato","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Clustering: Tomato — Tomato","text":"Tomato$new() Tomato$fit() Tomato$fit_predict() Tomato$set_n_clusters() Tomato$get_n_clusters() Tomato$set_merge_threshold() Tomato$get_merge_threshold() Tomato$get_labels() Tomato$plot_diagram() Tomato$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Clustering: Tomato — Tomato","text":"Tomato constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$new(   graph_type = c(\"knn\", \"radius\", \"manual\"),   density_type = c(\"logDTM\", \"DTM\", \"logKDE\", \"KDE\", \"manual\"),   n_clusters = NULL,   merge_threshold = NULL,   ... )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering: Tomato — Tomato","text":"graph_type string specifying method compute neighboring graph. Choices \"knn\", \"radius\" \"manual\". Defaults \"knn\". density_type string specifying choice density estimator. Choicea \"logDTM\", \"DTM\", \"logKDE\" \"manual\". many points, \"KDE\" \"logKDE\" tend slower. Defaults \"logDTM\" n_clusters integer value specifying number clusters. Defaults NULL, .e. merging occurs get maximal number clusters. merge_threshold numeric value specifying minimum prominence cluster doesn’t get merged. Defaults NULL, .e. merging occurs get maximal number clusters. ... Extra parameters passed KNearestNeighbors DTMDensity.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"object class Tomato.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Clustering: Tomato — Tomato","text":"Runs Tomato algorithm provided data.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$fit(X, y = NULL, weights = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering: Tomato — Tomato","text":"X Either numeric matrix specifying coordinates (column) point (row) full distance matrix metric == \"precomputed\" list neighbors point graph_type == \"manual\". number points currently limited 2 billion. y used, present API consistency scikit-learn convention. weights numeric vector specifying density estimate point. Used density_type == \"manual\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"updated Tomato class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-fit-predict-","dir":"Reference","previous_headings":"","what":"Method fit_predict()","title":"Clustering: Tomato — Tomato","text":"Runs Tomato algorithm provided data returns class memberships.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$fit_predict(X, y = NULL, weights = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering: Tomato — Tomato","text":"X Either numeric matrix specifying coordinates (column) point (row) full distance matrix metric == \"precomputed\" list neighbors point graph_type == \"manual\". number points currently limited 2 billion. y used, present API consistency scikit-learn convention. weights numeric vector specifying density estimate point. Used density_type == \"manual\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"integer vector storing class memberships.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-set-n-clusters-","dir":"Reference","previous_headings":"","what":"Method set_n_clusters()","title":"Clustering: Tomato — Tomato","text":"Sets number clusters automatically adjusts class memberships.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$set_n_clusters(n_clusters)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering: Tomato — Tomato","text":"n_clusters integer value specifying number clusters.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"updated Tomato class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-get-n-clusters-","dir":"Reference","previous_headings":"","what":"Method get_n_clusters()","title":"Clustering: Tomato — Tomato","text":"Gets number clusters.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$get_n_clusters()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"number clusters.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-set-merge-threshold-","dir":"Reference","previous_headings":"","what":"Method set_merge_threshold()","title":"Clustering: Tomato — Tomato","text":"Sets threshold merging clusters automatically adjusts class memberships.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$set_merge_threshold(merge_threshold)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering: Tomato — Tomato","text":"merge_threshold numeric value specifying threshold merging clusters.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"updated Tomato class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-get-merge-threshold-","dir":"Reference","previous_headings":"","what":"Method get_merge_threshold()","title":"Clustering: Tomato — Tomato","text":"Gets threshold merging clusters.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$get_merge_threshold()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"threshold merging clusters.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-get-labels-","dir":"Reference","previous_headings":"","what":"Method get_labels()","title":"Clustering: Tomato — Tomato","text":"Gets class memberships.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$get_labels()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Clustering: Tomato — Tomato","text":"integer vector storing class memberships.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-plot-diagram-","dir":"Reference","previous_headings":"","what":"Method plot_diagram()","title":"Clustering: Tomato — Tomato","text":"Computes persistence diagram merge tree initial clusters. convenient graphical tool help decide many clusters want.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$plot_diagram()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Clustering: Tomato — Tomato","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustering: Tomato — Tomato","text":"","code":"Tomato$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustering: Tomato — Tomato","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Tomato.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clustering: Tomato — Tomato","text":"","code":"X <- seq_circle(100) cl <- Tomato$new() cl$fit_predict(X) #>   [1] 0 0 0 0 0 0 0 0 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 2 2 2 2 2 2 2 2 2 2 2 2 #>  [38] 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [75] 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 cl$set_n_clusters(2) cl$get_labels() #>   [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 #>  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [75] 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation: Topological Vector — TopologicalVector","title":"Vector Representation: Topological Vector — TopologicalVector","text":"Computes topological vectors list persistence diagrams. topological vector associated persistence diagram sorted vector slight modification pairwise distances persistence diagram points. See https://diglib.eg.org/handle/10.1111/cgf12692 details.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation: Topological Vector — TopologicalVector","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation: Topological Vector — TopologicalVector","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::VectorRepresentationStep -> TopologicalVector","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation: Topological Vector — TopologicalVector","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::VectorRepresentationStep$apply() rgudhi::VectorRepresentationStep$fit() rgudhi::VectorRepresentationStep$fit_transform() rgudhi::VectorRepresentationStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation: Topological Vector — TopologicalVector","text":"TopologicalVector$new() TopologicalVector$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Vector Representation: Topological Vector — TopologicalVector","text":"TopologicalVector constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Topological Vector — TopologicalVector","text":"","code":"TopologicalVector$new(threshold = 10)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Topological Vector — TopologicalVector","text":"threshold integer value specifying number distances keep. Defaults 10L. dimension topological vector. -1, threshold computed list persistence diagrams considering one largest number points using dimension corresponding topological vector threshold.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation: Topological Vector — TopologicalVector","text":"object class TopologicalVector.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation: Topological Vector — TopologicalVector","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation: Topological Vector — TopologicalVector","text":"","code":"TopologicalVector$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation: Topological Vector — TopologicalVector","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TopologicalVector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Representation: Topological Vector — TopologicalVector","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) tv <- TopologicalVector$new() tv$apply(dgm) #> # A tibble: 10 × 2 #>     Grid     Value #>    <int> <dbl[1d]> #>  1     1  2.78e-17 #>  2     2  2.78e-17 #>  3     3  2.78e-17 #>  4     4  2.78e-17 #>  5     5  2.78e-17 #>  6     6  2.78e-17 #>  7     7  2.78e-17 #>  8     8  2.78e-17 #>  9     9  2.78e-17 #> 10    10  2.78e-17 tv$fit_transform(list(dgm)) #> # A tibble: 10 × 2 #>     Grid Value     #>    <int> <list>    #>  1     1 <dbl [1]> #>  2     2 <dbl [1]> #>  3     3 <dbl [1]> #>  4     4 <dbl [1]> #>  5     5 <dbl [1]> #>  6     6 <dbl [1]> #>  7     7 <dbl [1]> #>  8     8 <dbl [1]> #>  9     9 <dbl [1]> #> 10    10 <dbl [1]>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Representation Step — VectorRepresentationStep","title":"Vector Representation Step — VectorRepresentationStep","text":"Vector Representation Step Vector Representation Step","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Vector Representation Step — VectorRepresentationStep","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Vector Representation Step — VectorRepresentationStep","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> VectorRepresentationStep","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Vector Representation Step — VectorRepresentationStep","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Vector Representation Step — VectorRepresentationStep","text":"VectorRepresentationStep$apply() VectorRepresentationStep$fit() VectorRepresentationStep$transform() VectorRepresentationStep$fit_transform() VectorRepresentationStep$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"method-apply-","dir":"Reference","previous_headings":"","what":"Method apply()","title":"Vector Representation Step — VectorRepresentationStep","text":"Applies class single persistence diagram outputs result.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation Step — VectorRepresentationStep","text":"","code":"VectorRepresentationStep$apply(diag)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation Step — VectorRepresentationStep","text":"diag 2-column tibble::tibble specifying persistence diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation Step — VectorRepresentationStep","text":"tibble::tibble storing requested vector representation persistence diagram table suitable visualization.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Vector Representation Step — VectorRepresentationStep","text":"Fits class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation Step — VectorRepresentationStep","text":"","code":"VectorRepresentationStep$fit(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation Step — VectorRepresentationStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation Step — VectorRepresentationStep","text":"class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"method-transform-","dir":"Reference","previous_headings":"","what":"Method transform()","title":"Vector Representation Step — VectorRepresentationStep","text":"Applies class sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation Step — VectorRepresentationStep","text":"","code":"VectorRepresentationStep$transform(X)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation Step — VectorRepresentationStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation Step — VectorRepresentationStep","text":"list tibble::tibbles storing requested vector representations persistence diagrams table suitable visualization.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"method-fit-transform-","dir":"Reference","previous_headings":"","what":"Method fit_transform()","title":"Vector Representation Step — VectorRepresentationStep","text":"Applies sequentially $fit() $transform() methods sample persistence diagrams efficient way calling directly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation Step — VectorRepresentationStep","text":"","code":"VectorRepresentationStep$fit_transform(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation Step — VectorRepresentationStep","text":"X list 2-column tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Vector Representation Step — VectorRepresentationStep","text":"list tibble::tibbles storing requested vector representations persistence diagrams table suitable visualization.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Vector Representation Step — VectorRepresentationStep","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Representation Step — VectorRepresentationStep","text":"","code":"VectorRepresentationStep$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/VectorRepresentationStep.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Representation Step — VectorRepresentationStep","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics: Wasserstein Distance — WassersteinDistance","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"Computes Wasserstein distance matrix list persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::MetricStep -> WassersteinDistance","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::MetricStep$apply() rgudhi::MetricStep$fit() rgudhi::MetricStep$fit_transform() rgudhi::MetricStep$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"WassersteinDistance$new() WassersteinDistance$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"WassersteinDistance constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"","code":"WassersteinDistance$new(   order = 1,   internal_p = Inf,   mode = c(\"hera\", \"pot\"),   delta = 0.01,   n_jobs = 1 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"order integer value specifying exponent Wasserstein distance. Defaults 1.0. internal_p integer value specifying ground metric (upper-half) plane (.e. norm \\(\\ell_p\\) \\(R^2\\)). Defaults Inf. mode string specifying method computing Wasserstein distance. Choices either \"pot\" \"hera\". Defaults \"hera\". delta numeric value specifying relative error \\(1+\\delta\\). Defaults 0.01. Used mode == \"hera\". n_jobs integer value specifying number jobs use computation. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"object class WassersteinDistance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"","code":"WassersteinDistance$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WassersteinDistance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metrics: Wasserstein Distance — WassersteinDistance","text":"","code":"X <- seq_circle(10) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0) ds <- DiagramSelector$new(use = TRUE) dgm <- ds$apply(dgm) dis <- WassersteinDistance$new() dis$apply(dgm, dgm) #> [1] 0 dis$fit_transform(list(dgm)) #>      [,1] #> [1,]    0"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Witness Complex — WitnessComplex","title":"R6 Class for Witness Complex — WitnessComplex","text":"Witness complex \\(\\mathrm{Wit}(W,L)\\) simplicial complex defined two sets points \\(R^D\\). data structure described Boissonnat Maria (2014) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Witness Complex — WitnessComplex","text":"class constructs (weak) witness complex given table nearest landmarks respect witnesses.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Witness Complex — WitnessComplex","text":"Boissonnat J, Maria C (2014). “simplex tree: efficient data structure general simplicial complexes.” Algorithmica, 70(3), 406--427.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Witness Complex — WitnessComplex","text":"Siargey Kachanovich","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Witness Complex — WitnessComplex","text":"rgudhi::PythonClass -> WitnessComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Witness Complex — WitnessComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Witness Complex — WitnessComplex","text":"WitnessComplex$new() WitnessComplex$create_simplex_tree() WitnessComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Witness Complex — WitnessComplex","text":"WitnessComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"WitnessComplex$new(nearest_landmark_table)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Witness Complex — WitnessComplex","text":"nearest_landmark_table list tibble::tibbles specifying witness w, ordered list nearest landmarks id column nearest_landmark distance w column distance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Witness Complex — WitnessComplex","text":"WitnessComplex object storing Witness complex.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"WitnessComplex$create_simplex_tree(max_alpha_square = Inf)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Witness Complex — WitnessComplex","text":"max_alpha_square maximum relaxation parameter. Defaults Inf.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Witness Complex — WitnessComplex","text":"SimplexTree object storing computed simplex tree created Delaunay triangulation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Witness Complex — WitnessComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"WitnessComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Witness Complex — WitnessComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) wc <- WitnessComplex$new(nearest_landmark_table = l) wc #> <WitnessComplex> #>   Inherits from: <PythonClass> #>   Public: #>     clone: function (deep = FALSE)  #>     create_simplex_tree: function (max_alpha_square = Inf)  #>     get_python_class: function ()  #>     initialize: function (nearest_landmark_table)  #>     set_python_class: function (py_class)  #>   Private: #>     m_ComputedSimplexTree: FALSE #>     python_class: gudhi.witness_complex.WitnessComplex, python.builtin.object withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) wc <- WitnessComplex$new(nearest_landmark_table = l) st <- wc$create_simplex_tree() st$num_vertices() #> [1] 10"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/autoplot.persistence_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for persistence_diagram objects — autoplot.persistence_diagram","title":"Plot for persistence_diagram objects — autoplot.persistence_diagram","text":"function creates visualization persistence diagram returns corresponding ggplot2::ggplot object enable customization plot.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/autoplot.persistence_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for persistence_diagram objects — autoplot.persistence_diagram","text":"","code":"# S3 method for persistence_diagram autoplot(   object,   dimension = NULL,   alpha = 0.6,   max_intervals = 20000,   legend = FALSE,   greyblock = TRUE,   n = 10L,   type = c(\"barcode\", \"diagram\", \"density\"),   ... )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/autoplot.persistence_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for persistence_diagram objects — autoplot.persistence_diagram","text":"object object class persistence_diagram. dimension integer value specifying homology dimension visualize. Defaults NULL case dimension retrieved directly persistence_diagram object. alpha numeric value 0 1 specifying transparency points lines plot. Defaults 0.6. max_intervals integer value specifying maximal number intervals display. Selected intervals longest lifetime. Set 0 see . Defaults 20000L. legend boolean value specifying whether display legend homology dimension(s). Defaults FALSE. greyblock boolean value specifying whether display grey lower triangle diagram representation nicer output. Defaults TRUE. n integer value specifying number bins plotting diagram density. Defaults 10L. type string specifyfing type representation. Choices \"barcode\", \"diagram\" \"density\". Defaults \"barcode\". ... parameters passed next methods.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/autoplot.persistence_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot for persistence_diagram objects — autoplot.persistence_diagram","text":"ggplot2::ggplot object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/autoplot.persistence_diagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for persistence_diagram objects — autoplot.persistence_diagram","text":"","code":"pd <- as_persistence_diagram(tibble::tibble(   birth = 0,   death = 1,   dimension = 0 )) ggplot2::autoplot(pd)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Remote Data Sets — fetch","title":"Remote Data Sets — fetch","text":"collection function fetching famous remote data sets.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remote Data Sets — fetch","text":"","code":"fetch_bunny(data_folder, accept_license = FALSE)  fetch_spiral_2d(data_folder)  clear_data_home(data_folder)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remote Data Sets — fetch","text":"data_folder string specifying location storing data ot used GUDHI. accept_license boolean specifying whether user accepts file LICENSE prevents printing corresponding license terms. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remote Data Sets — fetch","text":"numeric array storing points corresponding data set.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":"stanford-bunny-dataset","dir":"Reference","previous_headings":"","what":"Stanford bunny dataset","title":"Remote Data Sets — fetch","text":"fetch_bunny() function returns numeric array shape \\(35947 \\times 3\\).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":"spiral-d-dataset","dir":"Reference","previous_headings":"","what":"spiral_2d dataset","title":"Remote Data Sets — fetch","text":"fetch_spiral_2d() function returns numeric array shape \\(114,562 \\times 2\\).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/fetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remote Data Sets — fetch","text":"","code":"b <- withr::with_tempdir({fetch_bunny(getwd())}) s <- withr::with_tempdir({fetch_spiral_2d(getwd())})"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/mean.persistence_diagram_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Persistence Diagram Sample Mean — mean.persistence_diagram_sample","title":"Persistence Diagram Sample Mean — mean.persistence_diagram_sample","text":"Currently computes Fréchet mean associated 2-Wasserstein distance, .k.Wasserstein barycenter.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/mean.persistence_diagram_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Persistence Diagram Sample Mean — mean.persistence_diagram_sample","text":"","code":"# S3 method for persistence_diagram_sample mean(x, initial_center = NULL, verbose = FALSE, ...)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/mean.persistence_diagram_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Persistence Diagram Sample Mean — mean.persistence_diagram_sample","text":"x object class persistence_diagram_sample. initial_center Either integer value specifying index persistence diagram input list used initial center object class persistence_diagram used initial center. Defaults NULL, randomly chooses center input list. verbose boolean specifying whether information displayed console. Defaults FALSE. ... arguments passed methods.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/mean.persistence_diagram_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Persistence Diagram Sample Mean — mean.persistence_diagram_sample","text":"object class persistence_diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/mean.persistence_diagram_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Persistence Diagram Sample Mean — mean.persistence_diagram_sample","text":"","code":"dg1 <- as_persistence_diagram(tibble::tibble(birth = 0.2, death = 0.5)) dg2 <- as_persistence_diagram(tibble::tibble(birth = 0.2, death = 0.7)) dg3 <- as_persistence_diagram(tibble::tibble(   birth = c(0.3, 0.7, 0.2),   death = c(0.6, 0.8, 0.3) )) pdset <- as_persistence_diagram_sample(list(dg1, dg2, dg3)) bary <- mean(pdset)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Persistence Diagram — persistence_diagram","title":"Persistence Diagram — persistence_diagram","text":"collection function manipulate persistence diagram object class persistence_diagram. persistence_diagram tibble::tibble birth variable least one death lifetime variables.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Persistence Diagram — persistence_diagram","text":"","code":"as_persistence_diagram(x)  is_persistence_diagram(x)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Persistence Diagram — persistence_diagram","text":"x object coercible persistence_diagram object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Persistence Diagram — persistence_diagram","text":"object class persistence_diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Persistence Diagram Sample — persistence_diagram_sample","title":"Persistence Diagram Sample — persistence_diagram_sample","text":"collection function manipulate persistence diagram sample object class persistence_diagram_sample. persistence_diagram_sample list objects class persistence_diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Persistence Diagram Sample — persistence_diagram_sample","text":"","code":"as_persistence_diagram_sample(x)  is_persistence_diagram_sample(x)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Persistence Diagram Sample — persistence_diagram_sample","text":"x object coercible persistence_diagram_sample object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/persistence_diagram_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Persistence Diagram Sample — persistence_diagram_sample","text":"object class persistence_diagram_sample.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/plot.persistence_diagram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot for persistence_diagram objects — plot.persistence_diagram","title":"Plot for persistence_diagram objects — plot.persistence_diagram","text":"function creates visualization persistence diagram without returning corresponding ggplot2::ggplot object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/plot.persistence_diagram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot for persistence_diagram objects — plot.persistence_diagram","text":"","code":"# S3 method for persistence_diagram plot(   x,   dimension = NULL,   alpha = 0.6,   max_intervals = 20000,   legend = FALSE,   greyblock = TRUE,   type = c(\"barcode\", \"diagram\", \"density\"),   ... )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/plot.persistence_diagram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot for persistence_diagram objects — plot.persistence_diagram","text":"x object class persistence_diagram. dimension integer value specifying homology dimension visualize. Defaults NULL case dimension retrieved directly persistence_diagram object. alpha numeric value 0 1 specifying transparency points lines plot. Defaults 0.6. max_intervals integer value specifying maximal number intervals display. Selected intervals longest lifetime. Set 0 see . Defaults 20000L. legend boolean value specifying whether display legend homology dimension(s). Defaults FALSE. greyblock boolean value specifying whether display grey lower triangle diagram representation nicer output. Defaults TRUE. type string specifyfing type representation. Choices \"barcode\", \"diagram\" \"density\". Defaults \"barcode\". ... parameters passed next methods.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/plot.persistence_diagram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot for persistence_diagram objects — plot.persistence_diagram","text":"","code":"pd <- as_persistence_diagram(tibble::tibble(   birth = 0,   death = 1,   dimension = 0 )) plot(pd)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/rgudhi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rgudhi: An Interface to the GUDHI Library for Topological Data Analysis — rgudhi-package","title":"rgudhi: An Interface to the GUDHI Library for Topological Data Analysis — rgudhi-package","text":"Provides interface GUDHI library generic open source C++ library, Python interface, topological data analysis (TDA) higher dimensional geometry understanding. library offers state---art data structures algorithms construct simplicial complexes compute persistent homology.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/rgudhi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rgudhi: An Interface to the GUDHI Library for Topological Data Analysis — rgudhi-package","text":"Maintainer: Aymeric Stamm aymeric.stamm@cnrs.fr (ORCID) contributors: GUDHI Editorial Board (https://gudhi.inria.fr/people/) [contributor]","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/seq_circle.html","id":null,"dir":"Reference","previous_headings":"","what":"Circular Sequence Generation — seq_circle","title":"Circular Sequence Generation — seq_circle","text":"Generates sequence 2D points evenly spaced unit circle.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/seq_circle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Circular Sequence Generation — seq_circle","text":"","code":"seq_circle(n)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/seq_circle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Circular Sequence Generation — seq_circle","text":"n integer value specifying number points sequence.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/seq_circle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Circular Sequence Generation — seq_circle","text":"base::list length-2 numeric vectors storing 2D points evenly spaced unit circle.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/seq_circle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Circular Sequence Generation — seq_circle","text":"","code":"seq_circle(10) #> [[1]] #> [1] 1 0 #>  #> [[2]] #> [1] 0.8090170 0.5877853 #>  #> [[3]] #> [1] 0.3090170 0.9510565 #>  #> [[4]] #> [1] -0.3090170  0.9510565 #>  #> [[5]] #> [1] -0.8090170  0.5877853 #>  #> [[6]] #> [1] -1.000000e+00  1.224647e-16 #>  #> [[7]] #> [1] -0.8090170 -0.5877853 #>  #> [[8]] #> [1] -0.3090170 -0.9510565 #>  #> [[9]] #> [1]  0.3090170 -0.9510565 #>  #> [[10]] #> [1]  0.8090170 -0.5877853 #>"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling on the Sphere — sphere","title":"Sampling on the Sphere — sphere","text":"function sphere() enables uniform sampling random ..d. points \\((d-1)\\)-sphere \\(R^d\\). user provide number points n_samples generated sphere ambient dimension ambient_dim. radius sphere optional equal 1 default. random points generation currently available.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling on the Sphere — sphere","text":"","code":"sphere(n_samples, ambient_dim, radius = 1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling on the Sphere — sphere","text":"n_samples integer value specifying sample size. ambient_dim integer value specifying dimension ambient space. radius numeric value specifying radius sphere. Defaults 1.0.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/sphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling on the Sphere — sphere","text":"numeric array shape \\(n_\\mathrm{samples} \\times   \\mathrm{ambient\\_dim}\\) storing n_samples points uniformly sampled sphere dimension ambient_dim - 1.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/sphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling on the Sphere — sphere","text":"","code":"sphere(10, 2) #>             [,1]       [,2] #>  [1,]  0.4899016  0.8717778 #>  [2,]  0.0805207 -0.9967529 #>  [3,]  0.1484937  0.9889133 #>  [4,] -0.5447326 -0.8386098 #>  [5,] -0.8161352 -0.5778610 #>  [6,]  0.8628720 -0.5054225 #>  [7,]  0.5055005 -0.8628263 #>  [8,]  0.9367079 -0.3501118 #>  [9,]  0.5249961 -0.8511046 #> [10,]  0.9434686 -0.3314620"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/torus.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling on the Torus — torus","title":"Sampling on the Torus — torus","text":"user provide number points n_samples generated torus dimension dim torus points generated \\(R^{2 \\mathrm{dim}}\\). sample argument optional set \"random\" default. generated points returned array shape \\(n_\\mathrm{samples} \\times R^{2 \\mathrm{dim}}\\).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/torus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling on the Torus — torus","text":"","code":"torus(n_samples, dim, sample = c(\"random\", \"grid\"))"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/torus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling on the Torus — torus","text":"n_samples integer value specifying sample size. dim integer value specifying dimension \\(R^{2 \\mathrm{dim}}\\) torus. sample string specifying sampling type. Choices \"random\" \"grid\". Defaults \"random\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/torus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling on the Torus — torus","text":"numeric array shape \\(n_\\mathrm{samples} \\times R^{2   \\mathrm{dim}}\\) storing sampled points.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/torus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling on the Torus — torus","text":"","code":"torus(10, 1) #>             [,1]       [,2] #>  [1,] -0.9755915  0.2195933 #>  [2,] -0.9789347 -0.2041737 #>  [3,] -0.9529171  0.3032308 #>  [4,]  0.3542752  0.9351412 #>  [5,] -0.5467990 -0.8372639 #>  [6,] -0.1115954 -0.9937537 #>  [7,]  0.6021524  0.7983812 #>  [8,] -0.9427705  0.3334425 #>  [9,]  0.4749163 -0.8800309 #> [10,] -0.4567010 -0.8896202"},{"path":"https://lmjl-alea.github.io/rgudhi/news/index.html","id":"rgudhi-020","dir":"Changelog","previous_headings":"","what":"rgudhi 0.2.0","title":"rgudhi 0.2.0","text":"minor release, : Added persistence_diagram_sample class; Implemented Lagragian formulation compute Wasserstein barycenters sample persistence diagrams; Fixed CRAN warnings: Incoherence autoplot method implementation following renaming main argument x object. Rectify invalid URL pointing paper BIRCH clustering.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/news/index.html","id":"rgudhi-010","dir":"Changelog","previous_headings":"","what":"rgudhi 0.1.0","title":"rgudhi 0.1.0","text":"CRAN release: 2023-01-19 rgudhi v0.1.0 provides almost full wrapper v3.7.1 GUDHI library topological data analysis. cover complex class missing due non-reproducibility issues random number generators. GUDHI accessible R, rgudhi v0.1.0 features: data structure encode simplicial complexes; computation persistence diagrams; various usual preprocessing tools persistence diagrams; dedicated S3 class persistence_diagram persistence diagram; plot() ggplot2::autoplot() methods persistence_diagram objects; vector kernel representations persistence diagrams; number metrics quantify distances persistence diagrams (Bottleneck, Persistence Fisher, Wasserstein, Slice-Wasserstein). functions sample points sphere (sphere()) torus (torus()); persistence-based clustering algorithm coined Tomato. package also wraps clustering algorithms sklearn.cluster module can useful using Atol vectorization method persistence diagram. also wraps scalers classes sklearn.preprocessing use various classes well.","code":""}]
