[{"path":"https://lmjl-alea.github.io/rgudhi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 rgudhi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Aymeric Stamm. Author, maintainer.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stamm (2022). rgudhi: R Interface GUDHI. https://github.com/LMJL-Alea/rgudhi, https://lmjl-alea.github.io/rgudhi/.","code":"@Manual{,   title = {rgudhi: An R Interface to GUDHI},   author = {Aymeric Stamm},   year = {2022},   note = {https://github.com/LMJL-Alea/rgudhi, https://lmjl-alea.github.io/rgudhi/}, }"},{"path":"https://lmjl-alea.github.io/rgudhi/index.html","id":"rgudhi","dir":"","previous_headings":"","what":"An R Interface to GUDHI","title":"An R Interface to GUDHI","text":"goal rgudhi provide R interface Python package gudhi. GUDHI library generic open source C++ library, Python interface, Topological Data Analysis (TDA) Higher Dimensional Geometry Understanding. library offers state---art data structures algorithms construct simplicial complexes compute persistent homology.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Interface to GUDHI","text":"can install development version rgudhi GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"LMJL-Alea/rgudhi\")"},{"path":"https://lmjl-alea.github.io/rgudhi/index.html","id":"example-persistence-diagram-using-an-alpha-complex","dir":"","previous_headings":"","what":"Example: Persistence diagram using an Alpha complex","title":"An R Interface to GUDHI","text":"","code":"library(rgudhi) n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),    function(.x) c(cos(.x), sin(.x)) ) ac <- AlphaComplex$new(points = X) st <- ac$create_simplex_tree() st$persistence() #> # A tibble: 14 × 3 #>    dimension birth      death #>        <int> <dbl>      <dbl> #>  1         1 0.117   1.00e+ 0 #>  2         1 1       1.00e+ 0 #>  3         1 1       1   e+ 0 #>  4         1 1       1   e+ 0 #>  5         0 0     Inf        #>  6         0 0       1.17e- 1 #>  7         0 0       1.17e- 1 #>  8         0 0       1.17e- 1 #>  9         0 0       1.17e- 1 #> 10         0 0       1.17e- 1 #> 11         0 0       1.17e- 1 #> 12         0 0       1.17e- 1 #> 13         0 0       1.17e- 1 #> 14         0 0       1.50e-32"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Alpha Complex — AlphaComplex","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex simplicial complex constructed finite cells Delaunay Triangulation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Alpha Complex — AlphaComplex","text":"filtration value simplex computed square circumradius simplex circumsphere empty (simplex said Gabriel), minimum filtration values codimension 1 cofaces make Gabriel otherwise. simplices filtration value strictly greater given alpha squared value inserted complex.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Alpha Complex — AlphaComplex","text":"Vincent Rouvreau","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Alpha Complex — AlphaComplex","text":"rgudhi::PythonClass -> AlphaComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Alpha Complex — AlphaComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex$new() AlphaComplex$create_simplex_tree() AlphaComplex$get_point() AlphaComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$new(points, precision = \"safe\")"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"points Either n x d matrix length-n list d-dimensional vectors file extension .. precision string specifying alpha complex precision. Can one \"fast\", \"safe\" \"exact\". Defaults \"safe\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Alpha Complex — AlphaComplex","text":"AlphaComplex object storing Alpha complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"n <- 10 Xl <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) Xm <- Reduce(rbind, Xl, init = numeric()) if (reticulate::py_module_available(\"gudhi\")) {   acm <- AlphaComplex$new(points = Xm)   acl <- AlphaComplex$new(points = Xl)   acl }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-create-simplex-tree-","dir":"Reference","previous_headings":"","what":"Method create_simplex_tree()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"Generates simplex tree Delaunay triangulation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$create_simplex_tree(   max_alpha_square = Inf,   default_filtration_value = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"max_alpha_square numeric value specifying maximum alpha square threshold simplices shall exceed. Default set Inf, little point using anything else since save time. default_filtration_value boolean specifying whether filtration values computed set NaN (default_filtration_value = TRUE). Defaults FALSE (means compute filtration values).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Alpha Complex — AlphaComplex","text":"SimplexTree object storing computed simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-get-point-","dir":"Reference","previous_headings":"","what":"Method get_point()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"function returns point corresponding given vertex SimplexTree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$get_point(vertex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"vertex integer value specifying desired vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Alpha Complex — AlphaComplex","text":"numeric vector storing point corresponding input vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   ac$get_point(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Alpha Complex — AlphaComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"AlphaComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Alpha Complex — AlphaComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/AlphaComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Alpha Complex — AlphaComplex","text":"","code":"## ------------------------------------------------ ## Method `AlphaComplex$new` ## ------------------------------------------------  n <- 10 Xl <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) Xm <- Reduce(rbind, Xl, init = numeric()) if (reticulate::py_module_available(\"gudhi\")) {   acm <- AlphaComplex$new(points = Xm)   acl <- AlphaComplex$new(points = Xl)   acl }  ## ------------------------------------------------ ## Method `AlphaComplex$create_simplex_tree` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree() }  ## ------------------------------------------------ ## Method `AlphaComplex$get_point` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   ac$get_point(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Birth Persistence Transform — BirthPersistenceTransform","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"class affine transformation \\((x,y) \\mapsto   (x,y-x)\\) applied persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::RepresentationBaseClass -> BirthPersistenceTransform","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::RepresentationBaseClass$apply() rgudhi::RepresentationBaseClass$fit() rgudhi::RepresentationBaseClass$fit_transform() rgudhi::RepresentationBaseClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"BirthPersistenceTransform$new() BirthPersistenceTransform$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"BirthPersistenceTransform constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"BirthPersistenceTransform$new()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"object class BirthPersistenceTransform.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   bpt <- BirthPersistenceTransform$new()   bpt$apply(dgm)   bpt$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"BirthPersistenceTransform$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/BirthPersistenceTransform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Birth Persistence Transform — BirthPersistenceTransform","text":"","code":"## ------------------------------------------------ ## Method `BirthPersistenceTransform$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   bpt <- BirthPersistenceTransform$new()   bpt$apply(dgm)   bpt$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Cover Complex — CoverComplex","title":"R6 Class for Cover Complex — CoverComplex","text":"Nerves Graph Induced Complexes cover complexes, .e. simplicial complexes provably contain topological information input data. can computed cover data, comes .e. pre-image family intervals covering image scalar-valued function defined data.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cover Complex — CoverComplex","text":"Cover complex data structure. data structure simplicial complex, representing Graph Induced simplicial Complex (GIC) Nerve, whose simplices computed cover \\(C\\) point cloud \\(P\\), often comes pre-images intervals covering image function \\(f\\) defined \\(P\\). intervals parameterised resolution (either length number) gain (percentage overlap). compute GIC, one also needs graph \\(G\\) built top \\(P\\), whose cliques vertices belonging different elements \\(C\\) correspond simplices GIC.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Cover Complex — CoverComplex","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Cover Complex — CoverComplex","text":"rgudhi::PythonClass -> CoverComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Cover Complex — CoverComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Cover Complex — CoverComplex","text":"CoverComplex$new() CoverComplex$compute_PD() CoverComplex$compute_confidence_level_from_distance() CoverComplex$compute_distance_from_confidence_level() CoverComplex$compute_distribution() CoverComplex$compute_p_value() CoverComplex$create_simplex_tree() CoverComplex$find_simplices() CoverComplex$plot_dot() CoverComplex$plot_off() CoverComplex$read_point_cloud() CoverComplex$set_automatic_resolution() CoverComplex$set_color_from_coordinate() CoverComplex$set_color_from_file() CoverComplex$set_color_from_range() CoverComplex$set_cover_from_Voronoi() CoverComplex$set_cover_from_file() CoverComplex$set_cover_from_function() CoverComplex$set_distances_from_range() CoverComplex$set_function_from_coordinate() CoverComplex$set_function_from_file() CoverComplex$set_function_from_range() CoverComplex$set_gain() CoverComplex$set_graph_from_OFF() CoverComplex$set_graph_from_automatic_rips() CoverComplex$set_graph_from_file() CoverComplex$set_graph_from_rips() CoverComplex$set_mask() CoverComplex$set_point_cloud_from_range() CoverComplex$set_resolution_with_interval_length() CoverComplex$set_resolution_with_interval_number() CoverComplex$set_subsampling() CoverComplex$set_verbose() CoverComplex$subpopulation() CoverComplex$write_info() CoverComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Cover Complex — CoverComplex","text":"CoverComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$new(type)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"type character string specifying type output simplicial complex. Can either \"GIC\" \"Nerve\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"CoverComplex object storing Cover complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-compute-pd-","dir":"Reference","previous_headings":"","what":"Method compute_PD()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes extended persistence diagram complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$compute_PD()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_PD() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-compute-confidence-level-from-distance-","dir":"Reference","previous_headings":"","what":"Method compute_confidence_level_from_distance()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes confidence level specific Bottleneck distance threshold.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$compute_confidence_level_from_distance(distance_threshold)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"distance_threshold numeric value specifying desired Bottleneck distance threshold.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"numeric value storing confidence level corresponding input threshold Bottleneck distance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution()$     compute_confidence_level_from_distance(distance_threshold = 0.1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-compute-distance-from-confidence-level-","dir":"Reference","previous_headings":"","what":"Method compute_distance_from_confidence_level()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes bottleneck distance threshold corresponding specific confidence level.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$compute_distance_from_confidence_level(confidence_level)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"confidence_level numeric value specifying desired confidence level.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"numeric value storing threshold Bottleneck distance corresponding input confidence level.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution()$     compute_distance_from_confidence_level(confidence_level = 0.95) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-compute-distribution-","dir":"Reference","previous_headings":"","what":"Method compute_distribution()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes distribution distances via bootstrap.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$compute_distribution(N = 100L, dir = getwd())"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"N integer value specifying number iterations. Defaults 100L. dir character string specifying path directory .file saved. Defaults current working directory retrieved via getwd().","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-compute-p-value-","dir":"Reference","previous_headings":"","what":"Method compute_p_value()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes p-value, .e. opposite confidence level largest bottleneck distance preserving points persistence diagram output simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$compute_p_value()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"numeric value storing desired p-value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution()$     compute_p_value() }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$create_simplex_tree()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"SimplexTree object storing simplex tree created Cover complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   st <- cc$     read_point_cloud(url)$     create_simplex_tree() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-find-simplices-","dir":"Reference","previous_headings":"","what":"Method find_simplices()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes simplices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$find_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-plot-dot-","dir":"Reference","previous_headings":"","what":"Method plot_dot()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates .dot file called _sc.dot neato (part graphviz Python package) simplicial complex computed get visualization 1-skeleton .pdf file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$plot_dot(dir = getwd())"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"dir character string specifying path directory .dot file saved. Defaults current working directory retrieved via getwd().","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()   withr::with_tempdir({     cc$plot_dot()   }) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-plot-off-","dir":"Reference","previous_headings":"","what":"Method plot_off()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates .file called _sc.3D visualization, contains 2-skeleton GIC. function assumes cover computed Voronoi. data points 1D 2D, remaining coordinates points embedded 3D set 0.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$plot_off(dir = getwd())"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"dir character string specifying path directory .file saved. Defaults current working directory retrieved via getwd().","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()   withr::with_tempdir({     cc$plot_dot()   }) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-read-point-cloud-","dir":"Reference","previous_headings":"","what":"Method read_point_cloud()","title":"R6 Class for Cover Complex — CoverComplex","text":"Reads stores input point cloud .(n)file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$read_point_cloud(off_file, chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"off_file character string specifying location .(n)file read point cloud . chainable boolean specyfing whether method chainable case returns invisibly class . Defaults TRUE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly chainable = TRUE boolean storing read file status.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-automatic-resolution-","dir":"Reference","previous_headings":"","what":"Method set_automatic_resolution()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes optimal length intervals (.e. smallest interval length avoiding discretization artifacts - see Carriere et al. (2018) ) functional cover.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Cover Complex — CoverComplex","text":"Carriere M, Michel B, Oudot S (2018). “Statistical analysis parameter selection mapper.” Journal Machine Learning Research, 19(1), 478--516.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_automatic_resolution(chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"chainable boolean specyfing whether method chainable case returns invisibly class . Defaults TRUE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly chainable = TRUE numeric value storing resolution interval length used compute cover.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-color-from-coordinate-","dir":"Reference","previous_headings":"","what":"Method set_color_from_coordinate()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes function used color nodes simplicial complex k-th coordinate.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_color_from_coordinate(k = 0)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"k integer value specifying coordinate use (start 0). Defaults 0L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-color-from-file-","dir":"Reference","previous_headings":"","what":"Method set_color_from_file()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes function used color nodes simplicial complex file containing function values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_color_from_file(color_file_name)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"color_file_name character string specifying name input color file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cover Complex — CoverComplex","text":"color file .txt file many lines points point cloud. line populated single numeric value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" cf <- system.file(\"extdata\", \"color_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_color_from_file(cf) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-color-from-range-","dir":"Reference","previous_headings":"","what":"Method set_color_from_range()","title":"R6 Class for Cover Complex — CoverComplex","text":"Computes function used color nodes simplicial complex vector stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_color_from_range(color_values)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"color_values numeric vector specifying input vector values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_range(seq(0, 1, len = 100)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-cover-from-voronoi-","dir":"Reference","previous_headings":"","what":"Method set_cover_from_Voronoi()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates cover \\(C\\) Voronoï cells subsampling point cloud.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_cover_from_Voronoi(m = 100L)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"m integer value specifying number points subsample. Defaults 100L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_Voronoi() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-cover-from-file-","dir":"Reference","previous_headings":"","what":"Method set_cover_from_file()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates cover \\(C\\) file containing cover elements point (order input file!).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_cover_from_file(cover_file_name)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"cover_file_name character string specifying path input cover file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cover Complex — CoverComplex","text":"cover file .txt file many lines points point cloud. line populated integer vector specifying cover elements point belong.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" cf <- system.file(\"extdata\", \"cover_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_graph_from_automatic_rips()#$     #set_cover_from_file(cf) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-cover-from-function-","dir":"Reference","previous_headings":"","what":"Method set_cover_from_function()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates cover \\(C\\) pre-images function \\(f\\).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_cover_from_function()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-distances-from-range-","dir":"Reference","previous_headings":"","what":"Method set_distances_from_range()","title":"R6 Class for Cover Complex — CoverComplex","text":"Reads stores input distance matrix vector stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_distances_from_range(distance_matrix)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"distance_matrix numeric matrix specifying distance matrix.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"D <- dist(iris[, -5]) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_distances_from_range(D) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-function-from-coordinate-","dir":"Reference","previous_headings":"","what":"Method set_function_from_coordinate()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates function \\(f\\) \\(k\\)-th coordinate point cloud.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_function_from_coordinate(k = 0L)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"k integer value specifying coordinate use (starts 0L). Defaults 0L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-19","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-function-from-file-","dir":"Reference","previous_headings":"","what":"Method set_function_from_file()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates function \\(f\\) file containing function values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_function_from_file(func_file_name)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"func_file_name character string specifying path input function file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cover Complex — CoverComplex","text":"function file .txt file many lines points point cloud. line populated single numeric value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-20","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" ff <- system.file(\"extdata\", \"function_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_function_from_file(ff) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-function-from-range-","dir":"Reference","previous_headings":"","what":"Method set_function_from_range()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates function \\(f\\) vector stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_function_from_range(function_values)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"function_values numeric vector specifying function values used.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-21","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_range(seq(0, 1, len = 100)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-gain-","dir":"Reference","previous_headings":"","what":"Method set_gain()","title":"R6 Class for Cover Complex — CoverComplex","text":"Sets gain value stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_gain(g = 0.3)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"g numeric value specifying gain. Defaults 0.3.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-22","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_gain() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-graph-from-off-","dir":"Reference","previous_headings":"","what":"Method set_graph_from_OFF()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates graph \\(G\\) triangulation given input .file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_graph_from_OFF()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-23","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_OFF() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-graph-from-automatic-rips-","dir":"Reference","previous_headings":"","what":"Method set_graph_from_automatic_rips()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates graph \\(G\\) Rips complex whose threshold value automatically tuned subsampling - see Carriere et al. (2018) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"references-1","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Cover Complex — CoverComplex","text":"Carriere M, Michel B, Oudot S (2018). “Statistical analysis parameter selection mapper.” Journal Machine Learning Research, 19(1), 478--516.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_graph_from_automatic_rips(N = 100L, chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"N integer value specifying number subsampling iterations. Defaults 100L guarantee choose . chainable boolean specyfing whether method chainable case returns invisibly class . Defaults TRUE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly chainable = TRUE numeric value storing delta threshold used computing Rips complex..","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-24","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-graph-from-file-","dir":"Reference","previous_headings":"","what":"Method set_graph_from_file()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates graph \\(G\\) file containing edges.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_graph_from_file(graph_file_name)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"graph_file_name character string specifying path input graph file. graph file contains one edge per line, edge represented IDs two nodes.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cover Complex — CoverComplex","text":"file contain edge list graph rows, row reporting indices two connected vertices stored input point cloud.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-25","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" gf <- system.file(\"extdata\", \"graph_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_graph_from_file(gf) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-graph-from-rips-","dir":"Reference","previous_headings":"","what":"Method set_graph_from_rips()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates graph \\(G\\) Rips complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_graph_from_rips(threshold)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"threshold numeric value specifying threshold value Rips complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-26","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_rips(0.1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-mask-","dir":"Reference","previous_headings":"","what":"Method set_mask()","title":"R6 Class for Cover Complex — CoverComplex","text":"Sets mask, threshold integer nodes complex contain number data points less equal threshold displayed.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_mask(nodemask)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"nodemask numeric value specifying threshold value generating mask.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-27","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-27","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     set_mask(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-point-cloud-from-range-","dir":"Reference","previous_headings":"","what":"Method set_point_cloud_from_range()","title":"R6 Class for Cover Complex — CoverComplex","text":"Reads stores input point cloud vector stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_point_cloud_from_range(cloud)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"cloud numeric matrix specifying coordinates point cloud.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-28","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-28","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) X <- Reduce(rbind, X, init = numeric()) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     set_point_cloud_from_range(X) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-resolution-with-interval-length-","dir":"Reference","previous_headings":"","what":"Method set_resolution_with_interval_length()","title":"R6 Class for Cover Complex — CoverComplex","text":"Sets length intervals value stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_resolution_with_interval_length(resolution)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"resolution numeric value specifying length intervals.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-29","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-29","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_length(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-resolution-with-interval-number-","dir":"Reference","previous_headings":"","what":"Method set_resolution_with_interval_number()","title":"R6 Class for Cover Complex — CoverComplex","text":"Sets number intervals value stored memory.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_resolution_with_interval_number(resolution)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-24","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"resolution integer value specifying number intervals.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-30","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-30","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-subsampling-","dir":"Reference","previous_headings":"","what":"Method set_subsampling()","title":"R6 Class for Cover Complex — CoverComplex","text":"Sets constants used subsample data set. constants explained Carriere et al. (2018) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"references-2","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Cover Complex — CoverComplex","text":"Carriere M, Michel B, Oudot S (2018). “Statistical analysis parameter selection mapper.” Journal Machine Learning Research, 19(1), 478--516.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_subsampling(constant, power)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-25","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"constant numeric value specifying subsampling constant. power numeric value specifying subsampling power.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-31","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-31","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_subsampling(constant = 0, power = 1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-set-verbose-","dir":"Reference","previous_headings":"","what":"Method set_verbose()","title":"R6 Class for Cover Complex — CoverComplex","text":"Specifies whether program display information .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$set_verbose(verbose = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-26","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"verbose boolean specifying whether display information. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-32","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-32","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_verbose(FALSE) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-subpopulation-","dir":"Reference","previous_headings":"","what":"Method subpopulation()","title":"R6 Class for Cover Complex — CoverComplex","text":"Returns data subset corresponding specific node created complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$subpopulation(node_id)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-27","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"node_id integer value specifying ID desired node.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-33","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"integer vector storing IDs data points input node.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-33","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     subpopulation(0) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-write-info-","dir":"Reference","previous_headings":"","what":"Method write_info()","title":"R6 Class for Cover Complex — CoverComplex","text":"Creates .txt file called _sc.txt describing 1-skeleton, can plotted e.g. KeplerMapper.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$write_info(dir = getwd())"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-28","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"dir character string specifying path directory .txt file saved. Defaults current working directory retrieved via getwd().","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"returns-34","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cover Complex — CoverComplex","text":"updated CoverComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"examples-34","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()   withr::with_tempdir({     cc$write_info()   }) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Cover Complex — CoverComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"usage-35","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"CoverComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"arguments-29","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cover Complex — CoverComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CoverComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cover Complex — CoverComplex","text":"","code":"## ------------------------------------------------ ## Method `CoverComplex$new` ## ------------------------------------------------  if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc }  ## ------------------------------------------------ ## Method `CoverComplex$compute_PD` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_PD() }  ## ------------------------------------------------ ## Method `CoverComplex$compute_confidence_level_from_distance` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution()$     compute_confidence_level_from_distance(distance_threshold = 0.1) }  ## ------------------------------------------------ ## Method `CoverComplex$compute_distance_from_confidence_level` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution()$     compute_distance_from_confidence_level(confidence_level = 0.95) }  ## ------------------------------------------------ ## Method `CoverComplex$compute_distribution` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution() }  ## ------------------------------------------------ ## Method `CoverComplex$compute_p_value` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     compute_distribution()$     compute_p_value() }  ## ------------------------------------------------ ## Method `CoverComplex$create_simplex_tree` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   st <- cc$     read_point_cloud(url)$     create_simplex_tree() }  ## ------------------------------------------------ ## Method `CoverComplex$find_simplices` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices() }  ## ------------------------------------------------ ## Method `CoverComplex$plot_dot` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()   withr::with_tempdir({     cc$plot_dot()   }) }  ## ------------------------------------------------ ## Method `CoverComplex$plot_off` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()   withr::with_tempdir({     cc$plot_dot()   }) }  ## ------------------------------------------------ ## Method `CoverComplex$read_point_cloud` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url) }  ## ------------------------------------------------ ## Method `CoverComplex$set_automatic_resolution` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution() }  ## ------------------------------------------------ ## Method `CoverComplex$set_color_from_coordinate` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate() }  ## ------------------------------------------------ ## Method `CoverComplex$set_color_from_file` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" cf <- system.file(\"extdata\", \"color_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_color_from_file(cf) }  ## ------------------------------------------------ ## Method `CoverComplex$set_color_from_range` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_range(seq(0, 1, len = 100)) }  ## ------------------------------------------------ ## Method `CoverComplex$set_cover_from_Voronoi` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_Voronoi() }  ## ------------------------------------------------ ## Method `CoverComplex$set_cover_from_file` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" cf <- system.file(\"extdata\", \"cover_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_graph_from_automatic_rips()#$     #set_cover_from_file(cf) }  ## ------------------------------------------------ ## Method `CoverComplex$set_cover_from_function` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function() }  ## ------------------------------------------------ ## Method `CoverComplex$set_distances_from_range` ## ------------------------------------------------  D <- dist(iris[, -5]) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_distances_from_range(D) }  ## ------------------------------------------------ ## Method `CoverComplex$set_function_from_coordinate` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate() }  ## ------------------------------------------------ ## Method `CoverComplex$set_function_from_file` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" ff <- system.file(\"extdata\", \"function_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_function_from_file(ff) }  ## ------------------------------------------------ ## Method `CoverComplex$set_function_from_range` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_range(seq(0, 1, len = 100)) }  ## ------------------------------------------------ ## Method `CoverComplex$set_gain` ## ------------------------------------------------  if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_gain() }  ## ------------------------------------------------ ## Method `CoverComplex$set_graph_from_OFF` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_OFF() }  ## ------------------------------------------------ ## Method `CoverComplex$set_graph_from_automatic_rips` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips() }  ## ------------------------------------------------ ## Method `CoverComplex$set_graph_from_file` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" gf <- system.file(\"extdata\", \"graph_file.txt\", package = \"rgudhi\") if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$     new(type = \"GIC\")$     read_point_cloud(url)$     set_graph_from_file(gf) }  ## ------------------------------------------------ ## Method `CoverComplex$set_graph_from_rips` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_rips(0.1) }  ## ------------------------------------------------ ## Method `CoverComplex$set_mask` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     set_mask(1) }  ## ------------------------------------------------ ## Method `CoverComplex$set_point_cloud_from_range` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) X <- Reduce(rbind, X, init = numeric()) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     set_point_cloud_from_range(X) }  ## ------------------------------------------------ ## Method `CoverComplex$set_resolution_with_interval_length` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_length(1) }  ## ------------------------------------------------ ## Method `CoverComplex$set_resolution_with_interval_number` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100) }  ## ------------------------------------------------ ## Method `CoverComplex$set_subsampling` ## ------------------------------------------------  if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_subsampling(constant = 0, power = 1) }  ## ------------------------------------------------ ## Method `CoverComplex$set_verbose` ## ------------------------------------------------  if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$set_verbose(FALSE) }  ## ------------------------------------------------ ## Method `CoverComplex$subpopulation` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()$     subpopulation(0) }  ## ------------------------------------------------ ## Method `CoverComplex$write_info` ## ------------------------------------------------  url <- \"https://raw.githubusercontent.com/GUDHI/TDA-tutorial/master/datasets/tore3D_1307.off\" if (reticulate::py_module_available(\"gudhi\")) {   cc <- CoverComplex$new(type = \"GIC\")   cc$     read_point_cloud(url)$     set_graph_from_automatic_rips()$     set_function_from_coordinate()$     set_color_from_coordinate()$     set_resolution_with_interval_number(100)$     set_cover_from_function()$     set_automatic_resolution()$     find_simplices()   withr::with_tempdir({     cc$write_info()   }) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Cubical Complex — CubicalComplex","title":"R6 Class for Cubical Complex — CubicalComplex","text":"CubicalComplex example structured complex useful computational mathematics (specially rigorous numerics) image analysis.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Cubical Complex — CubicalComplex","text":"Pawel Dlotko","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Cubical Complex — CubicalComplex","text":"rgudhi::PythonClass -> CubicalComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Cubical Complex — CubicalComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Cubical Complex — CubicalComplex","text":"CubicalComplex$new() CubicalComplex$betti_numbers() CubicalComplex$cofaces_of_persistence_pairs() CubicalComplex$compute_persistence() CubicalComplex$dimension() CubicalComplex$num_simplices() CubicalComplex$persistence() CubicalComplex$persistence_intervals_in_dimension() CubicalComplex$persistent_betti_numbers() CubicalComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"Constructor either top_dimensional_cells (possibly dimensions) Perseus-style file name.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$new(   perseus_file,   top_dimensional_cells,   dimensions = NULL,   py_class = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"perseus_file character string specifying path Perseus-style file name. top_dimensional_cells Either numeric vector (case, dimensions provided well) multidimensional array specifying cell filtration values. dimensions integer vector specifying number top dimensional cells. Defaults NULL. py_class existing CubicalComplex Python class. Defaults NULL uses Python class constructor instead.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"new CubicalComplex object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method betti_numbers()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns Betti numbers complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$betti_numbers()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cubical Complex — CubicalComplex","text":"$betti_numbers() method always returns [1, 0, 0, ...] infinity filtration cubes removed complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer vector storing Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$betti_numbers() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-cofaces-of-persistence-pairs-","dir":"Reference","previous_headings":"","what":"Method cofaces_of_persistence_pairs()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"persistence interval described pair cells, one creates feature one kills . filtration values 2 cells give coordinates point persistence diagram, bar barcode. Structurally, cubical complexes provided , filtration value cell minimum filtration values maximal cells contain . Connecting persistence diagram coordinates corresponding value input (.e. filtration values top-dimensional cells) useful differentiation purposes.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$cofaces_of_persistence_pairs()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns list pairs top-dimensional cells corresponding persistence birth death cells filtration. cells represented indices input list top-dimensional cells (indices internal data structure includes non-maximal cells). Note two adjacent top-dimensional cells filtration value, arbitrarily return one two calling function one common faces.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"top-dimensional cells/cofaces positive negative cells, together corresponding homological dimension, two lists integer arrays. first list contains regular persistence pairs, grouped dimension. contains numpy arrays shape [number_of_persistence_points, 2]. indices arrays list correspond homological dimensions, integers row array correspond : (index positive top-dimensional cell, index negative top-dimensional cell). second list contains essential features, grouped dimension. contains numpy arrays shape [number_of_persistence_points, 1]. indices arrays list correspond homological dimensions, integers row array correspond : (index positive top-dimensional cell).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$cofaces_of_persistence_pairs() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-compute-persistence-","dir":"Reference","previous_headings":"","what":"Method compute_persistence()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"method computes persistence complex, can accessed $persistent_betti_numbers(), $persistence_intervals_in_dimension(), etc. equivalent $persistence() method want list $persistence() returns.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$compute_persistence(   homology_coeff_field = 11,   min_persistence = 0 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"updated CubicalComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-dimension-","dir":"Reference","previous_headings":"","what":"Method dimension()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns dimension complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$dimension()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer value giving complex dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$dimension() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-num-simplices-","dir":"Reference","previous_headings":"","what":"Method num_simplices()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns number cubes complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$num_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer value giving number cubes complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$num_simplices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-persistence-","dir":"Reference","previous_headings":"","what":"Method persistence()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function computes returns persistence complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$persistence(homology_coeff_field = 11, min_persistence = 0)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"tibble listing persistence feature summarised 3 variables: dimension, birth death.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$persistence() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-persistence-intervals-in-dimension-","dir":"Reference","previous_headings":"","what":"Method persistence_intervals_in_dimension()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns persistence intervals complex specific dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$persistence_intervals_in_dimension(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"dimension integer value specifying desired dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"tibble storing persistence intervals row.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$persistence_intervals_in_dimension(0) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-persistent-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method persistent_betti_numbers()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"function returns persistent Betti numbers complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$persistent_betti_numbers(from_value, to_value)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"from_value numeric value specifying persistence birth limit added numbers (persistent birth <= from_value). to_value numeric value specifying persistence death limit added numbers (persistent death > to_value).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Cubical Complex — CubicalComplex","text":"integer vector storing persistent Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$persistent_betti_numbers(0, 1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Cubical Complex — CubicalComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"CubicalComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Cubical Complex — CubicalComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/CubicalComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Cubical Complex — CubicalComplex","text":"","code":"## ------------------------------------------------ ## Method `CubicalComplex$new` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc }  ## ------------------------------------------------ ## Method `CubicalComplex$betti_numbers` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$betti_numbers() }  ## ------------------------------------------------ ## Method `CubicalComplex$cofaces_of_persistence_pairs` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$cofaces_of_persistence_pairs() }  ## ------------------------------------------------ ## Method `CubicalComplex$dimension` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$dimension() }  ## ------------------------------------------------ ## Method `CubicalComplex$num_simplices` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$num_simplices() }  ## ------------------------------------------------ ## Method `CubicalComplex$persistence` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$persistence() }  ## ------------------------------------------------ ## Method `CubicalComplex$persistence_intervals_in_dimension` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$persistence_intervals_in_dimension(0) }  ## ------------------------------------------------ ## Method `CubicalComplex$persistent_betti_numbers` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   cc <- CubicalComplex$new(top_dimensional_cells = X)   cc$compute_persistence()$persistent_betti_numbers(0, 1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagram Scaler — DiagramScaler","title":"Diagram Scaler — DiagramScaler","text":"class preprocessing persistence diagrams given list scalers, included scikit-learn.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagram Scaler — DiagramScaler","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Diagram Scaler — DiagramScaler","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::RepresentationBaseClass -> DiagramScaler","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Diagram Scaler — DiagramScaler","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::RepresentationBaseClass$apply() rgudhi::RepresentationBaseClass$fit() rgudhi::RepresentationBaseClass$fit_transform() rgudhi::RepresentationBaseClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Diagram Scaler — DiagramScaler","text":"DiagramScaler$new() DiagramScaler$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Diagram Scaler — DiagramScaler","text":"DiagramScaler constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagram Scaler — DiagramScaler","text":"","code":"DiagramScaler$new(use = FALSE, scalers = list())"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagram Scaler — DiagramScaler","text":"use boolean value specifying whether use class. Defaults FALSE. scalers list scalers fit persistence diagrams. Defaults list() empty list. element list tuple two elements: first one list coordinates; second one scaler (.e. class $fit() $transform() methods) going applied coordinates. Common scalers can found scikit-learn library (MinMaxScaler instance).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Diagram Scaler — DiagramScaler","text":"object class DiagramScaler.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagram Scaler — DiagramScaler","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- DiagramScaler$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Diagram Scaler — DiagramScaler","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagram Scaler — DiagramScaler","text":"","code":"DiagramScaler$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagram Scaler — DiagramScaler","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramScaler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagram Scaler — DiagramScaler","text":"","code":"## ------------------------------------------------ ## Method `DiagramScaler$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- DiagramScaler$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagram Selector — DiagramSelector","title":"Diagram Selector — DiagramSelector","text":"class extracting finite essential points persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Diagram Selector — DiagramSelector","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Diagram Selector — DiagramSelector","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::RepresentationBaseClass -> DiagramSelector","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Diagram Selector — DiagramSelector","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::RepresentationBaseClass$apply() rgudhi::RepresentationBaseClass$fit() rgudhi::RepresentationBaseClass$fit_transform() rgudhi::RepresentationBaseClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Diagram Selector — DiagramSelector","text":"DiagramSelector$new() DiagramSelector$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Diagram Selector — DiagramSelector","text":"DiagramSelector constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagram Selector — DiagramSelector","text":"","code":"DiagramSelector$new(   use = FALSE,   limit = Inf,   point_type = c(\"finite\", \"essential\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagram Selector — DiagramSelector","text":"use boolean value specifying whether use class. Defaults FALSE. limit numeric value specifying second coordinate value criterion essential point. Defaults \\(\\infty\\). point_type string specifying type points going extracted. Choices either “finite” “essential”. Defaults “finite”.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Diagram Selector — DiagramSelector","text":"object class DiagramSelector.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagram Selector — DiagramSelector","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- DiagramSelector$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Diagram Selector — DiagramSelector","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagram Selector — DiagramSelector","text":"","code":"DiagramSelector$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagram Selector — DiagramSelector","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/DiagramSelector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagram Selector — DiagramSelector","text":"","code":"## ------------------------------------------------ ## Method `DiagramSelector$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- DiagramSelector$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":null,"dir":"Reference","previous_headings":"","what":"Padding — Padding","title":"Padding — Padding","text":"class padding list persistence diagrams dummy points, persistence diagrams end number points.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Padding — Padding","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Padding — Padding","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::RepresentationBaseClass -> Padding","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Padding — Padding","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::RepresentationBaseClass$apply() rgudhi::RepresentationBaseClass$fit() rgudhi::RepresentationBaseClass$fit_transform() rgudhi::RepresentationBaseClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Padding — Padding","text":"Padding$new() Padding$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Padding — Padding","text":"Padding constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Padding — Padding","text":"","code":"Padding$new(use = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Padding — Padding","text":"use boolean value specifying whether use class. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Padding — Padding","text":"object class Padding.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Padding — Padding","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- Padding$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Padding — Padding","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Padding — Padding","text":"","code":"Padding$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Padding — Padding","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/Padding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Padding — Padding","text":"","code":"## ------------------------------------------------ ## Method `Padding$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- Padding$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"PeriodicCubicalComplex class example structured complex useful computational mathematics (specially rigorous numerics) image analysis.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"Pawel Dlotko","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"rgudhi::PythonClass -> rgudhi::CubicalComplex -> PeriodicCubicalComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::CubicalComplex$betti_numbers() rgudhi::CubicalComplex$cofaces_of_persistence_pairs() rgudhi::CubicalComplex$compute_persistence() rgudhi::CubicalComplex$dimension() rgudhi::CubicalComplex$num_simplices() rgudhi::CubicalComplex$persistence() rgudhi::CubicalComplex$persistence_intervals_in_dimension() rgudhi::CubicalComplex$persistent_betti_numbers()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"PeriodicCubicalComplex$new() PeriodicCubicalComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"Constructor either top_dimensional_cells (possibly dimensions) Perseus-style file name.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"PeriodicCubicalComplex$new(   perseus_file,   top_dimensional_cells,   periodic_dimensions,   dimensions = NULL,   py_class = NULL )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"perseus_file character string specifying path Perseus-style file name. top_dimensional_cells Either numeric vector (case, dimensions provided well) multidimensional array specifying cell filtration values. periodic_dimensions logical vector specifying periodicity value top dimensional cells. dimensions integer vector specifying number top dimensional cells. Defaults NULL. py_class existing PeriodicCubicalComplex Python class. Defaults NULL uses Python class constructor instead.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"new PeriodicCubicalComplex object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   pcc <- PeriodicCubicalComplex$new(     top_dimensional_cells = X,     periodic_dimensions = TRUE   )   pcc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"PeriodicCubicalComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/PeriodicCubicalComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Periodic Cubical Complex — PeriodicCubicalComplex","text":"","code":"## ------------------------------------------------ ## Method `PeriodicCubicalComplex$new` ## ------------------------------------------------  n <- 10 X <- cbind(seq(0, 1, len = n), seq(0, 1, len = n)) if (reticulate::py_module_available(\"gudhi\")) {   pcc <- PeriodicCubicalComplex$new(     top_dimensional_cells = X,     periodic_dimensions = TRUE   )   pcc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Prominent Points — ProminentPoints","title":"Prominent Points — ProminentPoints","text":"class removing points close far diagonal persistence diagrams. persistence diagrams 2-column tibble::tibbles (.e. persistence diagrams ordinary features), points ordered thresholded distance--diagonal. persistence diagrams 1-column tibble::tibbles (.e. persistence diagrams essential features), points ordered thresholded first coordinate.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prominent Points — ProminentPoints","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Prominent Points — ProminentPoints","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> rgudhi::RepresentationBaseClass -> ProminentPoints","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Prominent Points — ProminentPoints","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params() rgudhi::RepresentationBaseClass$apply() rgudhi::RepresentationBaseClass$fit() rgudhi::RepresentationBaseClass$fit_transform() rgudhi::RepresentationBaseClass$transform()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Prominent Points — ProminentPoints","text":"ProminentPoints$new() ProminentPoints$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Prominent Points — ProminentPoints","text":"ProminentPoints constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prominent Points — ProminentPoints","text":"","code":"ProminentPoints$new(   use = FALSE,   num_pts = 10,   threshold = -1,   location = c(\"upper\", \"lower\") )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prominent Points — ProminentPoints","text":"use boolean value specifying whether use class. Defaults FALSE. num_pts integer value specifying cardinality threshold. Defaults 10L. location == \"upper\", keeps top num_pts points farthest away diagonal. location == \"lower\", keeps top num_pts points closest diagonal. threshold numeric value specifying distance--diagonal threshold. Defaults -1.0. location == \"upper\", keeps points least distance threshold diagonal. location == \"lower\", keeps points distance threshold diagonal. location string specifying whether keep points far away (\"upper\") close (\"lower\") diagonal. Defaults \"upper\".","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Prominent Points — ProminentPoints","text":"object class ProminentPoints.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prominent Points — ProminentPoints","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- ProminentPoints$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Prominent Points — ProminentPoints","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Prominent Points — ProminentPoints","text":"","code":"ProminentPoints$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prominent Points — ProminentPoints","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/ProminentPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prominent Points — ProminentPoints","text":"","code":"## ------------------------------------------------ ## Method `ProminentPoints$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n + 1)[1:n],   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   dgm <- st$compute_persistence()$persistence_intervals_in_dimension(0)   ds <- ProminentPoints$new()   ds$apply(dgm)   ds$fit_transform(list(dgm)) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Representation Module - Abstract Base Class — RepresentationBaseClass","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"Representation Module - Abstract Base Class Representation Module - Abstract Base Class","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"Mathieu Carrière","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"rgudhi::PythonClass -> rgudhi::SKLearnClass -> RepresentationBaseClass","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::SKLearnClass$get_params() rgudhi::SKLearnClass$set_params()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"RepresentationBaseClass$apply() RepresentationBaseClass$fit() RepresentationBaseClass$transform() RepresentationBaseClass$fit_transform() RepresentationBaseClass$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"method-apply-","dir":"Reference","previous_headings":"","what":"Method apply()","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"Applies class single persistence diagram output result.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"","code":"RepresentationBaseClass$apply(diag)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"diag tibble::tibble two variables birth death specifying persistence diagram.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"method-fit-","dir":"Reference","previous_headings":"","what":"Method fit()","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"Fits class list persistence diagrams. might nothing cases useful class included scikit-learn pipeline.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"","code":"RepresentationBaseClass$fit(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"X list tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"method-transform-","dir":"Reference","previous_headings":"","what":"Method transform()","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"Applies class persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"","code":"RepresentationBaseClass$transform(X)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"X list tibble::tibbles specifying sample persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"method-fit-transform-","dir":"Reference","previous_headings":"","what":"Method fit_transform()","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"Applies sequentially $fit() $transform() methods persistence diagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"","code":"RepresentationBaseClass$fit_transform(X, y = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"X list tibble::tibbles specifying sample persistence diagrams. y integer vector specifying persistence diagram labels (unused now).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"","code":"RepresentationBaseClass$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RepresentationBaseClass.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Representation Module - Abstract Base Class — RepresentationBaseClass","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Rips Complex — RipsComplex","title":"R6 Class for Rips Complex — RipsComplex","text":"data structure one skeleton graph, Rips graph, containing edges edge length less equal given threshold. Edge length computed user given point cloud given distance function, distance matrix.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Rips Complex — RipsComplex","text":"Clément Maria, Pawel Dlotko, Vincent Rouvreau, Marc Glisse, Yuichi Ike","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Rips Complex — RipsComplex","text":"rgudhi::PythonClass -> RipsComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Rips Complex — RipsComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Rips Complex — RipsComplex","text":"RipsComplex$new() RipsComplex$create_simplex_tree() RipsComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Rips Complex — RipsComplex","text":"RipsComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"RipsComplex$new(data, max_edge_length = NULL, sparse = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Rips Complex — RipsComplex","text":"data Either n x d matrix length-n list d-dimensional vectors distance matrix stored dist object. max_edge_length numeric value specifying Rips value. sparse numeric value specifying approximation parameter epsilon buidling sparse Rips complex. Defaults NULL builds exact Rips complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Rips Complex — RipsComplex","text":"RipsComplex object storing Rips complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   rc1 <- RipsComplex$new(data = X, max_edge_length = 1) } Xm <- Reduce(rbind, X, init = numeric()) if (reticulate::py_module_available(\"gudhi\")) {   rc2 <- RipsComplex$new(data = Xm, max_edge_length = 1) } D <- dist(Xm) if (reticulate::py_module_available(\"gudhi\")) {   rc3 <- RipsComplex$new(data = D) }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"RipsComplex$create_simplex_tree(max_dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Rips Complex — RipsComplex","text":"max_dimension integer value specifying maximal dimension Rips complex expanded .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Rips Complex — RipsComplex","text":"SimplexTree object storing computed simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   rc <- RipsComplex$new(data = X, max_edge_length = 1)   st <- rc$create_simplex_tree(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Rips Complex — RipsComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"RipsComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Rips Complex — RipsComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/RipsComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Rips Complex — RipsComplex","text":"","code":"## ------------------------------------------------ ## Method `RipsComplex$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   rc1 <- RipsComplex$new(data = X, max_edge_length = 1) } Xm <- Reduce(rbind, X, init = numeric()) if (reticulate::py_module_available(\"gudhi\")) {   rc2 <- RipsComplex$new(data = Xm, max_edge_length = 1) } D <- dist(Xm) if (reticulate::py_module_available(\"gudhi\")) {   rc3 <- RipsComplex$new(data = D) }  ## ------------------------------------------------ ## Method `RipsComplex$create_simplex_tree` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   rc <- RipsComplex$new(data = X, max_edge_length = 1)   st <- rc$create_simplex_tree(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Simplex Tree — SimplexTree","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex tree efficient flexible data structure representing general (filtered) simplicial complexes. data structure described Boissonnat Maria (2014) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"class filtered, keys, non contiguous vertices version simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Simplex Tree — SimplexTree","text":"Boissonnat J, Maria C (2014). “simplex tree: efficient data structure general simplicial complexes.” Algorithmica, 70(3), 406--427.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Simplex Tree — SimplexTree","text":"Clément Maria","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Simplex Tree — SimplexTree","text":"rgudhi::PythonClass -> SimplexTree","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Simplex Tree — SimplexTree","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Simplex Tree — SimplexTree","text":"SimplexTree$new() SimplexTree$set_is_flag() SimplexTree$assign_filtration() SimplexTree$betti_numbers() SimplexTree$collapse_edges() SimplexTree$compute_persistence() SimplexTree$dimension() SimplexTree$expansion() SimplexTree$extend_filtration() SimplexTree$extended_persistence() SimplexTree$filtration() SimplexTree$find() SimplexTree$flag_persistence_generators() SimplexTree$get_boundaries() SimplexTree$get_cofaces() SimplexTree$get_filtration() SimplexTree$get_simplices() SimplexTree$get_skeleton() SimplexTree$get_star() SimplexTree$insert() SimplexTree$lower_star_persistence_generators() SimplexTree$make_filtration_non_decreasing() SimplexTree$num_simplices() SimplexTree$num_vertices() SimplexTree$persistence() SimplexTree$persistence_intervals_in_dimension() SimplexTree$persistence_pairs() SimplexTree$persistent_betti_numbers() SimplexTree$prune_above_filtration() SimplexTree$remove_maximal_simplex() SimplexTree$reset_filtration() SimplexTree$set_dimension() SimplexTree$upper_bound_dimension() SimplexTree$write_persistence_diagram() SimplexTree$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Simplex Tree — SimplexTree","text":"SimplexTree class constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$new(py_class = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"py_class Python SimplexTree class object. Defaults NULL uses Python class constructor instead.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"new SimplexTree object.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"if (reticulate::py_module_available(\"gudhi\")) {   st <- SimplexTree$new()   st }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-set-is-flag-","dir":"Reference","previous_headings":"","what":"Method set_is_flag()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function sets internal field m_IsFlag records whether simplex tree flag complex (.e. generated Rips complex).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$set_is_flag(val)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"val boolean specifying whether simplex tree flag complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"SimplexTree class initializes m_IsFlag field FALSE default method specifically allows overwrite default value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$set_is_flag(TRUE) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-assign-filtration-","dir":"Reference","previous_headings":"","what":"Method assign_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function assigns new filtration value given N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$assign_filtration(simplex, filtration)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices. filtration numeric value specifying new filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"Beware operation, structure may valid filtration anymore, simplex lower filtration value one faces. Callers responsible fixing (calls $assign_filtration() method call $make_filtration_non_decreasing() method instance) calling function relies filtration property, persistence().","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$filtration(1)   st$assign_filtration(1, 0.8)   st$filtration(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method betti_numbers()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns Betti numbers simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$betti_numbers()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer vector storing Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$betti_numbers() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-collapse-edges-","dir":"Reference","previous_headings":"","what":"Method collapse_edges()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Assuming simplex tree 1-skeleton graph, method collapse edges (simplices higher dimension ignored) resets simplex tree remaining edges. good candidate build simplex tree top RipsComplex dimension 1 collapsing edges done Python example. implementation details, please refer Boissonnat Pritam (2020) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$collapse_edges(nb_iterations = 1)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"nb_iterations integer value specifying number edge collapse iterations perform. Defaults 1L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"requires Eigen >= 3.1.0 exception thrown available.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"references-1","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Simplex Tree — SimplexTree","text":"Boissonnat J, Pritam S (2020). “Edge collapse persistence flag complexes.” SoCG 2020-36th International Symposium Computational Geometry.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$collapse_edges() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-compute-persistence-","dir":"Reference","previous_headings":"","what":"Method compute_persistence()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function computes persistence simplicial complex, can accessed $persistent_betti_numbers(), $persistence_pairs(), etc. function equivalent $persistence() want list $persistence() returns.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$compute_persistence(   homology_coeff_field = 11,   min_persistence = 0,   persistence_dim_max = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values. persistence_dim_max boolean specifying whether persistent homology maximal dimension complex computed (persistence_dim_max = TRUE). FALSE, ignored. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-dimension-","dir":"Reference","previous_headings":"","what":"Method dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns dimension simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$dimension()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"function constant time can recompute dimension required (can triggered $remove_maximal_simplex() $prune_above_filtration() methods instance).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing simplicial complex dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$dimension() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-expansion-","dir":"Reference","previous_headings":"","what":"Method expansion()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Expands simplex tree containing one skeleton dimension max_dim.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$expansion(max_dim)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"max_dim integer value specifying maximal dimension expented simplex tree .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"expanded simplicial complex dimension d attached graph G maximal simplicial complex dimension d admitting graph G 1-skeleton. filtration value assigned simplex maximal filtration value one edges. simplex tree must contain simplex dimension bigger 1 calling method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$expansion(2) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-extend-filtration-","dir":"Reference","previous_headings":"","what":"Method extend_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Extend filtration computing extended persistence. function uses filtration values 0-dimensional simplices, computes extended persistence diagram induced lower-star filtration computed values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$extend_filtration()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"Note calling function, filtration values actually modified within simplex tree. method $extended_persistence() retrieves original values. Note code creates extra vertex internally, make sure simplex tree contain vertex largest possible value (.e., 4294967295). notebook explains compute extension persistence called extended persistence.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-extended-persistence-","dir":"Reference","previous_headings":"","what":"Method extended_persistence()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function retrieves good values extended persistence, separate diagrams Ordinary, Relative, Extended+ Extended- subdiagrams.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$extended_persistence(   homology_coeff_field = 11,   min_persistence = 0 )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-7","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"coordinates persistence diagram points might little different original filtration values due internal transformation (scaling [-2,-1]) performed values computation extended persistence. notebook explains compute extension persistence called extended persistence.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list four persistence diagrams format described $persistence(). first one Ordinary, second one Relative, third one Extended+ fourth one Extended-. See article /Section 2.2 article description subtypes.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$extend_filtration()   st$extended_persistence() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-filtration-","dir":"Reference","previous_headings":"","what":"Method filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns filtration value given N-simplex simplicial complex, +infinity complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$filtration(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"numeric value storing filtration value input N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$filtration(0)   st$filtration(1:2) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-find-","dir":"Reference","previous_headings":"","what":"Method find()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns N-simplex found simplicial complex .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$find(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"boolean storing whether input N-simplex found simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$find(0) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-flag-persistence-generators-","dir":"Reference","previous_headings":"","what":"Method flag_persistence_generators()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Assuming flag complex, function returns persistence pairs, simplex replaced vertices edges gave filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$flag_persistence_generators()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list following components: n x 3 integer matrix containing regular persistence pairs dimension 0, one vertex birth two death; list m x 4 integer matrices containing regular persistence pairs, grouped dimension, 2 vertices per extremity; l x ? integer matrix containing connected components, one vertex ; list k x 2 integer matrices containing essential features, grouped dimension, 2 vertices birth.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   rc <- RipsComplex$new(data = X, max_edge_length = 1)   st <- rc$create_simplex_tree(1)   st$compute_persistence()$flag_persistence_generators() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-boundaries-","dir":"Reference","previous_headings":"","what":"Method get_boundaries()","title":"R6 Class for Simplex Tree — SimplexTree","text":"given N-simplex, function returns list simplices dimension N-1 corresponding boundaries N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_boundaries(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) boundary input N-simplex column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   splx <- st$get_simplices()$simplex[[1]]   st$get_boundaries(splx) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-cofaces-","dir":"Reference","previous_headings":"","what":"Method get_cofaces()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns cofaces given N-simplex given codimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_cofaces(simplex, codimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices. codimension integer value specifying codimension. codimension = 0, cofaces returned (equivalent $get_star() function).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) cofaces input N-simplex column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_cofaces(1:2, 0) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-filtration-","dir":"Reference","previous_headings":"","what":"Method get_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function retrieves list simplices given filtration values sorted increasing filtration values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_filtration()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing simplicies column simplex along corresponding filtration value column filtration, increasing order filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_filtration() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-simplices-","dir":"Reference","previous_headings":"","what":"Method get_simplices()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function retrieves list simplices given filtration values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-16","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing simplicies column simplex along corresponding filtration value column filtration, increasing order filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_simplices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-skeleton-","dir":"Reference","previous_headings":"","what":"Method get_skeleton()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns generator (simplices ) skeleton maximum given dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_skeleton(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension integer value specifying skeleton dimension value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-17","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) skeleton maximum dimension column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_skeleton(0) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-get-star-","dir":"Reference","previous_headings":"","what":"Method get_star()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns star given N-simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$get_star(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-18","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing (simplicies ) star simplex column simplex along corresponding filtration value column filtration.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_star(1:2) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-insert-","dir":"Reference","previous_headings":"","what":"Method insert()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function inserts given N-simplex subfaces given filtration value. simplices already present higher filtration value, filtration value lowered.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$insert(simplex, filtration = 0, chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices. filtration numeric value specifying filtration value simplex. Defaults 0.0. chainable boolean specifying whether method return class , hence allowing use pipe chaining. Defaults TRUE, enables chaining.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-19","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly chainable set TRUE (default behavior), boolean set TRUE simplex yet complex FALSE otherwise (whatever original filtration value).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$insert(1:2)   st$insert(1:3, chainable = FALSE) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-lower-star-persistence-generators-","dir":"Reference","previous_headings":"","what":"Method lower_star_persistence_generators()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Assuming lower-star filtration, function returns persistence pairs, simplex replaced vertex gave filtration value.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$lower_star_persistence_generators()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-20","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list following components: list n x 2 integer matrices containing regular persistence pairs, grouped dimension, one vertex per extremity; list m x ? integer matrices containing essential features, grouped dimension, one vertex .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$lower_star_persistence_generators() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-make-filtration-non-decreasing-","dir":"Reference","previous_headings":"","what":"Method make_filtration_non_decreasing()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function ensures simplex higher filtration value faces increasing filtration values.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$make_filtration_non_decreasing(chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"chainable boolean specifying whether method return class , hence allowing use pipe chaining. Defaults TRUE, enables chaining.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-21","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly chainable set TRUE (default behavior), boolean set TRUE filtration value modified FALSE filtration already non-decreasing.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-19","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$make_filtration_non_decreasing() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-num-simplices-","dir":"Reference","previous_headings":"","what":"Method num_simplices()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns number simplices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$num_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-22","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing number simplices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-20","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$num_simplices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-num-vertices-","dir":"Reference","previous_headings":"","what":"Method num_vertices()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns number vertices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-23","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$num_vertices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-23","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing number vertices simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-21","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$num_vertices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistence-","dir":"Reference","previous_headings":"","what":"Method persistence()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function computes returns persistence simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-24","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistence(   homology_coeff_field = 11,   min_persistence = 0,   persistence_dim_max = FALSE )"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"homology_coeff_field integer value specifying homology coefficient field. Must prime number. Defaults 11L. Maximum 46337L. min_persistence numeric value specifying minimum persistence value take account (strictly greater min_persistence). Defaults 0.0. Set min_persistence = -1.0 see values. persistence_dim_max boolean specifying whether persistent homology maximal dimension complex computed (persistence_dim_max = TRUE). FALSE, ignored. Defaults FALSE.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-24","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble listing persistence feature summarised 3 variables: dimension, birth death.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-22","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$persistence() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistence-intervals-in-dimension-","dir":"Reference","previous_headings":"","what":"Method persistence_intervals_in_dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns persistence intervals simplicial complex specific dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-25","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistence_intervals_in_dimension(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension integer value specifying desired dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-25","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"tibble storing persistence intervals required dimension two columns birth death.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-23","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$persistence_intervals_in_dimension(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistence-pairs-","dir":"Reference","previous_headings":"","what":"Method persistence_pairs()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns list persistence birth death simplices pairs.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-26","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistence_pairs()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-26","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"list pairs integer vectors storing list persistence simplices intervals.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-24","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$persistence_pairs() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-persistent-betti-numbers-","dir":"Reference","previous_headings":"","what":"Method persistent_betti_numbers()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns persistent Betti numbers simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-27","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$persistent_betti_numbers(from_value, to_value)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"from_value numeric value specifying persistence birth limit added numbers (persistent birth <= from_value). to_value numeric value specifying persistence death limit added numbers (persistent death > to_value).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-27","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer vector storing persistent Betti numbers.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-25","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$persistent_betti_numbers(0, 0.1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-prune-above-filtration-","dir":"Reference","previous_headings":"","what":"Method prune_above_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"Prune filtration value given parameter.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-28","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$prune_above_filtration(filtration, chainable = TRUE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"filtration numeric value specifying maximum threshold value. chainable boolean specifying whether method return class , hence allowing use pipe chaining. Defaults TRUE, enables chaining.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-8","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"Note dimension simplicial complex may lower calling prune_above_filtration() . However, upper_bound_dimension() return old value, remains valid upper bound. care, can call dimension() method recompute exact dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-28","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly chainable set TRUE (default behavior), boolean set TRUE filtration modified FALSE otherwise.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-26","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$prune_above_filtration(0.12) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-remove-maximal-simplex-","dir":"Reference","previous_headings":"","what":"Method remove_maximal_simplex()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function removes given maximal N-simplex simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-29","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$remove_maximal_simplex(simplex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"simplex integer vector representing N-simplex form list vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-9","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension simplicial complex may lower calling $remove_maximal_simplex() . However, $upper_bound_dimension() method return old value, remains valid upper bound. care, can call $dimension() recompute exact dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-29","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-27","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$remove_maximal_simplex(1:2) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-reset-filtration-","dir":"Reference","previous_headings":"","what":"Method reset_filtration()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function resets filtration value simplices dimension least min_dim. Resets simplex tree min_dim = 0L. reset_filtration may break filtration property min_dim > 0, user’s responsibility make valid filtration (using large enough filtration value, calling $make_filtration_non_decreasing() afterwards instance).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-30","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$reset_filtration(filtration, min_dim = 0)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"filtration numeric value specyfing filtration threshold. min_dim integer value specifying minimal dimension. Defaults 0L.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-30","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-28","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$reset_filtration(0.1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-set-dimension-","dir":"Reference","previous_headings":"","what":"Method set_dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function sets dimension simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-31","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$set_dimension(dimension)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"dimension integer value specifying dimension.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"details-10","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Simplex Tree — SimplexTree","text":"function must used caution disables dimension recomputation required (recomputation can triggered $remove_maximal_simplex() $prune_above_filtration()).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-31","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-29","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$set_dimension(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-upper-bound-dimension-","dir":"Reference","previous_headings":"","what":"Method upper_bound_dimension()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function returns valid dimension upper bound simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-32","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$upper_bound_dimension()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-32","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"integer value storing upper bound dimension simplicial complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-30","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$upper_bound_dimension() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-write-persistence-diagram-","dir":"Reference","previous_headings":"","what":"Method write_persistence_diagram()","title":"R6 Class for Simplex Tree — SimplexTree","text":"function writes persistence intervals simplicial complex user given file name.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-33","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$write_persistence_diagram(persistence_file)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"persistence_file string specifying name file.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"returns-33","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Simplex Tree — SimplexTree","text":"updated SimplexTree class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"examples-31","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   f <- fs::file_temp(ext = \".dgm\")   st$compute_persistence()$write_persistence_diagram(f)   fs::file_delete(f) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Simplex Tree — SimplexTree","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"usage-34","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"SimplexTree$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"arguments-23","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Simplex Tree — SimplexTree","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/SimplexTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Simplex Tree — SimplexTree","text":"","code":"## ------------------------------------------------ ## Method `SimplexTree$new` ## ------------------------------------------------  if (reticulate::py_module_available(\"gudhi\")) {   st <- SimplexTree$new()   st }  ## ------------------------------------------------ ## Method `SimplexTree$set_is_flag` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$set_is_flag(TRUE) }  ## ------------------------------------------------ ## Method `SimplexTree$assign_filtration` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$filtration(1)   st$assign_filtration(1, 0.8)   st$filtration(1) }  ## ------------------------------------------------ ## Method `SimplexTree$betti_numbers` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$betti_numbers() }  ## ------------------------------------------------ ## Method `SimplexTree$collapse_edges` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$collapse_edges() }  ## ------------------------------------------------ ## Method `SimplexTree$dimension` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$dimension() }  ## ------------------------------------------------ ## Method `SimplexTree$expansion` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$expansion(2) }  ## ------------------------------------------------ ## Method `SimplexTree$extended_persistence` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$extend_filtration()   st$extended_persistence() }  ## ------------------------------------------------ ## Method `SimplexTree$filtration` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$filtration(0)   st$filtration(1:2) }  ## ------------------------------------------------ ## Method `SimplexTree$find` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$find(0) }  ## ------------------------------------------------ ## Method `SimplexTree$flag_persistence_generators` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   rc <- RipsComplex$new(data = X, max_edge_length = 1)   st <- rc$create_simplex_tree(1)   st$compute_persistence()$flag_persistence_generators() }  ## ------------------------------------------------ ## Method `SimplexTree$get_boundaries` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   splx <- st$get_simplices()$simplex[[1]]   st$get_boundaries(splx) }  ## ------------------------------------------------ ## Method `SimplexTree$get_cofaces` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_cofaces(1:2, 0) }  ## ------------------------------------------------ ## Method `SimplexTree$get_filtration` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_filtration() }  ## ------------------------------------------------ ## Method `SimplexTree$get_simplices` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_simplices() }  ## ------------------------------------------------ ## Method `SimplexTree$get_skeleton` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_skeleton(0) }  ## ------------------------------------------------ ## Method `SimplexTree$get_star` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$get_star(1:2) }  ## ------------------------------------------------ ## Method `SimplexTree$insert` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$insert(1:2)   st$insert(1:3, chainable = FALSE) }  ## ------------------------------------------------ ## Method `SimplexTree$lower_star_persistence_generators` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$lower_star_persistence_generators() }  ## ------------------------------------------------ ## Method `SimplexTree$make_filtration_non_decreasing` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$make_filtration_non_decreasing() }  ## ------------------------------------------------ ## Method `SimplexTree$num_simplices` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$num_simplices() }  ## ------------------------------------------------ ## Method `SimplexTree$num_vertices` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$num_vertices() }  ## ------------------------------------------------ ## Method `SimplexTree$persistence` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$persistence() }  ## ------------------------------------------------ ## Method `SimplexTree$persistence_intervals_in_dimension` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$persistence_intervals_in_dimension(1) }  ## ------------------------------------------------ ## Method `SimplexTree$persistence_pairs` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$persistence_pairs() }  ## ------------------------------------------------ ## Method `SimplexTree$persistent_betti_numbers` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$compute_persistence()$persistent_betti_numbers(0, 0.1) }  ## ------------------------------------------------ ## Method `SimplexTree$prune_above_filtration` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$prune_above_filtration(0.12) }  ## ------------------------------------------------ ## Method `SimplexTree$remove_maximal_simplex` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$remove_maximal_simplex(1:2) }  ## ------------------------------------------------ ## Method `SimplexTree$reset_filtration` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$reset_filtration(0.1) }  ## ------------------------------------------------ ## Method `SimplexTree$set_dimension` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$set_dimension(1) }  ## ------------------------------------------------ ## Method `SimplexTree$upper_bound_dimension` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   st$upper_bound_dimension() }  ## ------------------------------------------------ ## Method `SimplexTree$write_persistence_diagram` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   ac <- AlphaComplex$new(points = X)   st <- ac$create_simplex_tree()   f <- fs::file_temp(ext = \".dgm\")   st$compute_persistence()$write_persistence_diagram(f)   fs::file_delete(f) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Strong Witness Complex — StrongWitnessComplex","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"Witness complex \\(\\mathrm{Wit}(W,L)\\) simplicial complex defined two sets points \\(\\mathbb{R}^D\\). data structure described Boissonnat Maria (2014) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"class constructs (strong) witness complex given table nearest landmarks respect witnesses.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"rgudhi::PythonClass -> rgudhi::WitnessComplex -> StrongWitnessComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class() rgudhi::WitnessComplex$create_simplex_tree()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"StrongWitnessComplex$new() StrongWitnessComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"StrongWitnessComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"StrongWitnessComplex$new(nearest_landmark_table)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"nearest_landmark_table list tibbles specifying witness w, ordered list nearest landmarks id column nearest_landmark distance w column distance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"StrongWitnessComplex object storing strong Witness complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) if (reticulate::py_module_available(\"gudhi\")) {   wc <- StrongWitnessComplex$new(nearest_landmark_table = l)   wc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"StrongWitnessComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/StrongWitnessComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Strong Witness Complex — StrongWitnessComplex","text":"","code":"## ------------------------------------------------ ## Method `StrongWitnessComplex$new` ## ------------------------------------------------  withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) if (reticulate::py_module_available(\"gudhi\")) {   wc <- StrongWitnessComplex$new(nearest_landmark_table = l)   wc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Tangential Complex — TangentialComplex","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Tangential Delaunay complex simplicial complex designed reconstruct \\(k\\)-dimensional manifold embedded \\(d\\)-dimensional Euclidean space. input point sample coming unknown manifold. running time depends linearly extrinsic dimension \\(d\\) exponentially intrinsic dimension \\(k\\).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex class represents tangential complex. computation complex, optional post-processing called perturbation can run attempt remove inconsistencies.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Clément Jamin","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Tangential Complex — TangentialComplex","text":"rgudhi::PythonClass -> TangentialComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Tangential Complex — TangentialComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex$new() TangentialComplex$compute_tangential_complex() TangentialComplex$create_simplex_tree() TangentialComplex$get_point() TangentialComplex$num_inconsistent_simplices() TangentialComplex$num_inconsistent_stars() TangentialComplex$num_simplices() TangentialComplex$num_vertices() TangentialComplex$set_max_squared_edge_length() TangentialComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$new(points, intrinsic_dim = NULL)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"points Either character string specifying path file points can read numeric matrix list numeric vectors specifying points directly. intrinsic_dim integer value specifying intrinsic dimension manifold. nedded points provided numeric matrix list numeric vectors. Defaults NULL.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"TangentialComplex object storing tangential complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-compute-tangential-complex-","dir":"Reference","previous_headings":"","what":"Method compute_tangential_complex()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"function computes tangential complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$compute_tangential_complex()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Tangential Complex — TangentialComplex","text":"debug mode, may raise ValueError computed star dimension low. Try set bigger maximal edge length value via $set_max_squared_edge_length() method happens.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"updated TangentialComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-create-simplex-tree-","dir":"Reference","previous_headings":"","what":"Method create_simplex_tree()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Exports complex simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$create_simplex_tree()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"SimplexTree object storing computed simplex tree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   st <- tc$compute_tangential_complex()$create_simplex_tree() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-get-point-","dir":"Reference","previous_headings":"","what":"Method get_point()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"function returns point corresponding given vertex SimplexTree.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$get_point(vertex)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"vertex integer value specifying desired vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"numeric vector storing point corresponding input vertex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   st <- tc$compute_tangential_complex()$create_simplex_tree()   tc$get_point(1) }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_inconsistent_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing number inconsistent simplicies.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_inconsistent_simplices() }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_inconsistent_stars()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing number stars containing least one inconsistent simplex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_inconsistent_stars() }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_simplices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing total number simplices stars (including duplicates appear several stars).","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_simplices() }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$num_vertices()"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"integer value storing number vertices.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_vertices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-set-max-squared-edge-length-","dir":"Reference","previous_headings":"","what":"Method set_max_squared_edge_length()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"Sets maximal possible squared edge length edges triangulations.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$set_max_squared_edge_length(max_squared_edge_length)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"max_squared_edge_length numeric value specifying maximal possible squared edge length.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Tangential Complex — TangentialComplex","text":"maximal edge length value low, $compute_tangential_complex() method throw exception debug mode.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Tangential Complex — TangentialComplex","text":"updated TangentialComplex class invisibly.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$set_max_squared_edge_length(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Tangential Complex — TangentialComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"TangentialComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Tangential Complex — TangentialComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/TangentialComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Tangential Complex — TangentialComplex","text":"","code":"## ------------------------------------------------ ## Method `TangentialComplex$new` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc }  ## ------------------------------------------------ ## Method `TangentialComplex$compute_tangential_complex` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex() }  ## ------------------------------------------------ ## Method `TangentialComplex$create_simplex_tree` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   st <- tc$compute_tangential_complex()$create_simplex_tree() }  ## ------------------------------------------------ ## Method `TangentialComplex$get_point` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   st <- tc$compute_tangential_complex()$create_simplex_tree()   tc$get_point(1) }  ## ------------------------------------------------ ## Method `TangentialComplex$num_inconsistent_simplices` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_inconsistent_simplices() }  ## ------------------------------------------------ ## Method `TangentialComplex$num_inconsistent_stars` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_inconsistent_stars() }  ## ------------------------------------------------ ## Method `TangentialComplex$num_simplices` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_simplices() }  ## ------------------------------------------------ ## Method `TangentialComplex$num_vertices` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$compute_tangential_complex()   tc$num_vertices() }  ## ------------------------------------------------ ## Method `TangentialComplex$set_max_squared_edge_length` ## ------------------------------------------------  n <- 10 X <- lapply(   seq(0, 2 * pi, len = n),   function(.x) c(cos(.x), sin(.x)) ) if (reticulate::py_module_available(\"gudhi\")) {   tc <- TangentialComplex$new(points = X, intrinsic_dim = 1)   tc$set_max_squared_edge_length(1) }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class for Witness Complex — WitnessComplex","title":"R6 Class for Witness Complex — WitnessComplex","text":"Witness complex \\(\\mathrm{Wit}(W,L)\\) simplicial complex defined two sets points \\(\\mathbb{R}^D\\). data structure described Boissonnat Maria (2014) .","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class for Witness Complex — WitnessComplex","text":"class constructs (weak) witness complex given table nearest landmarks respect witnesses.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"R6 Class for Witness Complex — WitnessComplex","text":"Boissonnat J, Maria C (2014). “simplex tree: efficient data structure general simplicial complexes.” Algorithmica, 70(3), 406--427.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R6 Class for Witness Complex — WitnessComplex","text":"Siargey Kachanovich","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 Class for Witness Complex — WitnessComplex","text":"rgudhi::PythonClass -> WitnessComplex","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 Class for Witness Complex — WitnessComplex","text":"rgudhi::PythonClass$get_python_class() rgudhi::PythonClass$set_python_class()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class for Witness Complex — WitnessComplex","text":"WitnessComplex$new() WitnessComplex$create_simplex_tree() WitnessComplex$clone()","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class for Witness Complex — WitnessComplex","text":"WitnessComplex constructor.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"WitnessComplex$new(nearest_landmark_table)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Witness Complex — WitnessComplex","text":"nearest_landmark_table list tibbles specifying witness w, ordered list nearest landmarks id column nearest_landmark distance w column distance.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Witness Complex — WitnessComplex","text":"WitnessComplex object storing Witness complex.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) if (reticulate::py_module_available(\"gudhi\")) {   wc <- WitnessComplex$new(nearest_landmark_table = l)   wc }"},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"WitnessComplex$create_simplex_tree(max_alpha_square = Inf)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Witness Complex — WitnessComplex","text":"max_alpha_square maximum relaxation parameter. Defaults Inf.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class for Witness Complex — WitnessComplex","text":"SimplexTree object storing computed simplex tree created Delaunay triangulation.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) if (reticulate::py_module_available(\"gudhi\")) {   wc <- WitnessComplex$new(nearest_landmark_table = l)   st <- wc$create_simplex_tree()   st$num_vertices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class for Witness Complex — WitnessComplex","text":"objects class cloneable method.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"WitnessComplex$clone(deep = FALSE)"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class for Witness Complex — WitnessComplex","text":"deep Whether make deep clone.","code":""},{"path":"https://lmjl-alea.github.io/rgudhi/reference/WitnessComplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 Class for Witness Complex — WitnessComplex","text":"","code":"## ------------------------------------------------ ## Method `WitnessComplex$new` ## ------------------------------------------------  withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) if (reticulate::py_module_available(\"gudhi\")) {   wc <- WitnessComplex$new(nearest_landmark_table = l)   wc }  ## ------------------------------------------------ ## Method `WitnessComplex$create_simplex_tree` ## ------------------------------------------------  withr::with_seed(1234, {   l <- list(     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     ),     tibble::tibble(       nearest_landmark = sample.int(10),       distance = sort(rexp(10))     )   ) }) if (reticulate::py_module_available(\"gudhi\")) {   wc <- WitnessComplex$new(nearest_landmark_table = l)   st <- wc$create_simplex_tree()   st$num_vertices() }"},{"path":"https://lmjl-alea.github.io/rgudhi/reference/rgudhi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rgudhi: An R Interface to GUDHI — rgudhi-package","title":"rgudhi: An R Interface to GUDHI — rgudhi-package","text":"Provides R interface Python package GUDHI.","code":""},{"path":[]},{"path":"https://lmjl-alea.github.io/rgudhi/reference/rgudhi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rgudhi: An R Interface to GUDHI — rgudhi-package","text":"Maintainer: Aymeric Stamm aymeric.stamm@math.cnrs.fr (ORCID)","code":""}]
